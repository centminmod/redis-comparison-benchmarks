WordPress Object Cache Test with Predis - Configured Runner
============================================================
Implementation: Predis (Pure PHP Redis Client)
Enhanced TLS Support: Yes
Statistical Analysis: 5 iterations with confidence intervals

📋 Loading configuration from: tests/php/test_config_predis.php
✅ Configuration loaded successfully

📊 Test Configuration:
  Implementation: Predis (Pure PHP)
  Duration per iteration: 10s
  Test iterations: 5
  Output directory: ./benchmarklogs-1t
  TLS testing: Enabled
  Flush before test: Yes
  Thread variant: 1
  Connection timeout: 5s
  Read/write timeout: 5s
  Connection retries: 3
  Persistent connections: No
  Thread configuration:
    redis_io_threads: 1 threads
    keydb_server_threads: 1 threads
    dragonfly_proactor_threads: 1 threads
    valkey_io_threads: 1 threads
  Database configurations:
    Redis: 127.0.0.1:6379 (TLS: 6390) (IO threads: 1)
    KeyDB: 127.0.0.1:6380 (TLS: 6391) (Server threads: 1)
    Dragonfly: 127.0.0.1:6381 (TLS: 6392) (Proactor threads: 1)
    Valkey: 127.0.0.1:6382 (TLS: 6393) (IO threads: 1)

======================================================================

🔍 Checking Predis availability...
✅ Predis library available

🚀 Starting Predis WordPress Object Cache Test...

Starting WordPress Object Cache Test (Predis)...
Timestamp: 2025-06-10 10:55:15 UTC
Predis Version: unknown
PHP Version: 8.4.8
Enhanced Testing Configuration (Predis):
- Iterations per test: 5
- Iteration pause: 500ms
- Statistical analysis: Enabled
- Raw data logging: Enabled
- Connection timeout: 5s
- Read/write timeout: 5s
- Connection retry attempts: 3
- Persistent connections: Disabled
- TCP keepalive: Enabled
Thread Variant: 1
Thread Configuration:
  redis_io_threads: 1 threads
  keydb_server_threads: 1 threads
  dragonfly_proactor_threads: 1 threads
  valkey_io_threads: 1 threads
TLS Certificates: Found and validated (Predis-compatible)

Checking TLS readiness (Predis)...
  Redis: TLS port accessible ✓
  KeyDB: TLS port accessible ✓
  Dragonfly: TLS port accessible ✓
  Valkey: TLS port accessible ✓

Predis TLS testing will be attempted for: Redis, KeyDB, Dragonfly, Valkey
============================================================
Testing Redis with Predis...
  Configuration: IO Threads: 1
  Running 5 iterations for Redis (non-TLS-Predis)...
  Initial keys in database: 190126
  Flushing database before test...
  Database flushed in 99.09ms. Keys remaining: 0
    Iteration 1/5... 12821 ops/sec, 0.077ms latency
    Iteration 2/5... 13519 ops/sec, 0.073ms latency
    Iteration 3/5... 14181 ops/sec, 0.070ms latency
    Iteration 4/5... 14169 ops/sec, 0.070ms latency
    Iteration 5/5... 14372 ops/sec, 0.069ms latency
  Redis (non-TLS-Predis): 13812.44±641.61 ops/sec (CV: 4.6%), 0.072±0.003ms latency, Quality: good
  Final keys in database: 50855
🔐 Attempting TLS connection to Redis at 127.0.0.1:6390 (Predis)
  Using custom port scheme: Redis=6390, KeyDB=6391, Dragonfly=6392, Valkey=6393
  Note: Predis uses 'tls' scheme and 'ssl' context array
  📡 Method 1: Predis 'tls' scheme with SSL context...
  🧪 Testing TLS connection with SET/GET commands...
  ✅ TLS connection successful with Predis 'tls' scheme
  Running 5 iterations for Redis (TLS-Predis)...
  Initial keys in database: 189783
  Flushing database before test...
  Database flushed in 85.06ms. Keys remaining: 0
    Iteration 1/5... 9170 ops/sec, 0.108ms latency
    Iteration 2/5... 9877 ops/sec, 0.101ms latency
    Iteration 3/5... 10167 ops/sec, 0.098ms latency
    Iteration 4/5... 10235 ops/sec, 0.097ms latency
    Iteration 5/5... 10355 ops/sec, 0.096ms latency
  Redis (TLS-Predis): 9960.77±475.95 ops/sec (CV: 4.8%), 0.100±0.005ms latency, Quality: good
  Final keys in database: 44992

Testing KeyDB with Predis...
  Configuration: Server Threads: 1
  Running 5 iterations for KeyDB (non-TLS-Predis)...
  Initial keys in database: 189499
  Flushing database before test...
  Database flushed in 91.57ms. Keys remaining: 0
    Iteration 1/5... 11135 ops/sec, 0.089ms latency
    Iteration 2/5... 11861 ops/sec, 0.084ms latency
    Iteration 3/5... 12256 ops/sec, 0.081ms latency
    Iteration 4/5... 12393 ops/sec, 0.080ms latency
    Iteration 5/5... 12598 ops/sec, 0.079ms latency
  KeyDB (non-TLS-Predis): 12048.73±577.30 ops/sec (CV: 4.8%), 0.083±0.004ms latency, Quality: good
  Final keys in database: 48455
🔐 Attempting TLS connection to KeyDB at 127.0.0.1:6391 (Predis)
  Using custom port scheme: Redis=6390, KeyDB=6391, Dragonfly=6392, Valkey=6393
  Note: Predis uses 'tls' scheme and 'ssl' context array
  📡 Method 1: Predis 'tls' scheme with SSL context...
  🧪 Testing TLS connection with SET/GET commands...
  ✅ TLS connection successful with Predis 'tls' scheme
  Running 5 iterations for KeyDB (TLS-Predis)...
  Initial keys in database: 189840
  Flushing database before test...
  Database flushed in 91.92ms. Keys remaining: 0
    Iteration 1/5... 8405 ops/sec, 0.118ms latency
    Iteration 2/5... 8996 ops/sec, 0.111ms latency
    Iteration 3/5... 9235 ops/sec, 0.108ms latency
    Iteration 4/5... 9293 ops/sec, 0.107ms latency
    Iteration 5/5... 9371 ops/sec, 0.106ms latency
  KeyDB (TLS-Predis): 9060.04±391.93 ops/sec (CV: 4.3%), 0.110±0.005ms latency, Quality: good
  Final keys in database: 43063

Testing Dragonfly with Predis...
  Configuration: Proactor Threads: 1
  Running 5 iterations for Dragonfly (non-TLS-Predis)...
  Initial keys in database: 189373
  Flushing database before test...
  Database flushed in 13.16ms. Keys remaining: 0
    Iteration 1/5... 9254 ops/sec, 0.107ms latency
    Iteration 2/5... 9849 ops/sec, 0.101ms latency
    Iteration 3/5... 10394 ops/sec, 0.096ms latency
    Iteration 4/5... 10112 ops/sec, 0.098ms latency
    Iteration 5/5... 10374 ops/sec, 0.096ms latency
  Dragonfly (non-TLS-Predis): 9996.56±470.91 ops/sec (CV: 4.7%), 0.100±0.005ms latency, Quality: good
  Final keys in database: 44938
🔐 Attempting TLS connection to Dragonfly at 127.0.0.1:6392 (Predis)
  Using custom port scheme: Redis=6390, KeyDB=6391, Dragonfly=6392, Valkey=6393
  Note: Predis uses 'tls' scheme and 'ssl' context array
  📡 Method 1: Predis 'tls' scheme with SSL context...
  🔐 Adding Dragonfly authentication to connection parameters...
  🧪 Testing TLS connection with SET/GET commands...
  ✅ TLS connection successful with Predis 'tls' scheme
  Running 5 iterations for Dragonfly (TLS-Predis)...
  Initial keys in database: 189787
  Flushing database before test...
  Database flushed in 23.49ms. Keys remaining: 0
    Iteration 1/5... 9617 ops/sec, 0.103ms latency
    Iteration 2/5... 10622 ops/sec, 0.094ms latency
    Iteration 3/5... 10880 ops/sec, 0.091ms latency
    Iteration 4/5... 11184 ops/sec, 0.089ms latency
    Iteration 5/5... 11336 ops/sec, 0.088ms latency
  Dragonfly (TLS-Predis): 10728.06±679.52 ops/sec (CV: 6.3%), 0.093±0.006ms latency, Quality: fair
  Final keys in database: 46411

Testing Valkey with Predis...
  Configuration: IO Threads: 1
  Running 5 iterations for Valkey (non-TLS-Predis)...
  Initial keys in database: 190051
  Flushing database before test...
  Database flushed in 0.08ms. Keys remaining: 0
    Iteration 1/5... 13311 ops/sec, 0.075ms latency
    Iteration 2/5... 14046 ops/sec, 0.071ms latency
    Iteration 3/5... 13959 ops/sec, 0.071ms latency
    Iteration 4/5... 14350 ops/sec, 0.069ms latency
    Iteration 5/5... 14777 ops/sec, 0.067ms latency
  Valkey (non-TLS-Predis): 14088.72±539.86 ops/sec (CV: 3.8%), 0.071±0.003ms latency, Quality: good
  Final keys in database: 50993
🔐 Attempting TLS connection to Valkey at 127.0.0.1:6393 (Predis)
  Using custom port scheme: Redis=6390, KeyDB=6391, Dragonfly=6392, Valkey=6393
  Note: Predis uses 'tls' scheme and 'ssl' context array
  📡 Method 1: Predis 'tls' scheme with SSL context...
  🧪 Testing TLS connection with SET/GET commands...
  ✅ TLS connection successful with Predis 'tls' scheme
  Running 5 iterations for Valkey (TLS-Predis)...
  Initial keys in database: 189794
  Flushing database before test...
  Database flushed in 0.13ms. Keys remaining: 0
    Iteration 1/5... 9422 ops/sec, 0.106ms latency
    Iteration 2/5... 9845 ops/sec, 0.101ms latency
    Iteration 3/5... 10120 ops/sec, 0.098ms latency
    Iteration 4/5... 10283 ops/sec, 0.097ms latency
    Iteration 5/5... 10616 ops/sec, 0.094ms latency
  Valkey (TLS-Predis): 10057.23±451.72 ops/sec (CV: 4.5%), 0.099±0.005ms latency, Quality: good
  Final keys in database: 45012

Enhanced Predis results saved:
  CSV: ./benchmarklogs-1t/wordpress_object_cache_test_predis_predis.csv
  JSON: ./benchmarklogs-1t/wordpress_object_cache_test_predis_predis.json
  Markdown: ./benchmarklogs-1t/wordpress_object_cache_test_predis_predis.md
  Raw Data: ./benchmarklogs-1t/wordpress_object_cache_test_predis_predis_raw.json
============================================================
Enhanced Predis test suite completed!
Total execution time: 417.28 seconds
Total tests run: 8
Statistical iterations per test: 5
Results saved to ./benchmarklogs-1t/
Redis implementation: Predis (pure PHP)

====================================================================================================
ENHANCED STATISTICAL PERFORMANCE SUMMARY (Predis)
Thread Variant: 1 | Iterations per test: 5
====================================================================================================
Rank Database                       Ops/sec   ±StdDev      CV%  Latency  Quality     95% CI     Reliable
----------------------------------------------------------------------------------------------------
#1  Valkey (Predis)              14089      540    3.8%  0.071ms 🟡good    13,418-14,759      ✅
#2  Redis (Predis)               13812      642    4.6%  0.072ms 🟡good    13,016-14,609      ✅
#3  KeyDB (Predis)               12049      577    4.8%  0.083ms 🟡good    11,332-12,765      ✅
#4  Dragonfly (TLS-Predis)       10728      680    6.3%  0.093ms 🟠fair    9,884-11,572      ✅
#5  Valkey (TLS-Predis)          10057      452    4.5%  0.099ms 🟡good    9,496-10,618      ✅
#6  Dragonfly (Predis)            9997      471    4.7%  0.100ms 🟡good    9,412-10,581      ✅
#7  Redis (TLS-Predis)            9961      476    4.8%  0.100ms 🟡good    9,370-10,552      ✅
#8  KeyDB (TLS-Predis)            9060      392    4.3%  0.110ms 🟡good     8,573-9,547      ✅
====================================================================================================
Implementation: Predis (Pure PHP Redis Client)
📈 Compare with phpredis results to see implementation trade-offs

============================================================
TLS vs NON-TLS PERFORMANCE COMPARISON (Predis)
Thread Variant: 1
============================================================
Redis      | Non-TLS:    13812±642  | TLS:     9961±476  | Impact: +27.9% *
KeyDB      | Non-TLS:    12049±577  | TLS:     9060±392  | Impact: +24.8% *
Dragonfly  | Non-TLS:     9997±471  | TLS:    10728±680  | Impact:  -7.3%
Valkey     | Non-TLS:    14089±540  | TLS:    10057±452  | Impact: +28.6% *
------------------------------------------------------------
* = Statistically significant difference (95% confidence)
Implementation: Predis (Pure PHP)
============================================================

================================================================================
STATISTICAL INSIGHTS (Predis)
Thread Variant: 1 | Iterations: 5
================================================================================
Measurement Quality Distribution:
  🟡 Good      :  7 tests (87.5%)
  🟠 Fair      :  1 tests (12.5%)

Coefficient of Variation Analysis:
  Average CV: 4.7% (lower is better)
  Range: 3.8% - 6.3%
  📊 Good measurement consistency with Predis

Predis Implementation Notes:
  📡 Connection management: Automatic (no manual close required)
  🔒 TLS handling: Enhanced SSL context support
  🔄 Error recovery: Built-in retry logic with exponential backoff
  📊 Performance characteristics: Pure PHP (higher latency, more consistent)
================================================================================

================================================================================
PREDIS-SPECIFIC INSIGHTS
Thread Variant: 1 | Implementation: Predis (Pure PHP)
================================================================================
TLS Connection Reliability:
  ✅ Predis TLS connections: 4/4 databases
  📊 All TLS connections established successfully
  🔒 SSL context handling: Reliable (Predis manages SSL internally)

Predis Configuration Analysis:
  🔗 Connection timeout: 5s
  📡 Read/write timeout: 5s
  🔄 Connection retry attempts: 3
  ⚡ TCP keepalive: Enabled
  🔗 Persistent connections: Disabled

Performance Characteristics:
  📈 Average non-TLS performance: 12,487 ops/sec
  🔒 Average TLS performance: 9,952 ops/sec
  📊 TLS overhead: 20.3%
  ℹ️  Note: 25-40% TLS overhead is normal for Redis over SSL

Predis Advantages:
  ✅ Better TLS reliability compared to phpredis extension
  ✅ Enhanced SSL context handling
  ✅ No extension compilation dependencies
  ✅ Consistent behavior across PHP versions
  ⚠️  Trade-off: Lower raw performance due to pure PHP implementation
================================================================================

======================================================================
✅ Predis WordPress Object Cache test completed successfully!
📁 Results saved to: ./benchmarklogs-1t
📊 Implementation: Predis (Pure PHP Redis Client)
🔒 TLS Support: Enhanced reliability compared to phpredis

📄 Generated files:
  php_wordpress_test_phpredis.log (25.5KB)
  php_wordpress_test_predis.log (13.5KB)
  wordpress_object_cache_test_predis_predis.csv (1.8KB)
  wordpress_object_cache_test_predis_predis.json (50.6KB)
  wordpress_object_cache_test_predis_predis.md (2.7KB)
  wordpress_object_cache_test_predis_predis_raw.json (38.3KB)
