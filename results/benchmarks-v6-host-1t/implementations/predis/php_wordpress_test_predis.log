WordPress Object Cache Test with Predis - Configured Runner
============================================================
Implementation: Predis (Pure PHP Redis Client)
Enhanced TLS Support: Yes
Statistical Analysis: 13 iterations with confidence intervals

üìã Loading configuration from: tests/php/test_config_predis.php
‚úÖ Configuration loaded successfully

üìä Test Configuration:
  Implementation: Predis (Pure PHP)
  Duration per iteration: 30s
  Test iterations: 13
  Output directory: ./benchmarklogs-1t
  TLS testing: Enabled
  Flush before test: Yes
  Thread variant: 1
  Connection timeout: 5s
  Read/write timeout: 5s
  Connection retries: 3
  Persistent connections: No
  Thread configuration:
    redis_io_threads: 1 threads
    keydb_server_threads: 1 threads
    dragonfly_proactor_threads: 1 threads
    valkey_io_threads: 1 threads
  Database configurations:
    Redis: 127.0.0.1:6379 (TLS: 6390) (IO threads: 1)
    KeyDB: 127.0.0.1:6380 (TLS: 6391) (Server threads: 1)
    Dragonfly: 127.0.0.1:6381 (TLS: 6392) (Proactor threads: 1)
    Valkey: 127.0.0.1:6382 (TLS: 6393) (IO threads: 1)

======================================================================

üîç Checking Predis availability...
‚úÖ Predis library available

üöÄ Starting Predis WordPress Object Cache Test...

Starting WordPress Object Cache Test (Predis)...
Timestamp: 2025-06-10 09:27:07 UTC
Predis Version: unknown
PHP Version: 8.4.8
Enhanced Testing Configuration (Predis):
- Iterations per test: 13
- Iteration pause: 500ms
- Statistical analysis: Enabled
- Raw data logging: Enabled
- Connection timeout: 5s
- Read/write timeout: 5s
- Connection retry attempts: 3
- Persistent connections: Disabled
- TCP keepalive: Enabled
Thread Variant: 1
Thread Configuration:
  redis_io_threads: 1 threads
  keydb_server_threads: 1 threads
  dragonfly_proactor_threads: 1 threads
  valkey_io_threads: 1 threads
TLS Certificates: Found and validated (Predis-compatible)

Checking TLS readiness (Predis)...
  Redis: TLS port accessible ‚úì
  KeyDB: TLS port accessible ‚úì
  Dragonfly: TLS port accessible ‚úì
  Valkey: TLS port accessible ‚úì

Predis TLS testing will be attempted for: Redis, KeyDB, Dragonfly, Valkey
============================================================
Testing Redis with Predis...
  Configuration: IO Threads: 1
  Running 13 iterations for Redis (non-TLS-Predis)...
  Initial keys in database: 395215
  Flushing database before test...
  Database flushed in 215.93ms. Keys remaining: 0
    Iteration 1/13... 13536 ops/sec, 0.073ms latency
    Iteration 2/13... 14594 ops/sec, 0.068ms latency
    Iteration 3/13... 14849 ops/sec, 0.067ms latency
    Iteration 4/13... 14925 ops/sec, 0.066ms latency
    Iteration 5/13... 14826 ops/sec, 0.067ms latency
    Iteration 6/13... 14776 ops/sec, 0.067ms latency
    Iteration 7/13... 14914 ops/sec, 0.067ms latency
    Iteration 8/13... 14968 ops/sec, 0.066ms latency
    Iteration 9/13... 14984 ops/sec, 0.066ms latency
    Iteration 10/13... 14984 ops/sec, 0.066ms latency
    Iteration 11/13... 15050 ops/sec, 0.066ms latency
    Iteration 12/13... 15114 ops/sec, 0.066ms latency
    Iteration 13/13... 15081 ops/sec, 0.066ms latency
  Redis (non-TLS-Predis): 14815.41¬±408.79 ops/sec (CV: 2.8%), 0.067¬±0.002ms latency, Quality: good
  Final keys in database: 61509
üîê Attempting TLS connection to Redis at 127.0.0.1:6390 (Predis)
  Using custom port scheme: Redis=6390, KeyDB=6391, Dragonfly=6392, Valkey=6393
  Note: Predis uses 'tls' scheme and 'ssl' context array
  üì° Method 1: Predis 'tls' scheme with SSL context...
  üß™ Testing TLS connection with SET/GET commands...
  ‚úÖ TLS connection successful with Predis 'tls' scheme
  Running 13 iterations for Redis (TLS-Predis)...
  Initial keys in database: 394407
  Flushing database before test...
  Database flushed in 203.05ms. Keys remaining: 0
    Iteration 1/13... 9725 ops/sec, 0.102ms latency
    Iteration 2/13... 10514 ops/sec, 0.095ms latency
    Iteration 3/13... 10572 ops/sec, 0.094ms latency
    Iteration 4/13... 10744 ops/sec, 0.092ms latency
    Iteration 5/13... 10939 ops/sec, 0.091ms latency
    Iteration 6/13... 10788 ops/sec, 0.092ms latency
    Iteration 7/13... 10836 ops/sec, 0.092ms latency
    Iteration 8/13... 10942 ops/sec, 0.091ms latency
    Iteration 9/13... 10785 ops/sec, 0.092ms latency
    Iteration 10/13... 10747 ops/sec, 0.092ms latency
    Iteration 11/13... 10802 ops/sec, 0.092ms latency
    Iteration 12/13... 10845 ops/sec, 0.092ms latency
    Iteration 13/13... 10780 ops/sec, 0.092ms latency
  Redis (TLS-Predis): 10693.75¬±315.30 ops/sec (CV: 2.9%), 0.093¬±0.003ms latency, Quality: good
  Final keys in database: 61475

Testing KeyDB with Predis...
  Configuration: Server Threads: 1
  Running 13 iterations for KeyDB (non-TLS-Predis)...
  Initial keys in database: 394329
  Flushing database before test...
  Database flushed in 211.08ms. Keys remaining: 0
    Iteration 1/13... 11708 ops/sec, 0.085ms latency
    Iteration 2/13... 12502 ops/sec, 0.079ms latency
    Iteration 3/13... 12707 ops/sec, 0.078ms latency
    Iteration 4/13... 12825 ops/sec, 0.077ms latency
    Iteration 5/13... 12866 ops/sec, 0.077ms latency
    Iteration 6/13... 12926 ops/sec, 0.077ms latency
    Iteration 7/13... 12918 ops/sec, 0.077ms latency
    Iteration 8/13... 12899 ops/sec, 0.077ms latency
    Iteration 9/13... 12874 ops/sec, 0.077ms latency
    Iteration 10/13... 12956 ops/sec, 0.077ms latency
    Iteration 11/13... 12872 ops/sec, 0.077ms latency
    Iteration 12/13... 12855 ops/sec, 0.077ms latency
    Iteration 13/13... 12761 ops/sec, 0.078ms latency
  KeyDB (non-TLS-Predis): 12743.69¬±333.27 ops/sec (CV: 2.6%), 0.078¬±0.002ms latency, Quality: good
  Final keys in database: 61493
üîê Attempting TLS connection to KeyDB at 127.0.0.1:6391 (Predis)
  Using custom port scheme: Redis=6390, KeyDB=6391, Dragonfly=6392, Valkey=6393
  Note: Predis uses 'tls' scheme and 'ssl' context array
  üì° Method 1: Predis 'tls' scheme with SSL context...
  üß™ Testing TLS connection with SET/GET commands...
  ‚úÖ TLS connection successful with Predis 'tls' scheme
  Running 13 iterations for KeyDB (TLS-Predis)...
  Initial keys in database: 393589
  Flushing database before test...
  Database flushed in 207.41ms. Keys remaining: 0
    Iteration 1/13... 8864 ops/sec, 0.112ms latency
    Iteration 2/13... 9444 ops/sec, 0.105ms latency
    Iteration 3/13... 9666 ops/sec, 0.103ms latency
    Iteration 4/13... 9764 ops/sec, 0.102ms latency
    Iteration 5/13... 9768 ops/sec, 0.102ms latency
    Iteration 6/13... 9885 ops/sec, 0.101ms latency
    Iteration 7/13... 9813 ops/sec, 0.101ms latency
    Iteration 8/13... 9874 ops/sec, 0.101ms latency
    Iteration 9/13... 9888 ops/sec, 0.101ms latency
    Iteration 10/13... 9892 ops/sec, 0.100ms latency
    Iteration 11/13... 9963 ops/sec, 0.100ms latency
    Iteration 12/13... 9877 ops/sec, 0.101ms latency
    Iteration 13/13... 9886 ops/sec, 0.101ms latency
  KeyDB (TLS-Predis): 9737.20¬±294.46 ops/sec (CV: 3.0%), 0.102¬±0.003ms latency, Quality: good
  Final keys in database: 61458

Testing Dragonfly with Predis...
  Configuration: Proactor Threads: 1
  Running 13 iterations for Dragonfly (non-TLS-Predis)...
  Initial keys in database: 389635
  Flushing database before test...
  Database flushed in 20.01ms. Keys remaining: 0
    Iteration 1/13... 9941 ops/sec, 0.100ms latency
    Iteration 2/13... 10567 ops/sec, 0.094ms latency
    Iteration 3/13... 10553 ops/sec, 0.094ms latency
    Iteration 4/13... 10774 ops/sec, 0.092ms latency
    Iteration 5/13... 10719 ops/sec, 0.093ms latency
    Iteration 6/13... 11032 ops/sec, 0.090ms latency
    Iteration 7/13... 10560 ops/sec, 0.094ms latency
    Iteration 8/13... 10740 ops/sec, 0.092ms latency
    Iteration 9/13... 10938 ops/sec, 0.091ms latency
    Iteration 10/13... 10879 ops/sec, 0.091ms latency
    Iteration 11/13... 10806 ops/sec, 0.092ms latency
    Iteration 12/13... 11081 ops/sec, 0.090ms latency
    Iteration 13/13... 10960 ops/sec, 0.091ms latency
  Dragonfly (non-TLS-Predis): 10734.63¬±295.79 ops/sec (CV: 2.8%), 0.093¬±0.003ms latency, Quality: good
  Final keys in database: 61322
üîê Attempting TLS connection to Dragonfly at 127.0.0.1:6392 (Predis)
  Using custom port scheme: Redis=6390, KeyDB=6391, Dragonfly=6392, Valkey=6393
  Note: Predis uses 'tls' scheme and 'ssl' context array
  üì° Method 1: Predis 'tls' scheme with SSL context...
  üîê Adding Dragonfly authentication to connection parameters...
  üß™ Testing TLS connection with SET/GET commands...
  ‚úÖ TLS connection successful with Predis 'tls' scheme
  Running 13 iterations for Dragonfly (TLS-Predis)...
  Initial keys in database: 391593
  Flushing database before test...
  Database flushed in 35.42ms. Keys remaining: 0
    Iteration 1/13... 10216 ops/sec, 0.097ms latency
    Iteration 2/13... 11140 ops/sec, 0.089ms latency
    Iteration 3/13... 11181 ops/sec, 0.089ms latency
    Iteration 4/13... 11380 ops/sec, 0.087ms latency
    Iteration 5/13... 11190 ops/sec, 0.089ms latency
    Iteration 6/13... 11546 ops/sec, 0.086ms latency
    Iteration 7/13... 11319 ops/sec, 0.088ms latency
    Iteration 8/13... 11180 ops/sec, 0.089ms latency
    Iteration 9/13... 11066 ops/sec, 0.090ms latency
    Iteration 10/13... 11364 ops/sec, 0.087ms latency
    Iteration 11/13... 11466 ops/sec, 0.087ms latency
    Iteration 12/13... 11383 ops/sec, 0.087ms latency
    Iteration 13/13... 11046 ops/sec, 0.090ms latency
  Dragonfly (TLS-Predis): 11190.56¬±330.41 ops/sec (CV: 3.0%), 0.089¬±0.003ms latency, Quality: good
  Final keys in database: 61440

Testing Valkey with Predis...
  Configuration: IO Threads: 1
  Running 13 iterations for Valkey (non-TLS-Predis)...
  Initial keys in database: 390587
  Flushing database before test...
  Database flushed in 0.10ms. Keys remaining: 0
    Iteration 1/13... 13590 ops/sec, 0.073ms latency
    Iteration 2/13... 14662 ops/sec, 0.068ms latency
    Iteration 3/13... 15013 ops/sec, 0.066ms latency
    Iteration 4/13... 14694 ops/sec, 0.068ms latency
    Iteration 5/13... 14942 ops/sec, 0.066ms latency
    Iteration 6/13... 14996 ops/sec, 0.066ms latency
    Iteration 7/13... 14886 ops/sec, 0.067ms latency
    Iteration 8/13... 14891 ops/sec, 0.067ms latency
    Iteration 9/13... 14894 ops/sec, 0.067ms latency
    Iteration 10/13... 15044 ops/sec, 0.066ms latency
    Iteration 11/13... 15012 ops/sec, 0.066ms latency
    Iteration 12/13... 15035 ops/sec, 0.066ms latency
    Iteration 13/13... 14832 ops/sec, 0.067ms latency
  Valkey (non-TLS-Predis): 14806.98¬±385.51 ops/sec (CV: 2.6%), 0.067¬±0.002ms latency, Quality: good
  Final keys in database: 61510
üîê Attempting TLS connection to Valkey at 127.0.0.1:6393 (Predis)
  Using custom port scheme: Redis=6390, KeyDB=6391, Dragonfly=6392, Valkey=6393
  Note: Predis uses 'tls' scheme and 'ssl' context array
  üì° Method 1: Predis 'tls' scheme with SSL context...
  üß™ Testing TLS connection with SET/GET commands...
  ‚úÖ TLS connection successful with Predis 'tls' scheme
  Running 13 iterations for Valkey (TLS-Predis)...
  Initial keys in database: 389740
  Flushing database before test...
  Database flushed in 0.15ms. Keys remaining: 0
    Iteration 1/13... 9895 ops/sec, 0.100ms latency
    Iteration 2/13... 10415 ops/sec, 0.095ms latency
    Iteration 3/13... 10794 ops/sec, 0.092ms latency
    Iteration 4/13... 10649 ops/sec, 0.093ms latency
    Iteration 5/13... 10813 ops/sec, 0.092ms latency
    Iteration 6/13... 10714 ops/sec, 0.093ms latency
    Iteration 7/13... 10793 ops/sec, 0.092ms latency
    Iteration 8/13... 10897 ops/sec, 0.091ms latency
    Iteration 9/13... 10952 ops/sec, 0.091ms latency
    Iteration 10/13... 10717 ops/sec, 0.093ms latency
    Iteration 11/13... 10736 ops/sec, 0.093ms latency
    Iteration 12/13... 10872 ops/sec, 0.091ms latency
    Iteration 13/13... 10617 ops/sec, 0.094ms latency
  Valkey (TLS-Predis): 10681.94¬±273.68 ops/sec (CV: 2.6%), 0.093¬±0.003ms latency, Quality: good
  Final keys in database: 61477

Enhanced Predis results saved:
  CSV: ./benchmarklogs-1t/wordpress_object_cache_test_predis_predis.csv
  JSON: ./benchmarklogs-1t/wordpress_object_cache_test_predis_predis.json
  Markdown: ./benchmarklogs-1t/wordpress_object_cache_test_predis_predis.md
  Raw Data: ./benchmarklogs-1t/wordpress_object_cache_test_predis_predis_raw.json
============================================================
Enhanced Predis test suite completed!
Total execution time: 3,176.45 seconds
Total tests run: 8
Statistical iterations per test: 13
Results saved to ./benchmarklogs-1t/
Redis implementation: Predis (pure PHP)

====================================================================================================
ENHANCED STATISTICAL PERFORMANCE SUMMARY (Predis)
Thread Variant: 1 | Iterations per test: 13
====================================================================================================
Rank Database                       Ops/sec   ¬±StdDev      CV%  Latency  Quality     95% CI     Reliable
----------------------------------------------------------------------------------------------------
#1  Redis (Predis)               14815      409    2.8%  0.067ms üü°good    14,589-15,042      ‚úÖ
#2  Valkey (Predis)              14807      386    2.6%  0.067ms üü°good    14,593-15,021      ‚úÖ
#3  KeyDB (Predis)               12744      333    2.6%  0.078ms üü°good    12,559-12,929      ‚úÖ
#4  Dragonfly (TLS-Predis)       11191      330    3.0%  0.089ms üü°good    11,007-11,374      ‚úÖ
#5  Dragonfly (Predis)           10735      296    2.8%  0.093ms üü°good    10,571-10,899      ‚úÖ
#6  Redis (TLS-Predis)           10694      315    2.9%  0.093ms üü°good    10,519-10,869      ‚úÖ
#7  Valkey (TLS-Predis)          10682      274    2.6%  0.093ms üü°good    10,530-10,834      ‚úÖ
#8  KeyDB (TLS-Predis)            9737      294    3.0%  0.102ms üü°good     9,574-9,901      ‚úÖ
====================================================================================================
Implementation: Predis (Pure PHP Redis Client)
üìà Compare with phpredis results to see implementation trade-offs

============================================================
TLS vs NON-TLS PERFORMANCE COMPARISON (Predis)
Thread Variant: 1
============================================================
Redis      | Non-TLS:    14815¬±409  | TLS:    10694¬±315  | Impact: +27.8% *
KeyDB      | Non-TLS:    12744¬±333  | TLS:     9737¬±294  | Impact: +23.6% *
Dragonfly  | Non-TLS:    10735¬±296  | TLS:    11191¬±330  | Impact:  -4.2%
Valkey     | Non-TLS:    14807¬±386  | TLS:    10682¬±274  | Impact: +27.9% *
------------------------------------------------------------
* = Statistically significant difference (95% confidence)
Implementation: Predis (Pure PHP)
============================================================

================================================================================
STATISTICAL INSIGHTS (Predis)
Thread Variant: 1 | Iterations: 13
================================================================================
Measurement Quality Distribution:
  üü° Good      :  8 tests (100.0%)

Coefficient of Variation Analysis:
  Average CV: 2.8% (lower is better)
  Range: 2.6% - 3.0%
  üìä Good measurement consistency with Predis

Predis Implementation Notes:
  üì° Connection management: Automatic (no manual close required)
  üîí TLS handling: Enhanced SSL context support
  üîÑ Error recovery: Built-in retry logic with exponential backoff
  üìä Performance characteristics: Pure PHP (higher latency, more consistent)
================================================================================

================================================================================
PREDIS-SPECIFIC INSIGHTS
Thread Variant: 1 | Implementation: Predis (Pure PHP)
================================================================================
TLS Connection Reliability:
  ‚úÖ Predis TLS connections: 4/4 databases
  üìä All TLS connections established successfully
  üîí SSL context handling: Reliable (Predis manages SSL internally)

Predis Configuration Analysis:
  üîó Connection timeout: 5s
  üì° Read/write timeout: 5s
  üîÑ Connection retry attempts: 3
  ‚ö° TCP keepalive: Enabled
  üîó Persistent connections: Disabled

Performance Characteristics:
  üìà Average non-TLS performance: 13,275 ops/sec
  üîí Average TLS performance: 10,576 ops/sec
  üìä TLS overhead: 20.3%
  ‚ÑπÔ∏è  Note: 25-40% TLS overhead is normal for Redis over SSL

Predis Advantages:
  ‚úÖ Better TLS reliability compared to phpredis extension
  ‚úÖ Enhanced SSL context handling
  ‚úÖ No extension compilation dependencies
  ‚úÖ Consistent behavior across PHP versions
  ‚ö†Ô∏è  Trade-off: Lower raw performance due to pure PHP implementation
================================================================================

======================================================================
‚úÖ Predis WordPress Object Cache test completed successfully!
üìÅ Results saved to: ./benchmarklogs-1t
üìä Implementation: Predis (Pure PHP Redis Client)
üîí TLS Support: Enhanced reliability compared to phpredis

üìÑ Generated files:
  php_wordpress_test_phpredis.log (32KB)
  php_wordpress_test_predis.log (16.8KB)
  wordpress_object_cache_test_predis_predis.csv (1.8KB)
  wordpress_object_cache_test_predis_predis.json (99.6KB)
  wordpress_object_cache_test_predis_predis.md (2.7KB)
  wordpress_object_cache_test_predis_predis_raw.json (87.2KB)
