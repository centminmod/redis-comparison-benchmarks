WordPress Object Cache Test with Predis - Configured Runner
============================================================
Implementation: Predis (Pure PHP Redis Client)
Enhanced TLS Support: Yes
Statistical Analysis: 13 iterations with confidence intervals

üìã Loading configuration from: tests/php/test_config_predis.php
‚úÖ Configuration loaded successfully

üìä Test Configuration:
  Implementation: Predis (Pure PHP)
  Duration per iteration: 30s
  Test iterations: 13
  Output directory: ./benchmarklogs-1t
  TLS testing: Enabled
  Flush before test: Yes
  Thread variant: 1
  Connection timeout: 5s
  Read/write timeout: 5s
  Connection retries: 3
  Persistent connections: No
  Thread configuration:
    redis_io_threads: 1 threads
    keydb_server_threads: 1 threads
    dragonfly_proactor_threads: 1 threads
    valkey_io_threads: 1 threads
  Database configurations:
    Redis: 127.0.0.1:6379 (TLS: 6390) (IO threads: 1)
    KeyDB: 127.0.0.1:6380 (TLS: 6391) (Server threads: 1)
    Dragonfly: 127.0.0.1:6381 (TLS: 6392) (Proactor threads: 1)
    Valkey: 127.0.0.1:6382 (TLS: 6393) (IO threads: 1)

======================================================================

üîç Checking Predis availability...
‚úÖ Predis library available

üöÄ Starting Predis WordPress Object Cache Test...

Starting WordPress Object Cache Test (Predis)...
Timestamp: 2025-06-09 10:55:02 UTC
Predis Version: unknown
PHP Version: 8.4.7
Enhanced Testing Configuration (Predis):
- Iterations per test: 13
- Iteration pause: 500ms
- Statistical analysis: Enabled
- Raw data logging: Enabled
- Connection timeout: 5s
- Read/write timeout: 5s
- Connection retry attempts: 3
- Persistent connections: Disabled
- TCP keepalive: Enabled
Thread Variant: 1
Thread Configuration:
  redis_io_threads: 1 threads
  keydb_server_threads: 1 threads
  dragonfly_proactor_threads: 1 threads
  valkey_io_threads: 1 threads
TLS Certificates: Found and validated (Predis-compatible)

Checking TLS readiness (Predis)...
  Redis: TLS port accessible ‚úì
  KeyDB: TLS port accessible ‚úì
  Dragonfly: TLS port accessible ‚úì
  Valkey: TLS port accessible ‚úì

Predis TLS testing will be attempted for: Redis, KeyDB, Dragonfly, Valkey
============================================================
Testing Redis with Predis...
  Configuration: IO Threads: 1
  Running 13 iterations for Redis (non-TLS-Predis)...
  Initial keys in database: 395472
  Flushing database before test...
  Database flushed in 216.45ms. Keys remaining: 0
    Iteration 1/13... 13994 ops/sec, 0.071ms latency
    Iteration 2/13... 14948 ops/sec, 0.066ms latency
    Iteration 3/13... 15205 ops/sec, 0.065ms latency
    Iteration 4/13... 15413 ops/sec, 0.064ms latency
    Iteration 5/13... 15368 ops/sec, 0.065ms latency
    Iteration 6/13... 15401 ops/sec, 0.064ms latency
    Iteration 7/13... 15301 ops/sec, 0.065ms latency
    Iteration 8/13... 15415 ops/sec, 0.064ms latency
    Iteration 9/13... 15229 ops/sec, 0.065ms latency
    Iteration 10/13... 15340 ops/sec, 0.065ms latency
    Iteration 11/13... 15325 ops/sec, 0.065ms latency
    Iteration 12/13... 15360 ops/sec, 0.065ms latency
    Iteration 13/13... 15282 ops/sec, 0.065ms latency
  Redis (non-TLS-Predis): 15198.43¬±382.61 ops/sec (CV: 2.5%), 0.065¬±0.002ms latency, Quality: good
  Final keys in database: 61511
üîê Attempting TLS connection to Unknown at 127.0.0.1:6390 (Predis)
  Using custom port scheme: Redis=6390, KeyDB=6391, Dragonfly=6392, Valkey=6393
  Note: Predis uses 'tls' scheme and 'ssl' context array
  üì° Method 1: Predis 'tls' scheme with SSL context...
  üß™ Testing TLS connection with SET/GET commands...
  ‚úÖ TLS connection successful with Predis 'tls' scheme
  Running 13 iterations for Redis (TLS-Predis)...
  Initial keys in database: 395116
  Flushing database before test...
  Database flushed in 199.97ms. Keys remaining: 0
    Iteration 1/13... 9874 ops/sec, 0.101ms latency
    Iteration 2/13... 10541 ops/sec, 0.094ms latency
    Iteration 3/13... 10805 ops/sec, 0.092ms latency
    Iteration 4/13... 10749 ops/sec, 0.092ms latency
    Iteration 5/13... 10801 ops/sec, 0.092ms latency
    Iteration 6/13... 10767 ops/sec, 0.092ms latency
    Iteration 7/13... 10956 ops/sec, 0.091ms latency
    Iteration 8/13... 11006 ops/sec, 0.090ms latency
    Iteration 9/13... 10899 ops/sec, 0.091ms latency
    Iteration 10/13... 10856 ops/sec, 0.092ms latency
    Iteration 11/13... 10878 ops/sec, 0.091ms latency
    Iteration 12/13... 10981 ops/sec, 0.091ms latency
    Iteration 13/13... 11040 ops/sec, 0.090ms latency
  Redis (TLS-Predis): 10781.14¬±302.68 ops/sec (CV: 2.8%), 0.092¬±0.003ms latency, Quality: good
  Final keys in database: 61473

Testing KeyDB with Predis...
  Configuration: Server Threads: 1
  Running 13 iterations for KeyDB (non-TLS-Predis)...
  Initial keys in database: 394069
  Flushing database before test...
  Database flushed in 218.30ms. Keys remaining: 0
    Iteration 1/13... 11698 ops/sec, 0.085ms latency
    Iteration 2/13... 12484 ops/sec, 0.080ms latency
    Iteration 3/13... 12839 ops/sec, 0.077ms latency
    Iteration 4/13... 12882 ops/sec, 0.077ms latency
    Iteration 5/13... 12919 ops/sec, 0.077ms latency
    Iteration 6/13... 12962 ops/sec, 0.077ms latency
    Iteration 7/13... 12990 ops/sec, 0.076ms latency
    Iteration 8/13... 12960 ops/sec, 0.077ms latency
    Iteration 9/13... 12895 ops/sec, 0.077ms latency
    Iteration 10/13... 12979 ops/sec, 0.077ms latency
    Iteration 11/13... 13043 ops/sec, 0.076ms latency
    Iteration 12/13... 13055 ops/sec, 0.076ms latency
    Iteration 13/13... 13019 ops/sec, 0.076ms latency
  KeyDB (non-TLS-Predis): 12825.05¬±368.53 ops/sec (CV: 2.9%), 0.078¬±0.002ms latency, Quality: good
  Final keys in database: 61502
üîê Attempting TLS connection to Unknown at 127.0.0.1:6391 (Predis)
  Using custom port scheme: Redis=6390, KeyDB=6391, Dragonfly=6392, Valkey=6393
  Note: Predis uses 'tls' scheme and 'ssl' context array
  üì° Method 1: Predis 'tls' scheme with SSL context...
  üß™ Testing TLS connection with SET/GET commands...
  ‚úÖ TLS connection successful with Predis 'tls' scheme
  Running 13 iterations for KeyDB (TLS-Predis)...
  Initial keys in database: 393882
  Flushing database before test...
  Database flushed in 216.61ms. Keys remaining: 0
    Iteration 1/13... 8872 ops/sec, 0.112ms latency
    Iteration 2/13... 9394 ops/sec, 0.106ms latency
    Iteration 3/13... 9678 ops/sec, 0.103ms latency
    Iteration 4/13... 9781 ops/sec, 0.102ms latency
    Iteration 5/13... 9810 ops/sec, 0.101ms latency
    Iteration 6/13... 9805 ops/sec, 0.101ms latency
    Iteration 7/13... 9892 ops/sec, 0.101ms latency
    Iteration 8/13... 9853 ops/sec, 0.101ms latency
    Iteration 9/13... 9893 ops/sec, 0.101ms latency
    Iteration 10/13... 9905 ops/sec, 0.100ms latency
    Iteration 11/13... 9871 ops/sec, 0.101ms latency
    Iteration 12/13... 9839 ops/sec, 0.101ms latency
    Iteration 13/13... 9877 ops/sec, 0.101ms latency
  KeyDB (TLS-Predis): 9728.39¬±291.26 ops/sec (CV: 3.0%), 0.102¬±0.003ms latency, Quality: good
  Final keys in database: 61457

Testing Dragonfly with Predis...
  Configuration: Proactor Threads: 1
  Running 13 iterations for Dragonfly (non-TLS-Predis)...
  Initial keys in database: 389603
  Flushing database before test...
  Database flushed in 20.68ms. Keys remaining: 0
    Iteration 1/13... 10518 ops/sec, 0.095ms latency
    Iteration 2/13... 11247 ops/sec, 0.088ms latency
    Iteration 3/13... 11386 ops/sec, 0.087ms latency
    Iteration 4/13... 11457 ops/sec, 0.087ms latency
    Iteration 5/13... 11452 ops/sec, 0.087ms latency
    Iteration 6/13... 11525 ops/sec, 0.086ms latency
    Iteration 7/13... 11595 ops/sec, 0.086ms latency
    Iteration 8/13... 11577 ops/sec, 0.086ms latency
    Iteration 9/13... 11505 ops/sec, 0.086ms latency
    Iteration 10/13... 11363 ops/sec, 0.087ms latency
    Iteration 11/13... 11385 ops/sec, 0.087ms latency
    Iteration 12/13... 11364 ops/sec, 0.087ms latency
    Iteration 13/13... 11489 ops/sec, 0.087ms latency
  Dragonfly (non-TLS-Predis): 11374.00¬±274.78 ops/sec (CV: 2.4%), 0.087¬±0.002ms latency, Quality: good
  Final keys in database: 61338
üîê Attempting TLS connection to Unknown at 127.0.0.1:6392 (Predis)
  Using custom port scheme: Redis=6390, KeyDB=6391, Dragonfly=6392, Valkey=6393
  Note: Predis uses 'tls' scheme and 'ssl' context array
  üì° Method 1: Predis 'tls' scheme with SSL context...
  üß™ Testing TLS connection with SET/GET commands...
PHP Warning:  fgets(): SSL operation failed with code 1. OpenSSL Error messages:
error:0A00045C:SSL routines::tlsv13 alert certificate required in /home/runner/work/redis-comparison-benchmarks/redis-comparison-benchmarks/tests/php/vendor/predis/predis/src/Connection/StreamConnection.php on line 313
  ‚ùå Predis 'tls' scheme failed: Error while reading line from the server. [tls://127.0.0.1:6392]
  üì° Method 2: Predis 'rediss' URI scheme...
PHP Warning:  fgets(): SSL operation failed with code 1. OpenSSL Error messages:
error:0A00045C:SSL routines::tlsv13 alert certificate required in /home/runner/work/redis-comparison-benchmarks/redis-comparison-benchmarks/tests/php/vendor/predis/predis/src/Connection/StreamConnection.php on line 313
  ‚ùå Predis 'rediss' URI failed: Error while reading line from the server. [rediss://127.0.0.1:6392]
  üì° Method 3: Predis TLS with localhost hostname...
PHP Warning:  fgets(): SSL operation failed with code 1. OpenSSL Error messages:
error:0A00045C:SSL routines::tlsv13 alert certificate required in /home/runner/work/redis-comparison-benchmarks/redis-comparison-benchmarks/tests/php/vendor/predis/predis/src/Connection/StreamConnection.php on line 313
  ‚ùå Predis localhost TLS failed: Error while reading line from the server. [tls://localhost:6392]
  ‚ùå All Predis TLS connection methods failed for Unknown at port 6392
  üìã Note: TLS connection failed likely due to server certificate configuration
  üîÑ With recent Docker config changes, TLS should now work properly
  üö´ Bypassing TLS test for Unknown to allow testing to continue
  ‚úÖ Non-TLS results remain valid and reliable for performance comparison
  ‚Üí TLS test skipped for Dragonfly due to Predis connection failure

Testing Valkey with Predis...
  Configuration: IO Threads: 1
  Running 13 iterations for Valkey (non-TLS-Predis)...
  Initial keys in database: 391771
  Flushing database before test...
  Database flushed in 0.09ms. Keys remaining: 0
    Iteration 1/13... 13963 ops/sec, 0.071ms latency
    Iteration 2/13... 15085 ops/sec, 0.066ms latency
    Iteration 3/13... 15074 ops/sec, 0.066ms latency
    Iteration 4/13... 15418 ops/sec, 0.064ms latency
    Iteration 5/13... 15299 ops/sec, 0.065ms latency
    Iteration 6/13... 15492 ops/sec, 0.064ms latency
    Iteration 7/13... 15372 ops/sec, 0.065ms latency
    Iteration 8/13... 15204 ops/sec, 0.065ms latency
    Iteration 9/13... 15347 ops/sec, 0.065ms latency
    Iteration 10/13... 15464 ops/sec, 0.064ms latency
    Iteration 11/13... 15431 ops/sec, 0.064ms latency
    Iteration 12/13... 15443 ops/sec, 0.064ms latency
    Iteration 13/13... 15513 ops/sec, 0.064ms latency
  Valkey (non-TLS-Predis): 15238.84¬±409.66 ops/sec (CV: 2.7%), 0.065¬±0.002ms latency, Quality: good
  Final keys in database: 61508
üîê Attempting TLS connection to Unknown at 127.0.0.1:6393 (Predis)
  Using custom port scheme: Redis=6390, KeyDB=6391, Dragonfly=6392, Valkey=6393
  Note: Predis uses 'tls' scheme and 'ssl' context array
  üì° Method 1: Predis 'tls' scheme with SSL context...
  üß™ Testing TLS connection with SET/GET commands...
  ‚úÖ TLS connection successful with Predis 'tls' scheme
  Running 13 iterations for Valkey (TLS-Predis)...
  Initial keys in database: 390870
  Flushing database before test...
  Database flushed in 0.16ms. Keys remaining: 0
    Iteration 1/13... 9953 ops/sec, 0.100ms latency
    Iteration 2/13... 10512 ops/sec, 0.095ms latency
    Iteration 3/13... 10767 ops/sec, 0.092ms latency
    Iteration 4/13... 10882 ops/sec, 0.091ms latency
    Iteration 5/13... 10946 ops/sec, 0.091ms latency
    Iteration 6/13... 11094 ops/sec, 0.090ms latency
    Iteration 7/13... 11112 ops/sec, 0.089ms latency
    Iteration 8/13... 11079 ops/sec, 0.090ms latency
    Iteration 9/13... 11124 ops/sec, 0.089ms latency
    Iteration 10/13... 11065 ops/sec, 0.090ms latency
    Iteration 11/13... 11063 ops/sec, 0.090ms latency
    Iteration 12/13... 11020 ops/sec, 0.090ms latency
    Iteration 13/13... 11044 ops/sec, 0.090ms latency
  Valkey (TLS-Predis): 10897.10¬±331.86 ops/sec (CV: 3.0%), 0.091¬±0.003ms latency, Quality: good
  Final keys in database: 61469

Enhanced Predis results saved:
  CSV: ./benchmarklogs-1t/wordpress_object_cache_test_predis_predis.csv
  JSON: ./benchmarklogs-1t/wordpress_object_cache_test_predis_predis.json
  Markdown: ./benchmarklogs-1t/wordpress_object_cache_test_predis_predis.md
  Raw Data: ./benchmarklogs-1t/wordpress_object_cache_test_predis_predis_raw.json
============================================================
Enhanced Predis test suite completed!
Total execution time: 2,779.95 seconds
Total tests run: 7
Statistical iterations per test: 13
Results saved to ./benchmarklogs-1t/
Redis implementation: Predis (pure PHP)

====================================================================================================
ENHANCED STATISTICAL PERFORMANCE SUMMARY (Predis)
Thread Variant: 1 | Iterations per test: 13
====================================================================================================
Rank Database                       Ops/sec   ¬±StdDev      CV%  Latency  Quality     95% CI     Reliable
----------------------------------------------------------------------------------------------------
#1  Valkey (Predis)              15239      410    2.7%  0.065ms üü°good    15,012-15,466      ‚úÖ
#2  Redis (Predis)               15198      383    2.5%  0.065ms üü°good    14,986-15,411      ‚úÖ
#3  KeyDB (Predis)               12825      369    2.9%  0.078ms üü°good    12,621-13,029      ‚úÖ
#4  Dragonfly (Predis)           11374      275    2.4%  0.087ms üü°good    11,222-11,526      ‚úÖ
#5  Valkey (TLS-Predis)          10897      332    3.0%  0.091ms üü°good    10,713-11,081      ‚úÖ
#6  Redis (TLS-Predis)           10781      303    2.8%  0.092ms üü°good    10,613-10,949      ‚úÖ
#7  KeyDB (TLS-Predis)            9728      291    3.0%  0.102ms üü°good     9,567-9,890      ‚úÖ
====================================================================================================
Implementation: Predis (Pure PHP Redis Client)
üìà Compare with phpredis results to see implementation trade-offs

============================================================
TLS vs NON-TLS PERFORMANCE COMPARISON (Predis)
Thread Variant: 1
============================================================
Redis      | Non-TLS:    15198¬±383  | TLS:    10781¬±303  | Impact: +29.1% *
KeyDB      | Non-TLS:    12825¬±369  | TLS:     9728¬±291  | Impact: +24.1% *
Dragonfly  | Non-TLS:    11374¬±275  | TLS:   FAILED | Impact: N/A
Valkey     | Non-TLS:    15239¬±410  | TLS:    10897¬±332  | Impact: +28.5% *
------------------------------------------------------------
* = Statistically significant difference (95% confidence)
Implementation: Predis (Pure PHP)
============================================================

================================================================================
STATISTICAL INSIGHTS (Predis)
Thread Variant: 1 | Iterations: 13
================================================================================
Measurement Quality Distribution:
  üü° Good      :  7 tests (100.0%)

Coefficient of Variation Analysis:
  Average CV: 2.8% (lower is better)
  Range: 2.4% - 3.0%
  üìä Good measurement consistency with Predis

Predis Implementation Notes:
  üì° Connection management: Automatic (no manual close required)
  üîí TLS handling: Enhanced SSL context support
  üîÑ Error recovery: Built-in retry logic with exponential backoff
  üìä Performance characteristics: Pure PHP (higher latency, more consistent)
================================================================================

================================================================================
PREDIS-SPECIFIC INSIGHTS
Thread Variant: 1 | Implementation: Predis (Pure PHP)
================================================================================
TLS Connection Reliability:
  ‚úÖ Predis TLS connections: 3/4 databases
  üìä All TLS connections established successfully
  üîí SSL context handling: Reliable (Predis manages SSL internally)

Predis Configuration Analysis:
  üîó Connection timeout: 5s
  üì° Read/write timeout: 5s
  üîÑ Connection retry attempts: 3
  ‚ö° TCP keepalive: Enabled
  üîó Persistent connections: Disabled

Performance Characteristics:
  üìà Average non-TLS performance: 13,659 ops/sec
  üîí Average TLS performance: 10,469 ops/sec
  üìä TLS overhead: 23.4%
  ‚ÑπÔ∏è  Note: 25-40% TLS overhead is normal for Redis over SSL

Predis Advantages:
  ‚úÖ Better TLS reliability compared to phpredis extension
  ‚úÖ Enhanced SSL context handling
  ‚úÖ No extension compilation dependencies
  ‚úÖ Consistent behavior across PHP versions
  ‚ö†Ô∏è  Trade-off: Lower raw performance due to pure PHP implementation
================================================================================

======================================================================
‚úÖ Predis WordPress Object Cache test completed successfully!
üìÅ Results saved to: ./benchmarklogs-1t
üìä Implementation: Predis (Pure PHP Redis Client)
üîí TLS Support: Enhanced reliability compared to phpredis

üìÑ Generated files:
  php_wordpress_test_phpredis.log (35KB)
  php_wordpress_test_predis.log (17KB)
  wordpress_object_cache_test_predis_predis.csv (1.6KB)
  wordpress_object_cache_test_predis_predis.json (87.3KB)
  wordpress_object_cache_test_predis_predis.md (2.6KB)
  wordpress_object_cache_test_predis_predis_raw.json (76.4KB)
