WordPress Object Cache Test with Predis - Configured Runner
============================================================
Implementation: Predis (Pure PHP Redis Client)
Enhanced TLS Support: Yes
Statistical Analysis: 13 iterations with confidence intervals

üìã Loading configuration from: tests/php/test_config_predis.php
‚úÖ Configuration loaded successfully

üìä Test Configuration:
  Implementation: Predis (Pure PHP)
  Duration per iteration: 30s
  Test iterations: 13
  Output directory: ./benchmarklogs-1t
  TLS testing: Enabled
  Flush before test: Yes
  Thread variant: 1
  Connection timeout: 5s
  Read/write timeout: 5s
  Connection retries: 3
  Persistent connections: No
  Thread configuration:
    redis_io_threads: 1 threads
    keydb_server_threads: 1 threads
    dragonfly_proactor_threads: 1 threads
    valkey_io_threads: 1 threads
  Database configurations:
    Redis: 127.0.0.1:6379 (TLS: 6390) (IO threads: 1)
    KeyDB: 127.0.0.1:6380 (TLS: 6391) (Server threads: 1)
    Dragonfly: 127.0.0.1:6381 (TLS: 6392) (Proactor threads: 1)
    Valkey: 127.0.0.1:6382 (TLS: 6393) (IO threads: 1)

======================================================================

üîç Checking Predis availability...
‚úÖ Predis library available

üöÄ Starting Predis WordPress Object Cache Test...

Starting WordPress Object Cache Test (Predis)...
Timestamp: 2025-06-10 06:47:16 UTC
Predis Version: unknown
PHP Version: 8.4.8
Enhanced Testing Configuration (Predis):
- Iterations per test: 13
- Iteration pause: 500ms
- Statistical analysis: Enabled
- Raw data logging: Enabled
- Connection timeout: 5s
- Read/write timeout: 5s
- Connection retry attempts: 3
- Persistent connections: Disabled
- TCP keepalive: Enabled
Thread Variant: 1
Thread Configuration:
  redis_io_threads: 1 threads
  keydb_server_threads: 1 threads
  dragonfly_proactor_threads: 1 threads
  valkey_io_threads: 1 threads
TLS Certificates: Found and validated (Predis-compatible)

Checking TLS readiness (Predis)...
  Redis: TLS port accessible ‚úì
  KeyDB: TLS port accessible ‚úì
  Dragonfly: TLS port accessible ‚úì
  Valkey: TLS port accessible ‚úì

Predis TLS testing will be attempted for: Redis, KeyDB, Dragonfly, Valkey
============================================================
Testing Redis with Predis...
  Configuration: IO Threads: 1
  Running 13 iterations for Redis (non-TLS-Predis)...
  Initial keys in database: 394067
  Flushing database before test...
  Database flushed in 213.00ms. Keys remaining: 0
    Iteration 1/13... 13510 ops/sec, 0.074ms latency
    Iteration 2/13... 14428 ops/sec, 0.069ms latency
    Iteration 3/13... 14469 ops/sec, 0.069ms latency
    Iteration 4/13... 14635 ops/sec, 0.068ms latency
    Iteration 5/13... 14836 ops/sec, 0.067ms latency
    Iteration 6/13... 14604 ops/sec, 0.068ms latency
    Iteration 7/13... 14729 ops/sec, 0.067ms latency
    Iteration 8/13... 14723 ops/sec, 0.067ms latency
    Iteration 9/13... 14739 ops/sec, 0.067ms latency
    Iteration 10/13... 14469 ops/sec, 0.069ms latency
    Iteration 11/13... 14743 ops/sec, 0.067ms latency
    Iteration 12/13... 14801 ops/sec, 0.067ms latency
    Iteration 13/13... 14528 ops/sec, 0.068ms latency
  Redis (non-TLS-Predis): 14554.98¬±341.65 ops/sec (CV: 2.3%), 0.068¬±0.002ms latency, Quality: good
  Final keys in database: 61505
üîê Attempting TLS connection to Redis at 127.0.0.1:6390 (Predis)
  Using custom port scheme: Redis=6390, KeyDB=6391, Dragonfly=6392, Valkey=6393
  Note: Predis uses 'tls' scheme and 'ssl' context array
  üì° Method 1: Predis 'tls' scheme with SSL context...
  üß™ Testing TLS connection with SET/GET commands...
  ‚úÖ TLS connection successful with Predis 'tls' scheme
  Running 13 iterations for Redis (TLS-Predis)...
  Initial keys in database: 394807
  Flushing database before test...
  Database flushed in 215.21ms. Keys remaining: 0
    Iteration 1/13... 9711 ops/sec, 0.102ms latency
    Iteration 2/13... 10358 ops/sec, 0.096ms latency
    Iteration 3/13... 10511 ops/sec, 0.095ms latency
    Iteration 4/13... 10649 ops/sec, 0.093ms latency
    Iteration 5/13... 10528 ops/sec, 0.094ms latency
    Iteration 6/13... 10605 ops/sec, 0.094ms latency
    Iteration 7/13... 10558 ops/sec, 0.094ms latency
    Iteration 8/13... 10658 ops/sec, 0.093ms latency
    Iteration 9/13... 10640 ops/sec, 0.093ms latency
    Iteration 10/13... 10594 ops/sec, 0.094ms latency
    Iteration 11/13... 10591 ops/sec, 0.094ms latency
    Iteration 12/13... 10653 ops/sec, 0.093ms latency
    Iteration 13/13... 10584 ops/sec, 0.094ms latency
  Redis (TLS-Predis): 10510.72¬±253.57 ops/sec (CV: 2.4%), 0.095¬±0.002ms latency, Quality: good
  Final keys in database: 61474

Testing KeyDB with Predis...
  Configuration: Server Threads: 1
  Running 13 iterations for KeyDB (non-TLS-Predis)...
  Initial keys in database: 393306
  Flushing database before test...
  Database flushed in 235.97ms. Keys remaining: 0
    Iteration 1/13... 11379 ops/sec, 0.087ms latency
    Iteration 2/13... 12117 ops/sec, 0.082ms latency
    Iteration 3/13... 12407 ops/sec, 0.080ms latency
    Iteration 4/13... 12537 ops/sec, 0.079ms latency
    Iteration 5/13... 12570 ops/sec, 0.079ms latency
    Iteration 6/13... 12620 ops/sec, 0.079ms latency
    Iteration 7/13... 12717 ops/sec, 0.078ms latency
    Iteration 8/13... 12733 ops/sec, 0.078ms latency
    Iteration 9/13... 12713 ops/sec, 0.078ms latency
    Iteration 10/13... 12732 ops/sec, 0.078ms latency
    Iteration 11/13... 12627 ops/sec, 0.079ms latency
    Iteration 12/13... 12672 ops/sec, 0.078ms latency
    Iteration 13/13... 12655 ops/sec, 0.078ms latency
  KeyDB (non-TLS-Predis): 12498.41¬±376.66 ops/sec (CV: 3.0%), 0.080¬±0.003ms latency, Quality: good
  Final keys in database: 61489
üîê Attempting TLS connection to KeyDB at 127.0.0.1:6391 (Predis)
  Using custom port scheme: Redis=6390, KeyDB=6391, Dragonfly=6392, Valkey=6393
  Note: Predis uses 'tls' scheme and 'ssl' context array
  üì° Method 1: Predis 'tls' scheme with SSL context...
  üß™ Testing TLS connection with SET/GET commands...
  ‚úÖ TLS connection successful with Predis 'tls' scheme
  Running 13 iterations for KeyDB (TLS-Predis)...
  Initial keys in database: 393273
  Flushing database before test...
  Database flushed in 222.03ms. Keys remaining: 0
    Iteration 1/13... 8671 ops/sec, 0.115ms latency
    Iteration 2/13... 9190 ops/sec, 0.108ms latency
    Iteration 3/13... 9401 ops/sec, 0.106ms latency
    Iteration 4/13... 9429 ops/sec, 0.105ms latency
    Iteration 5/13... 9497 ops/sec, 0.105ms latency
    Iteration 6/13... 9611 ops/sec, 0.103ms latency
    Iteration 7/13... 9607 ops/sec, 0.104ms latency
    Iteration 8/13... 9644 ops/sec, 0.103ms latency
    Iteration 9/13... 9640 ops/sec, 0.103ms latency
    Iteration 10/13... 9653 ops/sec, 0.103ms latency
    Iteration 11/13... 9689 ops/sec, 0.103ms latency
    Iteration 12/13... 9637 ops/sec, 0.103ms latency
    Iteration 13/13... 9699 ops/sec, 0.103ms latency
  KeyDB (TLS-Predis): 9489.99¬±285.49 ops/sec (CV: 3.0%), 0.105¬±0.003ms latency, Quality: good
  Final keys in database: 61445

Testing Dragonfly with Predis...
  Configuration: Proactor Threads: 1
  Running 13 iterations for Dragonfly (non-TLS-Predis)...
  Initial keys in database: 389818
  Flushing database before test...
  Database flushed in 23.33ms. Keys remaining: 0
    Iteration 1/13... 9818 ops/sec, 0.101ms latency
    Iteration 2/13... 10433 ops/sec, 0.095ms latency
    Iteration 3/13... 10504 ops/sec, 0.095ms latency
    Iteration 4/13... 10663 ops/sec, 0.093ms latency
    Iteration 5/13... 10523 ops/sec, 0.094ms latency
    Iteration 6/13... 10655 ops/sec, 0.093ms latency
    Iteration 7/13... 10568 ops/sec, 0.094ms latency
    Iteration 8/13... 10627 ops/sec, 0.094ms latency
    Iteration 9/13... 10652 ops/sec, 0.093ms latency
    Iteration 10/13... 10670 ops/sec, 0.093ms latency
    Iteration 11/13... 10531 ops/sec, 0.094ms latency
    Iteration 12/13... 10524 ops/sec, 0.094ms latency
    Iteration 13/13... 10593 ops/sec, 0.094ms latency
  Dragonfly (non-TLS-Predis): 10520.10¬±223.25 ops/sec (CV: 2.1%), 0.095¬±0.002ms latency, Quality: good
  Final keys in database: 61324
üîê Attempting TLS connection to Dragonfly at 127.0.0.1:6392 (Predis)
  Using custom port scheme: Redis=6390, KeyDB=6391, Dragonfly=6392, Valkey=6393
  Note: Predis uses 'tls' scheme and 'ssl' context array
  üì° Method 1: Predis 'tls' scheme with SSL context...
  üîê Adding Dragonfly authentication to connection parameters...
  üß™ Testing TLS connection with SET/GET commands...
  ‚úÖ TLS connection successful with Predis 'tls' scheme
  Running 13 iterations for Dragonfly (TLS-Predis)...
  Initial keys in database: 391019
  Flushing database before test...
  Database flushed in 38.70ms. Keys remaining: 0
    Iteration 1/13... 9815 ops/sec, 0.101ms latency
    Iteration 2/13... 10293 ops/sec, 0.097ms latency
    Iteration 3/13... 10654 ops/sec, 0.093ms latency
    Iteration 4/13... 10665 ops/sec, 0.093ms latency
    Iteration 5/13... 10720 ops/sec, 0.093ms latency
    Iteration 6/13... 10436 ops/sec, 0.095ms latency
    Iteration 7/13... 10936 ops/sec, 0.091ms latency
    Iteration 8/13... 10644 ops/sec, 0.093ms latency
    Iteration 9/13... 10256 ops/sec, 0.097ms latency
    Iteration 10/13... 10801 ops/sec, 0.092ms latency
    Iteration 11/13... 10494 ops/sec, 0.095ms latency
    Iteration 12/13... 10721 ops/sec, 0.093ms latency
    Iteration 13/13... 10418 ops/sec, 0.095ms latency
  Dragonfly (TLS-Predis): 10527.14¬±291.91 ops/sec (CV: 2.8%), 0.095¬±0.003ms latency, Quality: good
  Final keys in database: 61444

Testing Valkey with Predis...
  Configuration: IO Threads: 1
  Running 13 iterations for Valkey (non-TLS-Predis)...
  Initial keys in database: 390794
  Flushing database before test...
  Database flushed in 0.25ms. Keys remaining: 0
    Iteration 1/13... 13537 ops/sec, 0.073ms latency
    Iteration 2/13... 14503 ops/sec, 0.068ms latency
    Iteration 3/13... 14643 ops/sec, 0.068ms latency
    Iteration 4/13... 14630 ops/sec, 0.068ms latency
    Iteration 5/13... 14711 ops/sec, 0.067ms latency
    Iteration 6/13... 15015 ops/sec, 0.066ms latency
    Iteration 7/13... 14691 ops/sec, 0.068ms latency
    Iteration 8/13... 14882 ops/sec, 0.067ms latency
    Iteration 9/13... 14780 ops/sec, 0.067ms latency
    Iteration 10/13... 14691 ops/sec, 0.068ms latency
    Iteration 11/13... 14868 ops/sec, 0.067ms latency
    Iteration 12/13... 14890 ops/sec, 0.067ms latency
    Iteration 13/13... 14586 ops/sec, 0.068ms latency
  Valkey (non-TLS-Predis): 14648.21¬±363.11 ops/sec (CV: 2.5%), 0.068¬±0.002ms latency, Quality: good
  Final keys in database: 61506
üîê Attempting TLS connection to Valkey at 127.0.0.1:6393 (Predis)
  Using custom port scheme: Redis=6390, KeyDB=6391, Dragonfly=6392, Valkey=6393
  Note: Predis uses 'tls' scheme and 'ssl' context array
  üì° Method 1: Predis 'tls' scheme with SSL context...
  üß™ Testing TLS connection with SET/GET commands...
  ‚úÖ TLS connection successful with Predis 'tls' scheme
  Running 13 iterations for Valkey (TLS-Predis)...
  Initial keys in database: 389442
  Flushing database before test...
  Database flushed in 0.17ms. Keys remaining: 0
    Iteration 1/13... 9661 ops/sec, 0.103ms latency
    Iteration 2/13... 10194 ops/sec, 0.098ms latency
    Iteration 3/13... 10460 ops/sec, 0.095ms latency
    Iteration 4/13... 10428 ops/sec, 0.095ms latency
    Iteration 5/13... 10532 ops/sec, 0.094ms latency
    Iteration 6/13... 10549 ops/sec, 0.094ms latency
    Iteration 7/13... 10482 ops/sec, 0.095ms latency
    Iteration 8/13... 10456 ops/sec, 0.095ms latency
    Iteration 9/13... 10532 ops/sec, 0.094ms latency
    Iteration 10/13... 10670 ops/sec, 0.093ms latency
    Iteration 11/13... 10430 ops/sec, 0.095ms latency
    Iteration 12/13... 10587 ops/sec, 0.094ms latency
    Iteration 13/13... 10513 ops/sec, 0.095ms latency
  Valkey (TLS-Predis): 10422.71¬±254.09 ops/sec (CV: 2.4%), 0.095¬±0.002ms latency, Quality: good
  Final keys in database: 61472

Enhanced Predis results saved:
  CSV: ./benchmarklogs-1t/wordpress_object_cache_test_predis_predis.csv
  JSON: ./benchmarklogs-1t/wordpress_object_cache_test_predis_predis.json
  Markdown: ./benchmarklogs-1t/wordpress_object_cache_test_predis_predis.md
  Raw Data: ./benchmarklogs-1t/wordpress_object_cache_test_predis_predis_raw.json
============================================================
Enhanced Predis test suite completed!
Total execution time: 3,176.42 seconds
Total tests run: 8
Statistical iterations per test: 13
Results saved to ./benchmarklogs-1t/
Redis implementation: Predis (pure PHP)

====================================================================================================
ENHANCED STATISTICAL PERFORMANCE SUMMARY (Predis)
Thread Variant: 1 | Iterations per test: 13
====================================================================================================
Rank Database                       Ops/sec   ¬±StdDev      CV%  Latency  Quality     95% CI     Reliable
----------------------------------------------------------------------------------------------------
#1  Valkey (Predis)              14648      363    2.5%  0.068ms üü°good    14,447-14,850      ‚úÖ
#2  Redis (Predis)               14555      342    2.3%  0.068ms üü°good    14,365-14,744      ‚úÖ
#3  KeyDB (Predis)               12498      377    3.0%  0.080ms üü°good    12,289-12,707      ‚úÖ
#4  Dragonfly (TLS-Predis)       10527      292    2.8%  0.095ms üü°good    10,365-10,689      ‚úÖ
#5  Dragonfly (Predis)           10520      223    2.1%  0.095ms üü°good    10,396-10,644      ‚úÖ
#6  Redis (TLS-Predis)           10511      254    2.4%  0.095ms üü°good    10,370-10,651      ‚úÖ
#7  Valkey (TLS-Predis)          10423      254    2.4%  0.095ms üü°good    10,282-10,564      ‚úÖ
#8  KeyDB (TLS-Predis)            9490      285    3.0%  0.105ms üü°good     9,332-9,648      ‚úÖ
====================================================================================================
Implementation: Predis (Pure PHP Redis Client)
üìà Compare with phpredis results to see implementation trade-offs

============================================================
TLS vs NON-TLS PERFORMANCE COMPARISON (Predis)
Thread Variant: 1
============================================================
Redis      | Non-TLS:    14555¬±342  | TLS:    10511¬±254  | Impact: +27.8% *
KeyDB      | Non-TLS:    12498¬±377  | TLS:     9490¬±285  | Impact: +24.1% *
Dragonfly  | Non-TLS:    10520¬±223  | TLS:    10527¬±292  | Impact:  -0.1%
Valkey     | Non-TLS:    14648¬±363  | TLS:    10423¬±254  | Impact: +28.8% *
------------------------------------------------------------
* = Statistically significant difference (95% confidence)
Implementation: Predis (Pure PHP)
============================================================

================================================================================
STATISTICAL INSIGHTS (Predis)
Thread Variant: 1 | Iterations: 13
================================================================================
Measurement Quality Distribution:
  üü° Good      :  8 tests (100.0%)

Coefficient of Variation Analysis:
  Average CV: 2.6% (lower is better)
  Range: 2.1% - 3.0%
  üìä Good measurement consistency with Predis

Predis Implementation Notes:
  üì° Connection management: Automatic (no manual close required)
  üîí TLS handling: Enhanced SSL context support
  üîÑ Error recovery: Built-in retry logic with exponential backoff
  üìä Performance characteristics: Pure PHP (higher latency, more consistent)
================================================================================

================================================================================
PREDIS-SPECIFIC INSIGHTS
Thread Variant: 1 | Implementation: Predis (Pure PHP)
================================================================================
TLS Connection Reliability:
  ‚úÖ Predis TLS connections: 4/4 databases
  üìä All TLS connections established successfully
  üîí SSL context handling: Reliable (Predis manages SSL internally)

Predis Configuration Analysis:
  üîó Connection timeout: 5s
  üì° Read/write timeout: 5s
  üîÑ Connection retry attempts: 3
  ‚ö° TCP keepalive: Enabled
  üîó Persistent connections: Disabled

Performance Characteristics:
  üìà Average non-TLS performance: 13,055 ops/sec
  üîí Average TLS performance: 10,238 ops/sec
  üìä TLS overhead: 21.6%
  ‚ÑπÔ∏è  Note: 25-40% TLS overhead is normal for Redis over SSL

Predis Advantages:
  ‚úÖ Better TLS reliability compared to phpredis extension
  ‚úÖ Enhanced SSL context handling
  ‚úÖ No extension compilation dependencies
  ‚úÖ Consistent behavior across PHP versions
  ‚ö†Ô∏è  Trade-off: Lower raw performance due to pure PHP implementation
================================================================================

======================================================================
‚úÖ Predis WordPress Object Cache test completed successfully!
üìÅ Results saved to: ./benchmarklogs-1t
üìä Implementation: Predis (Pure PHP Redis Client)
üîí TLS Support: Enhanced reliability compared to phpredis

üìÑ Generated files:
  php_wordpress_test_phpredis.log (32KB)
  php_wordpress_test_predis.log (16.8KB)
  wordpress_object_cache_test_predis_predis.csv (1.8KB)
  wordpress_object_cache_test_predis_predis.json (99.6KB)
  wordpress_object_cache_test_predis_predis.md (2.7KB)
  wordpress_object_cache_test_predis_predis_raw.json (87.2KB)
