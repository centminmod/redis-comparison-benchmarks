WordPress Object Cache Test with Predis - Configured Runner
============================================================
Implementation: Predis (Pure PHP Redis Client)
Enhanced TLS Support: Yes
Statistical Analysis: 13 iterations with confidence intervals

üìã Loading configuration from: tests/php/test_config_predis.php
‚úÖ Configuration loaded successfully

üìä Test Configuration:
  Implementation: Predis (Pure PHP)
  Duration per iteration: 30s
  Test iterations: 13
  Output directory: ./benchmarklogs-1t
  TLS testing: Enabled
  Flush before test: Yes
  Thread variant: 1
  Connection timeout: 5s
  Read/write timeout: 5s
  Connection retries: 3
  Persistent connections: No
  Thread configuration:
    redis_io_threads: 1 threads
    keydb_server_threads: 1 threads
    dragonfly_proactor_threads: 1 threads
    valkey_io_threads: 1 threads
  Database configurations:
    Redis: 127.0.0.1:6379 (TLS: 6390) (IO threads: 1)
    KeyDB: 127.0.0.1:6380 (TLS: 6391) (Server threads: 1)
    Dragonfly: 127.0.0.1:6381 (TLS: 6392) (Proactor threads: 1)
    Valkey: 127.0.0.1:6382 (TLS: 6393) (IO threads: 1)

======================================================================

üîç Checking Predis availability...
‚úÖ Predis library available

üöÄ Starting Predis WordPress Object Cache Test...

Starting WordPress Object Cache Test (Predis)...
Timestamp: 2025-06-10 03:57:03 UTC
Predis Version: unknown
PHP Version: 8.4.8
Enhanced Testing Configuration (Predis):
- Iterations per test: 13
- Iteration pause: 500ms
- Statistical analysis: Enabled
- Raw data logging: Enabled
- Connection timeout: 5s
- Read/write timeout: 5s
- Connection retry attempts: 3
- Persistent connections: Disabled
- TCP keepalive: Enabled
Thread Variant: 1
Thread Configuration:
  redis_io_threads: 1 threads
  keydb_server_threads: 1 threads
  dragonfly_proactor_threads: 1 threads
  valkey_io_threads: 1 threads
TLS Certificates: Found and validated (Predis-compatible)

Checking TLS readiness (Predis)...
  Redis: TLS port accessible ‚úì
  KeyDB: TLS port accessible ‚úì
  Dragonfly: TLS port accessible ‚úì
  Valkey: TLS port accessible ‚úì

Predis TLS testing will be attempted for: Redis, KeyDB, Dragonfly, Valkey
============================================================
Testing Redis with Predis...
  Configuration: IO Threads: 1
  Running 13 iterations for Redis (non-TLS-Predis)...
  Initial keys in database: 395035
  Flushing database before test...
  Database flushed in 224.82ms. Keys remaining: 0
    Iteration 1/13... 13600 ops/sec, 0.073ms latency
    Iteration 2/13... 14788 ops/sec, 0.067ms latency
    Iteration 3/13... 15109 ops/sec, 0.066ms latency
    Iteration 4/13... 15022 ops/sec, 0.066ms latency
    Iteration 5/13... 15069 ops/sec, 0.066ms latency
    Iteration 6/13... 15033 ops/sec, 0.066ms latency
    Iteration 7/13... 14868 ops/sec, 0.067ms latency
    Iteration 8/13... 15016 ops/sec, 0.066ms latency
    Iteration 9/13... 15084 ops/sec, 0.066ms latency
    Iteration 10/13... 15045 ops/sec, 0.066ms latency
    Iteration 11/13... 15149 ops/sec, 0.066ms latency
    Iteration 12/13... 14909 ops/sec, 0.067ms latency
    Iteration 13/13... 15110 ops/sec, 0.066ms latency
  Redis (non-TLS-Predis): 14907.82¬±406.40 ops/sec (CV: 2.7%), 0.067¬±0.002ms latency, Quality: good
  Final keys in database: 61507
üîê Attempting TLS connection to Redis at 127.0.0.1:6390 (Predis)
  Using custom port scheme: Redis=6390, KeyDB=6391, Dragonfly=6392, Valkey=6393
  Note: Predis uses 'tls' scheme and 'ssl' context array
  üì° Method 1: Predis 'tls' scheme with SSL context...
  üß™ Testing TLS connection with SET/GET commands...
  ‚úÖ TLS connection successful with Predis 'tls' scheme
  Running 13 iterations for Redis (TLS-Predis)...
  Initial keys in database: 394650
  Flushing database before test...
  Database flushed in 220.35ms. Keys remaining: 0
    Iteration 1/13... 9799 ops/sec, 0.102ms latency
    Iteration 2/13... 10363 ops/sec, 0.096ms latency
    Iteration 3/13... 10616 ops/sec, 0.094ms latency
    Iteration 4/13... 10727 ops/sec, 0.093ms latency
    Iteration 5/13... 10798 ops/sec, 0.092ms latency
    Iteration 6/13... 10797 ops/sec, 0.092ms latency
    Iteration 7/13... 10868 ops/sec, 0.091ms latency
    Iteration 8/13... 10893 ops/sec, 0.091ms latency
    Iteration 9/13... 10796 ops/sec, 0.092ms latency
    Iteration 10/13... 10826 ops/sec, 0.092ms latency
    Iteration 11/13... 10779 ops/sec, 0.092ms latency
    Iteration 12/13... 10817 ops/sec, 0.092ms latency
    Iteration 13/13... 10820 ops/sec, 0.092ms latency
  Redis (TLS-Predis): 10684.64¬±299.22 ops/sec (CV: 2.8%), 0.093¬±0.003ms latency, Quality: good
  Final keys in database: 61483

Testing KeyDB with Predis...
  Configuration: Server Threads: 1
  Running 13 iterations for KeyDB (non-TLS-Predis)...
  Initial keys in database: 393886
  Flushing database before test...
  Database flushed in 247.72ms. Keys remaining: 0
    Iteration 1/13... 11553 ops/sec, 0.086ms latency
    Iteration 2/13... 12393 ops/sec, 0.080ms latency
    Iteration 3/13... 12588 ops/sec, 0.079ms latency
    Iteration 4/13... 12757 ops/sec, 0.078ms latency
    Iteration 5/13... 12844 ops/sec, 0.077ms latency
    Iteration 6/13... 12905 ops/sec, 0.077ms latency
    Iteration 7/13... 12821 ops/sec, 0.077ms latency
    Iteration 8/13... 12903 ops/sec, 0.077ms latency
    Iteration 9/13... 12903 ops/sec, 0.077ms latency
    Iteration 10/13... 12739 ops/sec, 0.078ms latency
    Iteration 11/13... 12742 ops/sec, 0.078ms latency
    Iteration 12/13... 12731 ops/sec, 0.078ms latency
    Iteration 13/13... 12791 ops/sec, 0.078ms latency
  KeyDB (non-TLS-Predis): 12666.92¬±363.35 ops/sec (CV: 2.9%), 0.078¬±0.002ms latency, Quality: good
  Final keys in database: 61499
üîê Attempting TLS connection to KeyDB at 127.0.0.1:6391 (Predis)
  Using custom port scheme: Redis=6390, KeyDB=6391, Dragonfly=6392, Valkey=6393
  Note: Predis uses 'tls' scheme and 'ssl' context array
  üì° Method 1: Predis 'tls' scheme with SSL context...
  üß™ Testing TLS connection with SET/GET commands...
  ‚úÖ TLS connection successful with Predis 'tls' scheme
  Running 13 iterations for KeyDB (TLS-Predis)...
  Initial keys in database: 393680
  Flushing database before test...
  Database flushed in 242.41ms. Keys remaining: 0
    Iteration 1/13... 8738 ops/sec, 0.114ms latency
    Iteration 2/13... 9331 ops/sec, 0.107ms latency
    Iteration 3/13... 9536 ops/sec, 0.104ms latency
    Iteration 4/13... 9559 ops/sec, 0.104ms latency
    Iteration 5/13... 9645 ops/sec, 0.103ms latency
    Iteration 6/13... 9648 ops/sec, 0.103ms latency
    Iteration 7/13... 9696 ops/sec, 0.103ms latency
    Iteration 8/13... 9747 ops/sec, 0.102ms latency
    Iteration 9/13... 9769 ops/sec, 0.102ms latency
    Iteration 10/13... 9767 ops/sec, 0.102ms latency
    Iteration 11/13... 9651 ops/sec, 0.103ms latency
    Iteration 12/13... 9670 ops/sec, 0.103ms latency
    Iteration 13/13... 9720 ops/sec, 0.102ms latency
  KeyDB (TLS-Predis): 9575.09¬±277.94 ops/sec (CV: 2.9%), 0.104¬±0.003ms latency, Quality: good
  Final keys in database: 61467

Testing Dragonfly with Predis...
  Configuration: Proactor Threads: 1
  Running 13 iterations for Dragonfly (non-TLS-Predis)...
  Initial keys in database: 389964
  Flushing database before test...
  Database flushed in 20.13ms. Keys remaining: 0
    Iteration 1/13... 9708 ops/sec, 0.102ms latency
    Iteration 2/13... 10374 ops/sec, 0.096ms latency
    Iteration 3/13... 10482 ops/sec, 0.095ms latency
    Iteration 4/13... 10619 ops/sec, 0.094ms latency
    Iteration 5/13... 10781 ops/sec, 0.092ms latency
    Iteration 6/13... 10728 ops/sec, 0.093ms latency
    Iteration 7/13... 10880 ops/sec, 0.091ms latency
    Iteration 8/13... 10831 ops/sec, 0.092ms latency
    Iteration 9/13... 10845 ops/sec, 0.092ms latency
    Iteration 10/13... 10649 ops/sec, 0.093ms latency
    Iteration 11/13... 10669 ops/sec, 0.093ms latency
    Iteration 12/13... 10687 ops/sec, 0.093ms latency
    Iteration 13/13... 10752 ops/sec, 0.092ms latency
  Dragonfly (non-TLS-Predis): 10615.79¬±307.65 ops/sec (CV: 2.9%), 0.094¬±0.003ms latency, Quality: good
  Final keys in database: 61318
üîê Attempting TLS connection to Dragonfly at 127.0.0.1:6392 (Predis)
  Using custom port scheme: Redis=6390, KeyDB=6391, Dragonfly=6392, Valkey=6393
  Note: Predis uses 'tls' scheme and 'ssl' context array
  üì° Method 1: Predis 'tls' scheme with SSL context...
  üîê Adding Dragonfly authentication to connection parameters...
  üß™ Testing TLS connection with SET/GET commands...
  ‚úÖ TLS connection successful with Predis 'tls' scheme
  Running 13 iterations for Dragonfly (TLS-Predis)...
  Initial keys in database: 391202
  Flushing database before test...
  Database flushed in 38.18ms. Keys remaining: 0
    Iteration 1/13... 10096 ops/sec, 0.099ms latency
    Iteration 2/13... 10777 ops/sec, 0.092ms latency
    Iteration 3/13... 10728 ops/sec, 0.093ms latency
    Iteration 4/13... 10907 ops/sec, 0.091ms latency
    Iteration 5/13... 11157 ops/sec, 0.089ms latency
    Iteration 6/13... 11182 ops/sec, 0.089ms latency
    Iteration 7/13... 11104 ops/sec, 0.090ms latency
    Iteration 8/13... 10948 ops/sec, 0.091ms latency
    Iteration 9/13... 10804 ops/sec, 0.092ms latency
    Iteration 10/13... 11128 ops/sec, 0.089ms latency
    Iteration 11/13... 11031 ops/sec, 0.090ms latency
    Iteration 12/13... 11057 ops/sec, 0.090ms latency
    Iteration 13/13... 11064 ops/sec, 0.090ms latency
  Dragonfly (TLS-Predis): 10921.70¬±289.37 ops/sec (CV: 2.6%), 0.091¬±0.003ms latency, Quality: good
  Final keys in database: 61453

Testing Valkey with Predis...
  Configuration: IO Threads: 1
  Running 13 iterations for Valkey (non-TLS-Predis)...
  Initial keys in database: 390615
  Flushing database before test...
  Database flushed in 0.11ms. Keys remaining: 0
    Iteration 1/13... 13753 ops/sec, 0.072ms latency
    Iteration 2/13... 14488 ops/sec, 0.069ms latency
    Iteration 3/13... 15077 ops/sec, 0.066ms latency
    Iteration 4/13... 15044 ops/sec, 0.066ms latency
    Iteration 5/13... 15033 ops/sec, 0.066ms latency
    Iteration 6/13... 15161 ops/sec, 0.065ms latency
    Iteration 7/13... 15251 ops/sec, 0.065ms latency
    Iteration 8/13... 15082 ops/sec, 0.066ms latency
    Iteration 9/13... 15116 ops/sec, 0.066ms latency
    Iteration 10/13... 15002 ops/sec, 0.066ms latency
    Iteration 11/13... 15088 ops/sec, 0.066ms latency
    Iteration 12/13... 14936 ops/sec, 0.066ms latency
    Iteration 13/13... 14996 ops/sec, 0.066ms latency
  Valkey (non-TLS-Predis): 14925.09¬±395.30 ops/sec (CV: 2.6%), 0.067¬±0.002ms latency, Quality: good
  Final keys in database: 61510
üîê Attempting TLS connection to Valkey at 127.0.0.1:6393 (Predis)
  Using custom port scheme: Redis=6390, KeyDB=6391, Dragonfly=6392, Valkey=6393
  Note: Predis uses 'tls' scheme and 'ssl' context array
  üì° Method 1: Predis 'tls' scheme with SSL context...
  üß™ Testing TLS connection with SET/GET commands...
  ‚úÖ TLS connection successful with Predis 'tls' scheme
  Running 13 iterations for Valkey (TLS-Predis)...
  Initial keys in database: 390134
  Flushing database before test...
  Database flushed in 0.14ms. Keys remaining: 0
    Iteration 1/13... 9642 ops/sec, 0.103ms latency
    Iteration 2/13... 10487 ops/sec, 0.095ms latency
    Iteration 3/13... 10586 ops/sec, 0.094ms latency
    Iteration 4/13... 10882 ops/sec, 0.091ms latency
    Iteration 5/13... 10973 ops/sec, 0.091ms latency
    Iteration 6/13... 10871 ops/sec, 0.091ms latency
    Iteration 7/13... 10767 ops/sec, 0.092ms latency
    Iteration 8/13... 10754 ops/sec, 0.092ms latency
    Iteration 9/13... 10468 ops/sec, 0.095ms latency
    Iteration 10/13... 10694 ops/sec, 0.093ms latency
    Iteration 11/13... 10762 ops/sec, 0.092ms latency
    Iteration 12/13... 10721 ops/sec, 0.093ms latency
    Iteration 13/13... 10777 ops/sec, 0.092ms latency
  Valkey (TLS-Predis): 10644.97¬±335.12 ops/sec (CV: 3.1%), 0.093¬±0.003ms latency, Quality: good
  Final keys in database: 61477

Enhanced Predis results saved:
  CSV: ./benchmarklogs-1t/wordpress_object_cache_test_predis_predis.csv
  JSON: ./benchmarklogs-1t/wordpress_object_cache_test_predis_predis.json
  Markdown: ./benchmarklogs-1t/wordpress_object_cache_test_predis_predis.md
  Raw Data: ./benchmarklogs-1t/wordpress_object_cache_test_predis_predis_raw.json
============================================================
Enhanced Predis test suite completed!
Total execution time: 3,176.61 seconds
Total tests run: 8
Statistical iterations per test: 13
Results saved to ./benchmarklogs-1t/
Redis implementation: Predis (pure PHP)

====================================================================================================
ENHANCED STATISTICAL PERFORMANCE SUMMARY (Predis)
Thread Variant: 1 | Iterations per test: 13
====================================================================================================
Rank Database                       Ops/sec   ¬±StdDev      CV%  Latency  Quality     95% CI     Reliable
----------------------------------------------------------------------------------------------------
#1  Valkey (Predis)              14925      395    2.6%  0.067ms üü°good    14,706-15,144      ‚úÖ
#2  Redis (Predis)               14908      406    2.7%  0.067ms üü°good    14,682-15,133      ‚úÖ
#3  KeyDB (Predis)               12667      363    2.9%  0.078ms üü°good    12,465-12,868      ‚úÖ
#4  Dragonfly (TLS-Predis)       10922      289    2.6%  0.091ms üü°good    10,761-11,082      ‚úÖ
#5  Redis (TLS-Predis)           10685      299    2.8%  0.093ms üü°good    10,519-10,851      ‚úÖ
#6  Valkey (TLS-Predis)          10645      335    3.1%  0.093ms üü°good    10,459-10,831      ‚úÖ
#7  Dragonfly (Predis)           10616      308    2.9%  0.094ms üü°good    10,445-10,786      ‚úÖ
#8  KeyDB (TLS-Predis)            9575      278    2.9%  0.104ms üü°good     9,421-9,729      ‚úÖ
====================================================================================================
Implementation: Predis (Pure PHP Redis Client)
üìà Compare with phpredis results to see implementation trade-offs

============================================================
TLS vs NON-TLS PERFORMANCE COMPARISON (Predis)
Thread Variant: 1
============================================================
Redis      | Non-TLS:    14908¬±406  | TLS:    10685¬±299  | Impact: +28.3% *
KeyDB      | Non-TLS:    12667¬±363  | TLS:     9575¬±278  | Impact: +24.4% *
Dragonfly  | Non-TLS:    10616¬±308  | TLS:    10922¬±289  | Impact:  -2.9%
Valkey     | Non-TLS:    14925¬±395  | TLS:    10645¬±335  | Impact: +28.7% *
------------------------------------------------------------
* = Statistically significant difference (95% confidence)
Implementation: Predis (Pure PHP)
============================================================

================================================================================
STATISTICAL INSIGHTS (Predis)
Thread Variant: 1 | Iterations: 13
================================================================================
Measurement Quality Distribution:
  üü° Good      :  8 tests (100.0%)

Coefficient of Variation Analysis:
  Average CV: 2.8% (lower is better)
  Range: 2.6% - 3.1%
  üìä Good measurement consistency with Predis

Predis Implementation Notes:
  üì° Connection management: Automatic (no manual close required)
  üîí TLS handling: Enhanced SSL context support
  üîÑ Error recovery: Built-in retry logic with exponential backoff
  üìä Performance characteristics: Pure PHP (higher latency, more consistent)
================================================================================

================================================================================
PREDIS-SPECIFIC INSIGHTS
Thread Variant: 1 | Implementation: Predis (Pure PHP)
================================================================================
TLS Connection Reliability:
  ‚úÖ Predis TLS connections: 4/4 databases
  üìä All TLS connections established successfully
  üîí SSL context handling: Reliable (Predis manages SSL internally)

Predis Configuration Analysis:
  üîó Connection timeout: 5s
  üì° Read/write timeout: 5s
  üîÑ Connection retry attempts: 3
  ‚ö° TCP keepalive: Enabled
  üîó Persistent connections: Disabled

Performance Characteristics:
  üìà Average non-TLS performance: 13,279 ops/sec
  üîí Average TLS performance: 10,457 ops/sec
  üìä TLS overhead: 21.3%
  ‚ÑπÔ∏è  Note: 25-40% TLS overhead is normal for Redis over SSL

Predis Advantages:
  ‚úÖ Better TLS reliability compared to phpredis extension
  ‚úÖ Enhanced SSL context handling
  ‚úÖ No extension compilation dependencies
  ‚úÖ Consistent behavior across PHP versions
  ‚ö†Ô∏è  Trade-off: Lower raw performance due to pure PHP implementation
================================================================================

======================================================================
‚úÖ Predis WordPress Object Cache test completed successfully!
üìÅ Results saved to: ./benchmarklogs-1t
üìä Implementation: Predis (Pure PHP Redis Client)
üîí TLS Support: Enhanced reliability compared to phpredis

üìÑ Generated files:
  php_wordpress_test_phpredis.log (32KB)
  php_wordpress_test_predis.log (16.8KB)
  wordpress_object_cache_test_predis_predis.csv (1.8KB)
  wordpress_object_cache_test_predis_predis.json (99.6KB)
  wordpress_object_cache_test_predis_predis.md (2.7KB)
  wordpress_object_cache_test_predis_predis_raw.json (87.2KB)
