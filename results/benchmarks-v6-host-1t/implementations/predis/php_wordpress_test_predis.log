WordPress Object Cache Test with Predis - Configured Runner
============================================================
Implementation: Predis (Pure PHP Redis Client)
Enhanced TLS Support: Yes
Statistical Analysis: 13 iterations with confidence intervals

üìã Loading configuration from: tests/php/test_config_predis.php
‚úÖ Configuration loaded successfully

üìä Test Configuration:
  Implementation: Predis (Pure PHP)
  Duration per iteration: 30s
  Test iterations: 13
  Output directory: ./benchmarklogs-1t
  TLS testing: Enabled
  Flush before test: Yes
  Thread variant: 1
  Connection timeout: 5s
  Read/write timeout: 5s
  Connection retries: 3
  Persistent connections: No
  Thread configuration:
    redis_io_threads: 1 threads
    keydb_server_threads: 1 threads
    dragonfly_proactor_threads: 1 threads
    valkey_io_threads: 1 threads
  Database configurations:
    Redis: 127.0.0.1:6379 (TLS: 6390) (IO threads: 1)
    KeyDB: 127.0.0.1:6380 (TLS: 6391) (Server threads: 1)
    Dragonfly: 127.0.0.1:6381 (TLS: 6392) (Proactor threads: 1)
    Valkey: 127.0.0.1:6382 (TLS: 6393) (IO threads: 1)

======================================================================

üîç Checking Predis availability...
‚úÖ Predis library available

üöÄ Starting Predis WordPress Object Cache Test...

Starting WordPress Object Cache Test (Predis)...
Timestamp: 2025-06-09 18:08:46 UTC
Predis Version: unknown
PHP Version: 8.4.8
Enhanced Testing Configuration (Predis):
- Iterations per test: 13
- Iteration pause: 500ms
- Statistical analysis: Enabled
- Raw data logging: Enabled
- Connection timeout: 5s
- Read/write timeout: 5s
- Connection retry attempts: 3
- Persistent connections: Disabled
- TCP keepalive: Enabled
Thread Variant: 1
Thread Configuration:
  redis_io_threads: 1 threads
  keydb_server_threads: 1 threads
  dragonfly_proactor_threads: 1 threads
  valkey_io_threads: 1 threads
TLS Certificates: Found and validated (Predis-compatible)

Checking TLS readiness (Predis)...
  Redis: TLS port accessible ‚úì
  KeyDB: TLS port accessible ‚úì
  Dragonfly: TLS port accessible ‚úì
  Valkey: TLS port accessible ‚úì

Predis TLS testing will be attempted for: Redis, KeyDB, Dragonfly, Valkey
============================================================
Testing Redis with Predis...
  Configuration: IO Threads: 1
  Running 13 iterations for Redis (non-TLS-Predis)...
  Initial keys in database: 394513
  Flushing database before test...
  Database flushed in 204.18ms. Keys remaining: 0
    Iteration 1/13... 13639 ops/sec, 0.073ms latency
    Iteration 2/13... 14601 ops/sec, 0.068ms latency
    Iteration 3/13... 14854 ops/sec, 0.067ms latency
    Iteration 4/13... 14675 ops/sec, 0.068ms latency
    Iteration 5/13... 14851 ops/sec, 0.067ms latency
    Iteration 6/13... 15015 ops/sec, 0.066ms latency
    Iteration 7/13... 14870 ops/sec, 0.067ms latency
    Iteration 8/13... 15097 ops/sec, 0.066ms latency
    Iteration 9/13... 14728 ops/sec, 0.067ms latency
    Iteration 10/13... 14895 ops/sec, 0.067ms latency
    Iteration 11/13... 14904 ops/sec, 0.067ms latency
    Iteration 12/13... 14908 ops/sec, 0.067ms latency
    Iteration 13/13... 15023 ops/sec, 0.066ms latency
  Redis (non-TLS-Predis): 14773.84¬±367.96 ops/sec (CV: 2.5%), 0.067¬±0.002ms latency, Quality: good
  Final keys in database: 61507
üîê Attempting TLS connection to Unknown at 127.0.0.1:6390 (Predis)
  Using custom port scheme: Redis=6390, KeyDB=6391, Dragonfly=6392, Valkey=6393
  Note: Predis uses 'tls' scheme and 'ssl' context array
  üì° Method 1: Predis 'tls' scheme with SSL context...
  üß™ Testing TLS connection with SET/GET commands...
  ‚úÖ TLS connection successful with Predis 'tls' scheme
  Running 13 iterations for Redis (TLS-Predis)...
  Initial keys in database: 395474
  Flushing database before test...
  Database flushed in 194.59ms. Keys remaining: 0
    Iteration 1/13... 9727 ops/sec, 0.102ms latency
    Iteration 2/13... 10566 ops/sec, 0.094ms latency
    Iteration 3/13... 10609 ops/sec, 0.094ms latency
    Iteration 4/13... 10756 ops/sec, 0.092ms latency
    Iteration 5/13... 10721 ops/sec, 0.093ms latency
    Iteration 6/13... 10912 ops/sec, 0.091ms latency
    Iteration 7/13... 10883 ops/sec, 0.091ms latency
    Iteration 8/13... 11019 ops/sec, 0.090ms latency
    Iteration 9/13... 10824 ops/sec, 0.092ms latency
    Iteration 10/13... 10853 ops/sec, 0.092ms latency
    Iteration 11/13... 10657 ops/sec, 0.093ms latency
    Iteration 12/13... 10762 ops/sec, 0.092ms latency
    Iteration 13/13... 10849 ops/sec, 0.092ms latency
  Redis (TLS-Predis): 10703.00¬±319.17 ops/sec (CV: 3.0%), 0.093¬±0.003ms latency, Quality: good
  Final keys in database: 61472

Testing KeyDB with Predis...
  Configuration: Server Threads: 1
  Running 13 iterations for KeyDB (non-TLS-Predis)...
  Initial keys in database: 394249
  Flushing database before test...
  Database flushed in 212.68ms. Keys remaining: 0
    Iteration 1/13... 11596 ops/sec, 0.086ms latency
    Iteration 2/13... 12436 ops/sec, 0.080ms latency
    Iteration 3/13... 12657 ops/sec, 0.078ms latency
    Iteration 4/13... 12766 ops/sec, 0.078ms latency
    Iteration 5/13... 12787 ops/sec, 0.078ms latency
    Iteration 6/13... 12827 ops/sec, 0.077ms latency
    Iteration 7/13... 12854 ops/sec, 0.077ms latency
    Iteration 8/13... 12852 ops/sec, 0.077ms latency
    Iteration 9/13... 12894 ops/sec, 0.077ms latency
    Iteration 10/13... 12841 ops/sec, 0.077ms latency
    Iteration 11/13... 12869 ops/sec, 0.077ms latency
    Iteration 12/13... 12930 ops/sec, 0.077ms latency
    Iteration 13/13... 12825 ops/sec, 0.077ms latency
  KeyDB (non-TLS-Predis): 12702.62¬±355.86 ops/sec (CV: 2.8%), 0.078¬±0.002ms latency, Quality: good
  Final keys in database: 61502
üîê Attempting TLS connection to Unknown at 127.0.0.1:6391 (Predis)
  Using custom port scheme: Redis=6390, KeyDB=6391, Dragonfly=6392, Valkey=6393
  Note: Predis uses 'tls' scheme and 'ssl' context array
  üì° Method 1: Predis 'tls' scheme with SSL context...
  üß™ Testing TLS connection with SET/GET commands...
  ‚úÖ TLS connection successful with Predis 'tls' scheme
  Running 13 iterations for KeyDB (TLS-Predis)...
  Initial keys in database: 394063
  Flushing database before test...
  Database flushed in 184.49ms. Keys remaining: 0
    Iteration 1/13... 8844 ops/sec, 0.113ms latency
    Iteration 2/13... 9413 ops/sec, 0.106ms latency
    Iteration 3/13... 9630 ops/sec, 0.103ms latency
    Iteration 4/13... 9668 ops/sec, 0.103ms latency
    Iteration 5/13... 9704 ops/sec, 0.102ms latency
    Iteration 6/13... 9697 ops/sec, 0.103ms latency
    Iteration 7/13... 9794 ops/sec, 0.102ms latency
    Iteration 8/13... 9785 ops/sec, 0.102ms latency
    Iteration 9/13... 9829 ops/sec, 0.101ms latency
    Iteration 10/13... 9856 ops/sec, 0.101ms latency
    Iteration 11/13... 9803 ops/sec, 0.101ms latency
    Iteration 12/13... 9792 ops/sec, 0.102ms latency
    Iteration 13/13... 9751 ops/sec, 0.102ms latency
  KeyDB (TLS-Predis): 9658.96¬±270.60 ops/sec (CV: 2.8%), 0.103¬±0.003ms latency, Quality: good
  Final keys in database: 61459

Testing Dragonfly with Predis...
  Configuration: Proactor Threads: 1
  Running 13 iterations for Dragonfly (non-TLS-Predis)...
  Initial keys in database: 390529
  Flushing database before test...
  Database flushed in 21.01ms. Keys remaining: 0
    Iteration 1/13... 10013 ops/sec, 0.099ms latency
    Iteration 2/13... 10603 ops/sec, 0.094ms latency
    Iteration 3/13... 10537 ops/sec, 0.094ms latency
    Iteration 4/13... 10668 ops/sec, 0.093ms latency
    Iteration 5/13... 10898 ops/sec, 0.091ms latency
    Iteration 6/13... 10717 ops/sec, 0.093ms latency
    Iteration 7/13... 10826 ops/sec, 0.092ms latency
    Iteration 8/13... 10693 ops/sec, 0.093ms latency
    Iteration 9/13... 10781 ops/sec, 0.092ms latency
    Iteration 10/13... 10871 ops/sec, 0.091ms latency
    Iteration 11/13... 10538 ops/sec, 0.094ms latency
    Iteration 12/13... 11000 ops/sec, 0.090ms latency
    Iteration 13/13... 10824 ops/sec, 0.092ms latency
  Dragonfly (non-TLS-Predis): 10689.89¬±246.63 ops/sec (CV: 2.3%), 0.093¬±0.002ms latency, Quality: good
  Final keys in database: 61297
üîê Attempting TLS connection to Unknown at 127.0.0.1:6392 (Predis)
  Using custom port scheme: Redis=6390, KeyDB=6391, Dragonfly=6392, Valkey=6393
  Note: Predis uses 'tls' scheme and 'ssl' context array
  üì° Method 1: Predis 'tls' scheme with SSL context...
  üß™ Testing TLS connection with SET/GET commands...
  ‚ùå Predis 'tls' scheme failed: NOAUTH Authentication required.
  üì° Method 2: Predis 'rediss' URI scheme...
  ‚ùå Predis 'rediss' URI failed: NOAUTH Authentication required.
  üì° Method 3: Predis TLS with localhost hostname...
  ‚ùå Predis localhost TLS failed: NOAUTH Authentication required.
  ‚ùå All Predis TLS connection methods failed for Unknown at port 6392
  üìã Note: TLS connection failed likely due to server certificate configuration
  üîÑ With recent Docker config changes, TLS should now work properly
  üö´ Bypassing TLS test for Unknown to allow testing to continue
  ‚úÖ Non-TLS results remain valid and reliable for performance comparison
  ‚Üí TLS test skipped for Dragonfly due to Predis connection failure

Testing Valkey with Predis...
  Configuration: IO Threads: 1
  Running 13 iterations for Valkey (non-TLS-Predis)...
  Initial keys in database: 391159
  Flushing database before test...
  Database flushed in 0.09ms. Keys remaining: 0
    Iteration 1/13... 13282 ops/sec, 0.075ms latency
    Iteration 2/13... 14516 ops/sec, 0.068ms latency
    Iteration 3/13... 14794 ops/sec, 0.067ms latency
    Iteration 4/13... 14884 ops/sec, 0.067ms latency
    Iteration 5/13... 14864 ops/sec, 0.067ms latency
    Iteration 6/13... 15128 ops/sec, 0.066ms latency
    Iteration 7/13... 14983 ops/sec, 0.066ms latency
    Iteration 8/13... 15134 ops/sec, 0.066ms latency
    Iteration 9/13... 14754 ops/sec, 0.067ms latency
    Iteration 10/13... 14960 ops/sec, 0.066ms latency
    Iteration 11/13... 14852 ops/sec, 0.067ms latency
    Iteration 12/13... 14940 ops/sec, 0.066ms latency
    Iteration 13/13... 14923 ops/sec, 0.067ms latency
  Valkey (non-TLS-Predis): 14770.33¬±474.43 ops/sec (CV: 3.2%), 0.067¬±0.002ms latency, Quality: good
  Final keys in database: 61511
üîê Attempting TLS connection to Unknown at 127.0.0.1:6393 (Predis)
  Using custom port scheme: Redis=6390, KeyDB=6391, Dragonfly=6392, Valkey=6393
  Note: Predis uses 'tls' scheme and 'ssl' context array
  üì° Method 1: Predis 'tls' scheme with SSL context...
  üß™ Testing TLS connection with SET/GET commands...
  ‚úÖ TLS connection successful with Predis 'tls' scheme
  Running 13 iterations for Valkey (TLS-Predis)...
  Initial keys in database: 390840
  Flushing database before test...
  Database flushed in 0.16ms. Keys remaining: 0
    Iteration 1/13... 9823 ops/sec, 0.101ms latency
    Iteration 2/13... 10443 ops/sec, 0.095ms latency
    Iteration 3/13... 10679 ops/sec, 0.093ms latency
    Iteration 4/13... 10654 ops/sec, 0.093ms latency
    Iteration 5/13... 10785 ops/sec, 0.092ms latency
    Iteration 6/13... 10816 ops/sec, 0.092ms latency
    Iteration 7/13... 10914 ops/sec, 0.091ms latency
    Iteration 8/13... 10926 ops/sec, 0.091ms latency
    Iteration 9/13... 10809 ops/sec, 0.092ms latency
    Iteration 10/13... 10762 ops/sec, 0.092ms latency
    Iteration 11/13... 10805 ops/sec, 0.092ms latency
    Iteration 12/13... 10817 ops/sec, 0.092ms latency
    Iteration 13/13... 10756 ops/sec, 0.092ms latency
  Valkey (TLS-Predis): 10691.51¬±288.19 ops/sec (CV: 2.7%), 0.093¬±0.003ms latency, Quality: good
  Final keys in database: 61472

Enhanced Predis results saved:
  CSV: ./benchmarklogs-1t/wordpress_object_cache_test_predis_predis.csv
  JSON: ./benchmarklogs-1t/wordpress_object_cache_test_predis_predis.json
  Markdown: ./benchmarklogs-1t/wordpress_object_cache_test_predis_predis.md
  Raw Data: ./benchmarklogs-1t/wordpress_object_cache_test_predis_predis_raw.json
============================================================
Enhanced Predis test suite completed!
Total execution time: 2,779.48 seconds
Total tests run: 7
Statistical iterations per test: 13
Results saved to ./benchmarklogs-1t/
Redis implementation: Predis (pure PHP)

====================================================================================================
ENHANCED STATISTICAL PERFORMANCE SUMMARY (Predis)
Thread Variant: 1 | Iterations per test: 13
====================================================================================================
Rank Database                       Ops/sec   ¬±StdDev      CV%  Latency  Quality     95% CI     Reliable
----------------------------------------------------------------------------------------------------
#1  Redis (Predis)               14774      368    2.5%  0.067ms üü°good    14,570-14,978      ‚úÖ
#2  Valkey (Predis)              14770      474    3.2%  0.067ms üü°good    14,507-15,033      ‚úÖ
#3  KeyDB (Predis)               12703      356    2.8%  0.078ms üü°good    12,505-12,900      ‚úÖ
#4  Redis (TLS-Predis)           10703      319    3.0%  0.093ms üü°good    10,526-10,880      ‚úÖ
#5  Valkey (TLS-Predis)          10692      288    2.7%  0.093ms üü°good    10,532-10,851      ‚úÖ
#6  Dragonfly (Predis)           10690      247    2.3%  0.093ms üü°good    10,553-10,827      ‚úÖ
#7  KeyDB (TLS-Predis)            9659      271    2.8%  0.103ms üü°good     9,509-9,809      ‚úÖ
====================================================================================================
Implementation: Predis (Pure PHP Redis Client)
üìà Compare with phpredis results to see implementation trade-offs

============================================================
TLS vs NON-TLS PERFORMANCE COMPARISON (Predis)
Thread Variant: 1
============================================================
Redis      | Non-TLS:    14774¬±368  | TLS:    10703¬±319  | Impact: +27.6% *
KeyDB      | Non-TLS:    12703¬±356  | TLS:     9659¬±271  | Impact: +24.0% *
Dragonfly  | Non-TLS:    10690¬±247  | TLS:   FAILED | Impact: N/A
Valkey     | Non-TLS:    14770¬±474  | TLS:    10692¬±288  | Impact: +27.6% *
------------------------------------------------------------
* = Statistically significant difference (95% confidence)
Implementation: Predis (Pure PHP)
============================================================

================================================================================
STATISTICAL INSIGHTS (Predis)
Thread Variant: 1 | Iterations: 13
================================================================================
Measurement Quality Distribution:
  üü° Good      :  7 tests (100.0%)

Coefficient of Variation Analysis:
  Average CV: 2.8% (lower is better)
  Range: 2.3% - 3.2%
  üìä Good measurement consistency with Predis

Predis Implementation Notes:
  üì° Connection management: Automatic (no manual close required)
  üîí TLS handling: Enhanced SSL context support
  üîÑ Error recovery: Built-in retry logic with exponential backoff
  üìä Performance characteristics: Pure PHP (higher latency, more consistent)
================================================================================

================================================================================
PREDIS-SPECIFIC INSIGHTS
Thread Variant: 1 | Implementation: Predis (Pure PHP)
================================================================================
TLS Connection Reliability:
  ‚úÖ Predis TLS connections: 3/4 databases
  üìä All TLS connections established successfully
  üîí SSL context handling: Reliable (Predis manages SSL internally)

Predis Configuration Analysis:
  üîó Connection timeout: 5s
  üì° Read/write timeout: 5s
  üîÑ Connection retry attempts: 3
  ‚ö° TCP keepalive: Enabled
  üîó Persistent connections: Disabled

Performance Characteristics:
  üìà Average non-TLS performance: 13,234 ops/sec
  üîí Average TLS performance: 10,351 ops/sec
  üìä TLS overhead: 21.8%
  ‚ÑπÔ∏è  Note: 25-40% TLS overhead is normal for Redis over SSL

Predis Advantages:
  ‚úÖ Better TLS reliability compared to phpredis extension
  ‚úÖ Enhanced SSL context handling
  ‚úÖ No extension compilation dependencies
  ‚úÖ Consistent behavior across PHP versions
  ‚ö†Ô∏è  Trade-off: Lower raw performance due to pure PHP implementation
================================================================================

======================================================================
‚úÖ Predis WordPress Object Cache test completed successfully!
üìÅ Results saved to: ./benchmarklogs-1t
üìä Implementation: Predis (Pure PHP Redis Client)
üîí TLS Support: Enhanced reliability compared to phpredis

üìÑ Generated files:
  php_wordpress_test_phpredis.log (31.1KB)
  php_wordpress_test_predis.log (16.3KB)
  wordpress_object_cache_test_predis_predis.csv (1.6KB)
  wordpress_object_cache_test_predis_predis.json (87.4KB)
  wordpress_object_cache_test_predis_predis.md (2.6KB)
  wordpress_object_cache_test_predis_predis_raw.json (76.4KB)
