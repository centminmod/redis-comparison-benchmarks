WordPress Object Cache Test with Predis - Configured Runner
============================================================
Implementation: Predis (Pure PHP Redis Client)
Enhanced TLS Support: Yes
Statistical Analysis: 5 iterations with confidence intervals

📋 Loading configuration from: tests/php/test_config_predis.php
✅ Configuration loaded successfully

📊 Test Configuration:
  Implementation: Predis (Pure PHP)
  Duration per iteration: 10s
  Test iterations: 5
  Output directory: ./benchmarklogs-2t
  TLS testing: Enabled
  Flush before test: Yes
  Thread variant: 2
  Connection timeout: 5s
  Read/write timeout: 5s
  Connection retries: 3
  Persistent connections: No
  Thread configuration:
    redis_io_threads: 2 threads
    keydb_server_threads: 2 threads
    dragonfly_proactor_threads: 2 threads
    valkey_io_threads: 2 threads
  Database configurations:
    Redis: 127.0.0.1:6379 (TLS: 6390) (IO threads: 2)
    KeyDB: 127.0.0.1:6380 (TLS: 6391) (Server threads: 2)
    Dragonfly: 127.0.0.1:6381 (TLS: 6392) (Proactor threads: 2)
    Valkey: 127.0.0.1:6382 (TLS: 6393) (IO threads: 2)

======================================================================

🔍 Checking Predis availability...
✅ Predis library available

🚀 Starting Predis WordPress Object Cache Test...

Starting WordPress Object Cache Test (Predis)...
Timestamp: 2025-06-10 10:59:26 UTC
Predis Version: unknown
PHP Version: 8.4.8
Enhanced Testing Configuration (Predis):
- Iterations per test: 5
- Iteration pause: 500ms
- Statistical analysis: Enabled
- Raw data logging: Enabled
- Connection timeout: 5s
- Read/write timeout: 5s
- Connection retry attempts: 3
- Persistent connections: Disabled
- TCP keepalive: Enabled
Thread Variant: 2
Thread Configuration:
  redis_io_threads: 2 threads
  keydb_server_threads: 2 threads
  dragonfly_proactor_threads: 2 threads
  valkey_io_threads: 2 threads
TLS Certificates: Found and validated (Predis-compatible)

Checking TLS readiness (Predis)...
  Redis: TLS port accessible ✓
  KeyDB: TLS port accessible ✓
  Dragonfly: TLS port accessible ✓
  Valkey: TLS port accessible ✓

Predis TLS testing will be attempted for: Redis, KeyDB, Dragonfly, Valkey
============================================================
Testing Redis with Predis...
  Configuration: IO Threads: 2
  Running 5 iterations for Redis (non-TLS-Predis)...
  Initial keys in database: 190111
  Flushing database before test...
  Database flushed in 92.82ms. Keys remaining: 0
    Iteration 1/5... 8810 ops/sec, 0.113ms latency
    Iteration 2/5... 9478 ops/sec, 0.105ms latency
    Iteration 3/5... 9791 ops/sec, 0.102ms latency
    Iteration 4/5... 9927 ops/sec, 0.100ms latency
    Iteration 5/5... 10062 ops/sec, 0.099ms latency
  Redis (non-TLS-Predis): 9613.56±498.80 ops/sec (CV: 5.2%), 0.104±0.006ms latency, Quality: fair
  Final keys in database: 44284
🔐 Attempting TLS connection to Redis at 127.0.0.1:6390 (Predis)
  Using custom port scheme: Redis=6390, KeyDB=6391, Dragonfly=6392, Valkey=6393
  Note: Predis uses 'tls' scheme and 'ssl' context array
  📡 Method 1: Predis 'tls' scheme with SSL context...
  🧪 Testing TLS connection with SET/GET commands...
  ✅ TLS connection successful with Predis 'tls' scheme
  Running 5 iterations for Redis (TLS-Predis)...
  Initial keys in database: 161802
  Flushing database before test...
  Database flushed in 80.15ms. Keys remaining: 0
    Iteration 1/5... 6799 ops/sec, 0.146ms latency
    Iteration 2/5... 7186 ops/sec, 0.139ms latency
    Iteration 3/5... 7389 ops/sec, 0.135ms latency
    Iteration 4/5... 7571 ops/sec, 0.132ms latency
    Iteration 5/5... 7506 ops/sec, 0.133ms latency
  Redis (TLS-Predis): 7290.19±311.28 ops/sec (CV: 4.3%), 0.137±0.006ms latency, Quality: good
  Final keys in database: 39213

Testing KeyDB with Predis...
  Configuration: Server Threads: 2
  Running 5 iterations for KeyDB (non-TLS-Predis)...
  Initial keys in database: 190201
  Flushing database before test...
  Database flushed in 93.44ms. Keys remaining: 0
    Iteration 1/5... 10891 ops/sec, 0.091ms latency
    Iteration 2/5... 11679 ops/sec, 0.085ms latency
    Iteration 3/5... 12086 ops/sec, 0.082ms latency
    Iteration 4/5... 12276 ops/sec, 0.081ms latency
    Iteration 5/5... 12235 ops/sec, 0.081ms latency
  KeyDB (non-TLS-Predis): 11833.45±577.27 ops/sec (CV: 4.9%), 0.084±0.004ms latency, Quality: good
  Final keys in database: 48018
🔐 Attempting TLS connection to KeyDB at 127.0.0.1:6391 (Predis)
  Using custom port scheme: Redis=6390, KeyDB=6391, Dragonfly=6392, Valkey=6393
  Note: Predis uses 'tls' scheme and 'ssl' context array
  📡 Method 1: Predis 'tls' scheme with SSL context...
  🧪 Testing TLS connection with SET/GET commands...
  ✅ TLS connection successful with Predis 'tls' scheme
  Running 5 iterations for KeyDB (TLS-Predis)...
  Initial keys in database: 190034
  Flushing database before test...
  Database flushed in 93.03ms. Keys remaining: 0
    Iteration 1/5... 8256 ops/sec, 0.121ms latency
    Iteration 2/5... 8861 ops/sec, 0.112ms latency
    Iteration 3/5... 9097 ops/sec, 0.109ms latency
    Iteration 4/5... 9247 ops/sec, 0.108ms latency
    Iteration 5/5... 9336 ops/sec, 0.107ms latency
  KeyDB (TLS-Predis): 8959.63±432.26 ops/sec (CV: 4.8%), 0.111±0.006ms latency, Quality: good
  Final keys in database: 43052

Testing Dragonfly with Predis...
  Configuration: Proactor Threads: 2
  Running 5 iterations for Dragonfly (non-TLS-Predis)...
  Initial keys in database: 189919
  Flushing database before test...
  Database flushed in 11.12ms. Keys remaining: 0
    Iteration 1/5... 9844 ops/sec, 0.101ms latency
    Iteration 2/5... 10464 ops/sec, 0.095ms latency
    Iteration 3/5... 10806 ops/sec, 0.092ms latency
    Iteration 4/5... 11066 ops/sec, 0.090ms latency
    Iteration 5/5... 11012 ops/sec, 0.090ms latency
  Dragonfly (non-TLS-Predis): 10638.59±502.82 ops/sec (CV: 4.7%), 0.094±0.005ms latency, Quality: good
  Final keys in database: 46223
🔐 Attempting TLS connection to Dragonfly at 127.0.0.1:6392 (Predis)
  Using custom port scheme: Redis=6390, KeyDB=6391, Dragonfly=6392, Valkey=6393
  Note: Predis uses 'tls' scheme and 'ssl' context array
  📡 Method 1: Predis 'tls' scheme with SSL context...
  🔐 Adding Dragonfly authentication to connection parameters...
  🧪 Testing TLS connection with SET/GET commands...
  ✅ TLS connection successful with Predis 'tls' scheme
  Running 5 iterations for Dragonfly (TLS-Predis)...
  Initial keys in database: 180703
  Flushing database before test...
  Database flushed in 19.36ms. Keys remaining: 0
    Iteration 1/5... 7414 ops/sec, 0.134ms latency
    Iteration 2/5... 7864 ops/sec, 0.127ms latency
    Iteration 3/5... 7863 ops/sec, 0.127ms latency
    Iteration 4/5... 8181 ops/sec, 0.122ms latency
    Iteration 5/5... 8174 ops/sec, 0.122ms latency
  Dragonfly (TLS-Predis): 7898.86±313.38 ops/sec (CV: 4.0%), 0.126±0.005ms latency, Quality: good
  Final keys in database: 40510

Testing Valkey with Predis...
  Configuration: IO Threads: 2
  Running 5 iterations for Valkey (non-TLS-Predis)...
  Initial keys in database: 190290
  Flushing database before test...
  Database flushed in 0.09ms. Keys remaining: 0
    Iteration 1/5... 12480 ops/sec, 0.080ms latency
    Iteration 2/5... 13539 ops/sec, 0.073ms latency
    Iteration 3/5... 13912 ops/sec, 0.071ms latency
    Iteration 4/5... 14298 ops/sec, 0.069ms latency
    Iteration 5/5... 14601 ops/sec, 0.068ms latency
  Valkey (non-TLS-Predis): 13765.96±822.94 ops/sec (CV: 6.0%), 0.072±0.005ms latency, Quality: fair
  Final keys in database: 50794
🔐 Attempting TLS connection to Valkey at 127.0.0.1:6393 (Predis)
  Using custom port scheme: Redis=6390, KeyDB=6391, Dragonfly=6392, Valkey=6393
  Note: Predis uses 'tls' scheme and 'ssl' context array
  📡 Method 1: Predis 'tls' scheme with SSL context...
  🧪 Testing TLS connection with SET/GET commands...
  ✅ TLS connection successful with Predis 'tls' scheme
  Running 5 iterations for Valkey (TLS-Predis)...
  Initial keys in database: 189733
  Flushing database before test...
  Database flushed in 0.13ms. Keys remaining: 0
    Iteration 1/5... 9082 ops/sec, 0.110ms latency
    Iteration 2/5... 9650 ops/sec, 0.103ms latency
    Iteration 3/5... 9739 ops/sec, 0.102ms latency
    Iteration 4/5... 10131 ops/sec, 0.098ms latency
    Iteration 5/5... 10211 ops/sec, 0.097ms latency
  Valkey (TLS-Predis): 9762.70±450.76 ops/sec (CV: 4.6%), 0.102±0.005ms latency, Quality: good
  Final keys in database: 44437

Enhanced Predis results saved:
  CSV: ./benchmarklogs-2t/wordpress_object_cache_test_predis_predis.csv
  JSON: ./benchmarklogs-2t/wordpress_object_cache_test_predis_predis.json
  Markdown: ./benchmarklogs-2t/wordpress_object_cache_test_predis_predis.md
  Raw Data: ./benchmarklogs-2t/wordpress_object_cache_test_predis_predis_raw.json
============================================================
Enhanced Predis test suite completed!
Total execution time: 417.20 seconds
Total tests run: 8
Statistical iterations per test: 5
Results saved to ./benchmarklogs-2t/
Redis implementation: Predis (pure PHP)

====================================================================================================
ENHANCED STATISTICAL PERFORMANCE SUMMARY (Predis)
Thread Variant: 2 | Iterations per test: 5
====================================================================================================
Rank Database                       Ops/sec   ±StdDev      CV%  Latency  Quality     95% CI     Reliable
----------------------------------------------------------------------------------------------------
#1  Valkey (Predis)              13766      823    6.0%  0.072ms 🟠fair    12,744-14,788      ✅
#2  KeyDB (Predis)               11833      577    4.9%  0.084ms 🟡good    11,117-12,550      ✅
#3  Dragonfly (Predis)           10639      503    4.7%  0.094ms 🟡good    10,014-11,263      ✅
#4  Valkey (TLS-Predis)           9763      451    4.6%  0.102ms 🟡good    9,203-10,322      ✅
#5  Redis (Predis)                9614      499    5.2%  0.104ms 🟠fair    8,994-10,233      ✅
#6  KeyDB (TLS-Predis)            8960      432    4.8%  0.111ms 🟡good     8,423-9,496      ✅
#7  Dragonfly (TLS-Predis)        7899      313    4.0%  0.126ms 🟡good     7,510-8,288      ✅
#8  Redis (TLS-Predis)            7290      311    4.3%  0.137ms 🟡good     6,904-7,677      ✅
====================================================================================================
Implementation: Predis (Pure PHP Redis Client)
📈 Compare with phpredis results to see implementation trade-offs

============================================================
TLS vs NON-TLS PERFORMANCE COMPARISON (Predis)
Thread Variant: 2
============================================================
Redis      | Non-TLS:     9614±499  | TLS:     7290±311  | Impact: +24.2% *
KeyDB      | Non-TLS:    11833±577  | TLS:     8960±432  | Impact: +24.3% *
Dragonfly  | Non-TLS:    10639±503  | TLS:     7899±313  | Impact: +25.8% *
Valkey     | Non-TLS:    13766±823  | TLS:     9763±451  | Impact: +29.1% *
------------------------------------------------------------
* = Statistically significant difference (95% confidence)
Implementation: Predis (Pure PHP)
============================================================

================================================================================
STATISTICAL INSIGHTS (Predis)
Thread Variant: 2 | Iterations: 5
================================================================================
Measurement Quality Distribution:
  🟡 Good      :  6 tests (75.0%)
  🟠 Fair      :  2 tests (25.0%)

Coefficient of Variation Analysis:
  Average CV: 4.8% (lower is better)
  Range: 4.0% - 6.0%
  📊 Good measurement consistency with Predis

Predis Implementation Notes:
  📡 Connection management: Automatic (no manual close required)
  🔒 TLS handling: Enhanced SSL context support
  🔄 Error recovery: Built-in retry logic with exponential backoff
  📊 Performance characteristics: Pure PHP (higher latency, more consistent)
================================================================================

================================================================================
PREDIS-SPECIFIC INSIGHTS
Thread Variant: 2 | Implementation: Predis (Pure PHP)
================================================================================
TLS Connection Reliability:
  ✅ Predis TLS connections: 4/4 databases
  📊 All TLS connections established successfully
  🔒 SSL context handling: Reliable (Predis manages SSL internally)

Predis Configuration Analysis:
  🔗 Connection timeout: 5s
  📡 Read/write timeout: 5s
  🔄 Connection retry attempts: 3
  ⚡ TCP keepalive: Enabled
  🔗 Persistent connections: Disabled

Performance Characteristics:
  📈 Average non-TLS performance: 11,463 ops/sec
  🔒 Average TLS performance: 8,478 ops/sec
  📊 TLS overhead: 26.0%
  ℹ️  Note: 25-40% TLS overhead is normal for Redis over SSL

Predis Advantages:
  ✅ Better TLS reliability compared to phpredis extension
  ✅ Enhanced SSL context handling
  ✅ No extension compilation dependencies
  ✅ Consistent behavior across PHP versions
  ⚠️  Trade-off: Lower raw performance due to pure PHP implementation
================================================================================

======================================================================
✅ Predis WordPress Object Cache test completed successfully!
📁 Results saved to: ./benchmarklogs-2t
📊 Implementation: Predis (Pure PHP Redis Client)
🔒 TLS Support: Enhanced reliability compared to phpredis

📄 Generated files:
  php_wordpress_test_phpredis.log (25.4KB)
  php_wordpress_test_predis.log (13.1KB)
  wordpress_object_cache_test_predis_predis.csv (1.8KB)
  wordpress_object_cache_test_predis_predis.json (50.6KB)
  wordpress_object_cache_test_predis_predis.md (2.7KB)
  wordpress_object_cache_test_predis_predis_raw.json (38.2KB)
