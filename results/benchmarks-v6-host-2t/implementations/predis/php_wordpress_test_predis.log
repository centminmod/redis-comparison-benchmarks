WordPress Object Cache Test with Predis - Configured Runner
============================================================
Implementation: Predis (Pure PHP Redis Client)
Enhanced TLS Support: Yes
Statistical Analysis: 13 iterations with confidence intervals

üìã Loading configuration from: tests/php/test_config_predis.php
‚úÖ Configuration loaded successfully

üìä Test Configuration:
  Implementation: Predis (Pure PHP)
  Duration per iteration: 30s
  Test iterations: 13
  Output directory: ./benchmarklogs-2t
  TLS testing: Enabled
  Flush before test: Yes
  Thread variant: 2
  Connection timeout: 5s
  Read/write timeout: 5s
  Connection retries: 3
  Persistent connections: No
  Thread configuration:
    redis_io_threads: 2 threads
    keydb_server_threads: 2 threads
    dragonfly_proactor_threads: 2 threads
    valkey_io_threads: 2 threads
  Database configurations:
    Redis: 127.0.0.1:6379 (TLS: 6390) (IO threads: 2)
    KeyDB: 127.0.0.1:6380 (TLS: 6391) (Server threads: 2)
    Dragonfly: 127.0.0.1:6381 (TLS: 6392) (Proactor threads: 2)
    Valkey: 127.0.0.1:6382 (TLS: 6393) (IO threads: 2)

======================================================================

üîç Checking Predis availability...
‚úÖ Predis library available

üöÄ Starting Predis WordPress Object Cache Test...

Starting WordPress Object Cache Test (Predis)...
Timestamp: 2025-06-09 10:57:49 UTC
Predis Version: unknown
PHP Version: 8.4.7
Enhanced Testing Configuration (Predis):
- Iterations per test: 13
- Iteration pause: 500ms
- Statistical analysis: Enabled
- Raw data logging: Enabled
- Connection timeout: 5s
- Read/write timeout: 5s
- Connection retry attempts: 3
- Persistent connections: Disabled
- TCP keepalive: Enabled
Thread Variant: 2
Thread Configuration:
  redis_io_threads: 2 threads
  keydb_server_threads: 2 threads
  dragonfly_proactor_threads: 2 threads
  valkey_io_threads: 2 threads
TLS Certificates: Found and validated (Predis-compatible)

Checking TLS readiness (Predis)...
  Redis: TLS port accessible ‚úì
  KeyDB: TLS port accessible ‚úì
  Dragonfly: TLS port accessible ‚úì
  Valkey: TLS port accessible ‚úì

Predis TLS testing will be attempted for: Redis, KeyDB, Dragonfly, Valkey
============================================================
Testing Redis with Predis...
  Configuration: IO Threads: 2
  Running 13 iterations for Redis (non-TLS-Predis)...
  Initial keys in database: 395057
  Flushing database before test...
  Database flushed in 211.28ms. Keys remaining: 0
    Iteration 1/13... 9567 ops/sec, 0.104ms latency
    Iteration 2/13... 10205 ops/sec, 0.097ms latency
    Iteration 3/13... 10414 ops/sec, 0.096ms latency
    Iteration 4/13... 10519 ops/sec, 0.095ms latency
    Iteration 5/13... 10569 ops/sec, 0.094ms latency
    Iteration 6/13... 10545 ops/sec, 0.094ms latency
    Iteration 7/13... 10586 ops/sec, 0.094ms latency
    Iteration 8/13... 10616 ops/sec, 0.094ms latency
    Iteration 9/13... 10537 ops/sec, 0.094ms latency
    Iteration 10/13... 10505 ops/sec, 0.095ms latency
    Iteration 11/13... 10444 ops/sec, 0.095ms latency
    Iteration 12/13... 10492 ops/sec, 0.095ms latency
    Iteration 13/13... 10484 ops/sec, 0.095ms latency
  Redis (non-TLS-Predis): 10421.79¬±276.73 ops/sec (CV: 2.7%), 0.095¬±0.003ms latency, Quality: good
  Final keys in database: 61462
üîê Attempting TLS connection to Unknown at 127.0.0.1:6390 (Predis)
  Using custom port scheme: Redis=6390, KeyDB=6391, Dragonfly=6392, Valkey=6393
  Note: Predis uses 'tls' scheme and 'ssl' context array
  üì° Method 1: Predis 'tls' scheme with SSL context...
  üß™ Testing TLS connection with SET/GET commands...
  ‚úÖ TLS connection successful with Predis 'tls' scheme
  Running 13 iterations for Redis (TLS-Predis)...
  Initial keys in database: 394719
  Flushing database before test...
  Database flushed in 227.26ms. Keys remaining: 0
    Iteration 1/13... 7237 ops/sec, 0.138ms latency
    Iteration 2/13... 7741 ops/sec, 0.129ms latency
    Iteration 3/13... 7858 ops/sec, 0.127ms latency
    Iteration 4/13... 7919 ops/sec, 0.126ms latency
    Iteration 5/13... 7982 ops/sec, 0.125ms latency
    Iteration 6/13... 8038 ops/sec, 0.124ms latency
    Iteration 7/13... 8122 ops/sec, 0.123ms latency
    Iteration 8/13... 8112 ops/sec, 0.123ms latency
    Iteration 9/13... 8160 ops/sec, 0.122ms latency
    Iteration 10/13... 8100 ops/sec, 0.123ms latency
    Iteration 11/13... 8117 ops/sec, 0.123ms latency
    Iteration 12/13... 8051 ops/sec, 0.124ms latency
    Iteration 13/13... 8151 ops/sec, 0.122ms latency
  Redis (TLS-Predis): 7968.30¬±252.85 ops/sec (CV: 3.2%), 0.125¬±0.004ms latency, Quality: good
  Final keys in database: 61388

Testing KeyDB with Predis...
  Configuration: Server Threads: 2
  Running 13 iterations for KeyDB (non-TLS-Predis)...
  Initial keys in database: 394580
  Flushing database before test...
  Database flushed in 218.04ms. Keys remaining: 0
    Iteration 1/13... 11557 ops/sec, 0.086ms latency
    Iteration 2/13... 12387 ops/sec, 0.080ms latency
    Iteration 3/13... 12685 ops/sec, 0.078ms latency
    Iteration 4/13... 12864 ops/sec, 0.077ms latency
    Iteration 5/13... 12878 ops/sec, 0.077ms latency
    Iteration 6/13... 12928 ops/sec, 0.077ms latency
    Iteration 7/13... 12896 ops/sec, 0.077ms latency
    Iteration 8/13... 12876 ops/sec, 0.077ms latency
    Iteration 9/13... 12846 ops/sec, 0.077ms latency
    Iteration 10/13... 12913 ops/sec, 0.077ms latency
    Iteration 11/13... 12927 ops/sec, 0.077ms latency
    Iteration 12/13... 12883 ops/sec, 0.077ms latency
    Iteration 13/13... 12855 ops/sec, 0.077ms latency
  KeyDB (non-TLS-Predis): 12730.50¬±381.76 ops/sec (CV: 3.0%), 0.078¬±0.003ms latency, Quality: good
  Final keys in database: 61499
üîê Attempting TLS connection to Unknown at 127.0.0.1:6391 (Predis)
  Using custom port scheme: Redis=6390, KeyDB=6391, Dragonfly=6392, Valkey=6393
  Note: Predis uses 'tls' scheme and 'ssl' context array
  üì° Method 1: Predis 'tls' scheme with SSL context...
  üß™ Testing TLS connection with SET/GET commands...
  ‚úÖ TLS connection successful with Predis 'tls' scheme
  Running 13 iterations for KeyDB (TLS-Predis)...
  Initial keys in database: 393986
  Flushing database before test...
  Database flushed in 186.47ms. Keys remaining: 0
    Iteration 1/13... 8792 ops/sec, 0.113ms latency
    Iteration 2/13... 9427 ops/sec, 0.106ms latency
    Iteration 3/13... 9651 ops/sec, 0.103ms latency
    Iteration 4/13... 9695 ops/sec, 0.103ms latency
    Iteration 5/13... 9721 ops/sec, 0.102ms latency
    Iteration 6/13... 9706 ops/sec, 0.102ms latency
    Iteration 7/13... 9734 ops/sec, 0.102ms latency
    Iteration 8/13... 9742 ops/sec, 0.102ms latency
    Iteration 9/13... 9750 ops/sec, 0.102ms latency
    Iteration 10/13... 9720 ops/sec, 0.102ms latency
    Iteration 11/13... 9731 ops/sec, 0.102ms latency
    Iteration 12/13... 9738 ops/sec, 0.102ms latency
    Iteration 13/13... 9765 ops/sec, 0.102ms latency
  KeyDB (TLS-Predis): 9628.56¬±265.90 ops/sec (CV: 2.8%), 0.103¬±0.003ms latency, Quality: good
  Final keys in database: 61449

Testing Dragonfly with Predis...
  Configuration: Proactor Threads: 2
  Running 13 iterations for Dragonfly (non-TLS-Predis)...
  Initial keys in database: 390641
  Flushing database before test...
  Database flushed in 21.10ms. Keys remaining: 0
    Iteration 1/13... 9929 ops/sec, 0.100ms latency
    Iteration 2/13... 10433 ops/sec, 0.095ms latency
    Iteration 3/13... 10546 ops/sec, 0.094ms latency
    Iteration 4/13... 10857 ops/sec, 0.092ms latency
    Iteration 5/13... 10790 ops/sec, 0.092ms latency
    Iteration 6/13... 10812 ops/sec, 0.092ms latency
    Iteration 7/13... 10913 ops/sec, 0.091ms latency
    Iteration 8/13... 10868 ops/sec, 0.091ms latency
    Iteration 9/13... 10838 ops/sec, 0.092ms latency
    Iteration 10/13... 10872 ops/sec, 0.091ms latency
    Iteration 11/13... 10904 ops/sec, 0.091ms latency
    Iteration 12/13... 10848 ops/sec, 0.092ms latency
    Iteration 13/13... 10955 ops/sec, 0.091ms latency
  Dragonfly (non-TLS-Predis): 10735.74¬±284.01 ops/sec (CV: 2.6%), 0.093¬±0.003ms latency, Quality: good
  Final keys in database: 61322
üîê Attempting TLS connection to Unknown at 127.0.0.1:6392 (Predis)
  Using custom port scheme: Redis=6390, KeyDB=6391, Dragonfly=6392, Valkey=6393
  Note: Predis uses 'tls' scheme and 'ssl' context array
  üì° Method 1: Predis 'tls' scheme with SSL context...
  üß™ Testing TLS connection with SET/GET commands...
PHP Warning:  fgets(): SSL operation failed with code 1. OpenSSL Error messages:
error:0A00045C:SSL routines::tlsv13 alert certificate required in /home/runner/work/redis-comparison-benchmarks/redis-comparison-benchmarks/tests/php/vendor/predis/predis/src/Connection/StreamConnection.php on line 313
  ‚ùå Predis 'tls' scheme failed: Error while reading line from the server. [tls://127.0.0.1:6392]
  üì° Method 2: Predis 'rediss' URI scheme...
PHP Warning:  fgets(): SSL operation failed with code 1. OpenSSL Error messages:
error:0A00045C:SSL routines::tlsv13 alert certificate required in /home/runner/work/redis-comparison-benchmarks/redis-comparison-benchmarks/tests/php/vendor/predis/predis/src/Connection/StreamConnection.php on line 313
  ‚ùå Predis 'rediss' URI failed: Error while reading line from the server. [rediss://127.0.0.1:6392]
  üì° Method 3: Predis TLS with localhost hostname...
PHP Warning:  fgets(): SSL operation failed with code 1. OpenSSL Error messages:
error:0A00045C:SSL routines::tlsv13 alert certificate required in /home/runner/work/redis-comparison-benchmarks/redis-comparison-benchmarks/tests/php/vendor/predis/predis/src/Connection/StreamConnection.php on line 313
  ‚ùå Predis localhost TLS failed: Error while reading line from the server. [tls://localhost:6392]
  ‚ùå All Predis TLS connection methods failed for Unknown at port 6392
  üìã Note: TLS connection failed likely due to server certificate configuration
  üîÑ With recent Docker config changes, TLS should now work properly
  üö´ Bypassing TLS test for Unknown to allow testing to continue
  ‚úÖ Non-TLS results remain valid and reliable for performance comparison
  ‚Üí TLS test skipped for Dragonfly due to Predis connection failure

Testing Valkey with Predis...
  Configuration: IO Threads: 2
  Running 13 iterations for Valkey (non-TLS-Predis)...
  Initial keys in database: 391694
  Flushing database before test...
  Database flushed in 0.09ms. Keys remaining: 0
    Iteration 1/13... 13841 ops/sec, 0.072ms latency
    Iteration 2/13... 14696 ops/sec, 0.068ms latency
    Iteration 3/13... 15164 ops/sec, 0.065ms latency
    Iteration 4/13... 15113 ops/sec, 0.066ms latency
    Iteration 5/13... 14911 ops/sec, 0.067ms latency
    Iteration 6/13... 15097 ops/sec, 0.066ms latency
    Iteration 7/13... 15119 ops/sec, 0.066ms latency
    Iteration 8/13... 15107 ops/sec, 0.066ms latency
    Iteration 9/13... 15334 ops/sec, 0.065ms latency
    Iteration 10/13... 15202 ops/sec, 0.065ms latency
    Iteration 11/13... 15213 ops/sec, 0.065ms latency
    Iteration 12/13... 15223 ops/sec, 0.065ms latency
    Iteration 13/13... 15257 ops/sec, 0.065ms latency
  Valkey (non-TLS-Predis): 15021.25¬±389.95 ops/sec (CV: 2.6%), 0.066¬±0.002ms latency, Quality: good
  Final keys in database: 61505
üîê Attempting TLS connection to Unknown at 127.0.0.1:6393 (Predis)
  Using custom port scheme: Redis=6390, KeyDB=6391, Dragonfly=6392, Valkey=6393
  Note: Predis uses 'tls' scheme and 'ssl' context array
  üì° Method 1: Predis 'tls' scheme with SSL context...
  üß™ Testing TLS connection with SET/GET commands...
  ‚úÖ TLS connection successful with Predis 'tls' scheme
  Running 13 iterations for Valkey (TLS-Predis)...
  Initial keys in database: 390409
  Flushing database before test...
  Database flushed in 0.15ms. Keys remaining: 0
    Iteration 1/13... 9750 ops/sec, 0.102ms latency
    Iteration 2/13... 10437 ops/sec, 0.095ms latency
    Iteration 3/13... 10516 ops/sec, 0.095ms latency
    Iteration 4/13... 10602 ops/sec, 0.094ms latency
    Iteration 5/13... 10853 ops/sec, 0.092ms latency
    Iteration 6/13... 10850 ops/sec, 0.092ms latency
    Iteration 7/13... 10886 ops/sec, 0.091ms latency
    Iteration 8/13... 10828 ops/sec, 0.092ms latency
    Iteration 9/13... 10766 ops/sec, 0.092ms latency
    Iteration 10/13... 10848 ops/sec, 0.092ms latency
    Iteration 11/13... 10868 ops/sec, 0.091ms latency
    Iteration 12/13... 10996 ops/sec, 0.090ms latency
    Iteration 13/13... 10900 ops/sec, 0.091ms latency
  Valkey (TLS-Predis): 10699.92¬±328.44 ops/sec (CV: 3.1%), 0.093¬±0.003ms latency, Quality: good
  Final keys in database: 61467

Enhanced Predis results saved:
  CSV: ./benchmarklogs-2t/wordpress_object_cache_test_predis_predis.csv
  JSON: ./benchmarklogs-2t/wordpress_object_cache_test_predis_predis.json
  Markdown: ./benchmarklogs-2t/wordpress_object_cache_test_predis_predis.md
  Raw Data: ./benchmarklogs-2t/wordpress_object_cache_test_predis_predis_raw.json
============================================================
Enhanced Predis test suite completed!
Total execution time: 2,779.28 seconds
Total tests run: 7
Statistical iterations per test: 13
Results saved to ./benchmarklogs-2t/
Redis implementation: Predis (pure PHP)

====================================================================================================
ENHANCED STATISTICAL PERFORMANCE SUMMARY (Predis)
Thread Variant: 2 | Iterations per test: 13
====================================================================================================
Rank Database                       Ops/sec   ¬±StdDev      CV%  Latency  Quality     95% CI     Reliable
----------------------------------------------------------------------------------------------------
#1  Valkey (Predis)              15021      390    2.6%  0.066ms üü°good    14,805-15,238      ‚úÖ
#2  KeyDB (Predis)               12730      382    3.0%  0.078ms üü°good    12,519-12,942      ‚úÖ
#3  Dragonfly (Predis)           10736      284    2.6%  0.093ms üü°good    10,578-10,893      ‚úÖ
#4  Valkey (TLS-Predis)          10700      328    3.1%  0.093ms üü°good    10,518-10,882      ‚úÖ
#5  Redis (Predis)               10422      277    2.7%  0.095ms üü°good    10,268-10,575      ‚úÖ
#6  KeyDB (TLS-Predis)            9629      266    2.8%  0.103ms üü°good     9,481-9,776      ‚úÖ
#7  Redis (TLS-Predis)            7968      253    3.2%  0.125ms üü°good     7,828-8,109      ‚úÖ
====================================================================================================
Implementation: Predis (Pure PHP Redis Client)
üìà Compare with phpredis results to see implementation trade-offs

============================================================
TLS vs NON-TLS PERFORMANCE COMPARISON (Predis)
Thread Variant: 2
============================================================
Redis      | Non-TLS:    10422¬±277  | TLS:     7968¬±253  | Impact: +23.5% *
KeyDB      | Non-TLS:    12730¬±382  | TLS:     9629¬±266  | Impact: +24.4% *
Dragonfly  | Non-TLS:    10736¬±284  | TLS:   FAILED | Impact: N/A
Valkey     | Non-TLS:    15021¬±390  | TLS:    10700¬±328  | Impact: +28.8% *
------------------------------------------------------------
* = Statistically significant difference (95% confidence)
Implementation: Predis (Pure PHP)
============================================================

================================================================================
STATISTICAL INSIGHTS (Predis)
Thread Variant: 2 | Iterations: 13
================================================================================
Measurement Quality Distribution:
  üü° Good      :  7 tests (100.0%)

Coefficient of Variation Analysis:
  Average CV: 2.8% (lower is better)
  Range: 2.6% - 3.2%
  üìä Good measurement consistency with Predis

Predis Implementation Notes:
  üì° Connection management: Automatic (no manual close required)
  üîí TLS handling: Enhanced SSL context support
  üîÑ Error recovery: Built-in retry logic with exponential backoff
  üìä Performance characteristics: Pure PHP (higher latency, more consistent)
================================================================================

================================================================================
PREDIS-SPECIFIC INSIGHTS
Thread Variant: 2 | Implementation: Predis (Pure PHP)
================================================================================
TLS Connection Reliability:
  ‚úÖ Predis TLS connections: 3/4 databases
  üìä All TLS connections established successfully
  üîí SSL context handling: Reliable (Predis manages SSL internally)

Predis Configuration Analysis:
  üîó Connection timeout: 5s
  üì° Read/write timeout: 5s
  üîÑ Connection retry attempts: 3
  ‚ö° TCP keepalive: Enabled
  üîó Persistent connections: Disabled

Performance Characteristics:
  üìà Average non-TLS performance: 12,227 ops/sec
  üîí Average TLS performance: 9,432 ops/sec
  üìä TLS overhead: 22.9%
  ‚ÑπÔ∏è  Note: 25-40% TLS overhead is normal for Redis over SSL

Predis Advantages:
  ‚úÖ Better TLS reliability compared to phpredis extension
  ‚úÖ Enhanced SSL context handling
  ‚úÖ No extension compilation dependencies
  ‚úÖ Consistent behavior across PHP versions
  ‚ö†Ô∏è  Trade-off: Lower raw performance due to pure PHP implementation
================================================================================

======================================================================
‚úÖ Predis WordPress Object Cache test completed successfully!
üìÅ Results saved to: ./benchmarklogs-2t
üìä Implementation: Predis (Pure PHP Redis Client)
üîí TLS Support: Enhanced reliability compared to phpredis

üìÑ Generated files:
  php_wordpress_test_phpredis.log (34.5KB)
  php_wordpress_test_predis.log (17KB)
  wordpress_object_cache_test_predis_predis.csv (1.6KB)
  wordpress_object_cache_test_predis_predis.json (87.4KB)
  wordpress_object_cache_test_predis_predis.md (2.6KB)
  wordpress_object_cache_test_predis_predis_raw.json (76.4KB)
