WordPress Object Cache Test with Predis - Configured Runner
============================================================
Implementation: Predis (Pure PHP Redis Client)
Enhanced TLS Support: Yes
Statistical Analysis: 13 iterations with confidence intervals

üìã Loading configuration from: tests/php/test_config_predis.php
‚úÖ Configuration loaded successfully

üìä Test Configuration:
  Implementation: Predis (Pure PHP)
  Duration per iteration: 30s
  Test iterations: 13
  Output directory: ./benchmarklogs-2t
  TLS testing: Enabled
  Flush before test: Yes
  Thread variant: 2
  Connection timeout: 5s
  Read/write timeout: 5s
  Connection retries: 3
  Persistent connections: No
  Thread configuration:
    redis_io_threads: 2 threads
    keydb_server_threads: 2 threads
    dragonfly_proactor_threads: 2 threads
    valkey_io_threads: 2 threads
  Database configurations:
    Redis: 127.0.0.1:6379 (TLS: 6390) (IO threads: 2)
    KeyDB: 127.0.0.1:6380 (TLS: 6391) (Server threads: 2)
    Dragonfly: 127.0.0.1:6381 (TLS: 6392) (Proactor threads: 2)
    Valkey: 127.0.0.1:6382 (TLS: 6393) (IO threads: 2)

======================================================================

üîç Checking Predis availability...
‚úÖ Predis library available

üöÄ Starting Predis WordPress Object Cache Test...

Starting WordPress Object Cache Test (Predis)...
Timestamp: 2025-06-10 09:22:24 UTC
Predis Version: unknown
PHP Version: 8.4.8
Enhanced Testing Configuration (Predis):
- Iterations per test: 13
- Iteration pause: 500ms
- Statistical analysis: Enabled
- Raw data logging: Enabled
- Connection timeout: 5s
- Read/write timeout: 5s
- Connection retry attempts: 3
- Persistent connections: Disabled
- TCP keepalive: Enabled
Thread Variant: 2
Thread Configuration:
  redis_io_threads: 2 threads
  keydb_server_threads: 2 threads
  dragonfly_proactor_threads: 2 threads
  valkey_io_threads: 2 threads
TLS Certificates: Found and validated (Predis-compatible)

Checking TLS readiness (Predis)...
  Redis: TLS port accessible ‚úì
  KeyDB: TLS port accessible ‚úì
  Dragonfly: TLS port accessible ‚úì
  Valkey: TLS port accessible ‚úì

Predis TLS testing will be attempted for: Redis, KeyDB, Dragonfly, Valkey
============================================================
Testing Redis with Predis...
  Configuration: IO Threads: 2
  Running 13 iterations for Redis (non-TLS-Predis)...
  Initial keys in database: 395079
  Flushing database before test...
  Database flushed in 231.30ms. Keys remaining: 0
    Iteration 1/13... 9464 ops/sec, 0.105ms latency
    Iteration 2/13... 10069 ops/sec, 0.099ms latency
    Iteration 3/13... 10327 ops/sec, 0.096ms latency
    Iteration 4/13... 10271 ops/sec, 0.097ms latency
    Iteration 5/13... 10381 ops/sec, 0.096ms latency
    Iteration 6/13... 10473 ops/sec, 0.095ms latency
    Iteration 7/13... 10463 ops/sec, 0.095ms latency
    Iteration 8/13... 10428 ops/sec, 0.095ms latency
    Iteration 9/13... 10436 ops/sec, 0.095ms latency
    Iteration 10/13... 10502 ops/sec, 0.095ms latency
    Iteration 11/13... 10431 ops/sec, 0.095ms latency
    Iteration 12/13... 10501 ops/sec, 0.095ms latency
    Iteration 13/13... 10572 ops/sec, 0.094ms latency
  Redis (non-TLS-Predis): 10332.26¬±290.08 ops/sec (CV: 2.8%), 0.096¬±0.003ms latency, Quality: good
  Final keys in database: 61467
üîê Attempting TLS connection to Redis at 127.0.0.1:6390 (Predis)
  Using custom port scheme: Redis=6390, KeyDB=6391, Dragonfly=6392, Valkey=6393
  Note: Predis uses 'tls' scheme and 'ssl' context array
  üì° Method 1: Predis 'tls' scheme with SSL context...
  üß™ Testing TLS connection with SET/GET commands...
  ‚úÖ TLS connection successful with Predis 'tls' scheme
  Running 13 iterations for Redis (TLS-Predis)...
  Initial keys in database: 394071
  Flushing database before test...
  Database flushed in 209.02ms. Keys remaining: 0
    Iteration 1/13... 7305 ops/sec, 0.136ms latency
    Iteration 2/13... 7697 ops/sec, 0.129ms latency
    Iteration 3/13... 7900 ops/sec, 0.126ms latency
    Iteration 4/13... 8053 ops/sec, 0.124ms latency
    Iteration 5/13... 8093 ops/sec, 0.123ms latency
    Iteration 6/13... 8075 ops/sec, 0.123ms latency
    Iteration 7/13... 8172 ops/sec, 0.122ms latency
    Iteration 8/13... 8193 ops/sec, 0.121ms latency
    Iteration 9/13... 8072 ops/sec, 0.123ms latency
    Iteration 10/13... 8166 ops/sec, 0.122ms latency
    Iteration 11/13... 8221 ops/sec, 0.121ms latency
    Iteration 12/13... 8071 ops/sec, 0.123ms latency
    Iteration 13/13... 8136 ops/sec, 0.122ms latency
  Redis (TLS-Predis): 8011.81¬±253.62 ops/sec (CV: 3.2%), 0.124¬±0.004ms latency, Quality: good
  Final keys in database: 61404

Testing KeyDB with Predis...
  Configuration: Server Threads: 2
  Running 13 iterations for KeyDB (non-TLS-Predis)...
  Initial keys in database: 393524
  Flushing database before test...
  Database flushed in 232.23ms. Keys remaining: 0
    Iteration 1/13... 11637 ops/sec, 0.085ms latency
    Iteration 2/13... 12310 ops/sec, 0.081ms latency
    Iteration 3/13... 12617 ops/sec, 0.079ms latency
    Iteration 4/13... 12741 ops/sec, 0.078ms latency
    Iteration 5/13... 12698 ops/sec, 0.078ms latency
    Iteration 6/13... 12811 ops/sec, 0.078ms latency
    Iteration 7/13... 12778 ops/sec, 0.078ms latency
    Iteration 8/13... 12648 ops/sec, 0.079ms latency
    Iteration 9/13... 12671 ops/sec, 0.078ms latency
    Iteration 10/13... 12722 ops/sec, 0.078ms latency
    Iteration 11/13... 12501 ops/sec, 0.079ms latency
    Iteration 12/13... 12559 ops/sec, 0.079ms latency
    Iteration 13/13... 12708 ops/sec, 0.078ms latency
  KeyDB (non-TLS-Predis): 12569.31¬±309.59 ops/sec (CV: 2.5%), 0.079¬±0.002ms latency, Quality: good
  Final keys in database: 61488
üîê Attempting TLS connection to KeyDB at 127.0.0.1:6391 (Predis)
  Using custom port scheme: Redis=6390, KeyDB=6391, Dragonfly=6392, Valkey=6393
  Note: Predis uses 'tls' scheme and 'ssl' context array
  üì° Method 1: Predis 'tls' scheme with SSL context...
  üß™ Testing TLS connection with SET/GET commands...
  ‚úÖ TLS connection successful with Predis 'tls' scheme
  Running 13 iterations for KeyDB (TLS-Predis)...
  Initial keys in database: 393500
  Flushing database before test...
  Database flushed in 248.65ms. Keys remaining: 0
    Iteration 1/13... 8793 ops/sec, 0.113ms latency
    Iteration 2/13... 9355 ops/sec, 0.106ms latency
    Iteration 3/13... 9595 ops/sec, 0.104ms latency
    Iteration 4/13... 9779 ops/sec, 0.102ms latency
    Iteration 5/13... 9797 ops/sec, 0.102ms latency
    Iteration 6/13... 9813 ops/sec, 0.101ms latency
    Iteration 7/13... 9819 ops/sec, 0.101ms latency
    Iteration 8/13... 9816 ops/sec, 0.101ms latency
    Iteration 9/13... 9757 ops/sec, 0.102ms latency
    Iteration 10/13... 9849 ops/sec, 0.101ms latency
    Iteration 11/13... 9859 ops/sec, 0.101ms latency
    Iteration 12/13... 9952 ops/sec, 0.100ms latency
    Iteration 13/13... 9895 ops/sec, 0.101ms latency
  KeyDB (TLS-Predis): 9698.26¬±311.11 ops/sec (CV: 3.2%), 0.103¬±0.004ms latency, Quality: good
  Final keys in database: 61450

Testing Dragonfly with Predis...
  Configuration: Proactor Threads: 2
  Running 13 iterations for Dragonfly (non-TLS-Predis)...
  Initial keys in database: 390230
  Flushing database before test...
  Database flushed in 19.47ms. Keys remaining: 0
    Iteration 1/13... 10537 ops/sec, 0.094ms latency
    Iteration 2/13... 11224 ops/sec, 0.089ms latency
    Iteration 3/13... 11514 ops/sec, 0.086ms latency
    Iteration 4/13... 11547 ops/sec, 0.086ms latency
    Iteration 5/13... 11674 ops/sec, 0.085ms latency
    Iteration 6/13... 11604 ops/sec, 0.086ms latency
    Iteration 7/13... 11727 ops/sec, 0.085ms latency
    Iteration 8/13... 11658 ops/sec, 0.085ms latency
    Iteration 9/13... 11750 ops/sec, 0.085ms latency
    Iteration 10/13... 11667 ops/sec, 0.085ms latency
    Iteration 11/13... 11651 ops/sec, 0.085ms latency
    Iteration 12/13... 11702 ops/sec, 0.085ms latency
    Iteration 13/13... 11768 ops/sec, 0.085ms latency
  Dragonfly (non-TLS-Predis): 11540.21¬±332.69 ops/sec (CV: 2.9%), 0.086¬±0.003ms latency, Quality: good
  Final keys in database: 61344
üîê Attempting TLS connection to Dragonfly at 127.0.0.1:6392 (Predis)
  Using custom port scheme: Redis=6390, KeyDB=6391, Dragonfly=6392, Valkey=6393
  Note: Predis uses 'tls' scheme and 'ssl' context array
  üì° Method 1: Predis 'tls' scheme with SSL context...
  üîê Adding Dragonfly authentication to connection parameters...
  üß™ Testing TLS connection with SET/GET commands...
  ‚úÖ TLS connection successful with Predis 'tls' scheme
  Running 13 iterations for Dragonfly (TLS-Predis)...
  Initial keys in database: 388273
  Flushing database before test...
  Database flushed in 26.85ms. Keys remaining: 0
    Iteration 1/13... 7837 ops/sec, 0.127ms latency
    Iteration 2/13... 8313 ops/sec, 0.120ms latency
    Iteration 3/13... 8474 ops/sec, 0.117ms latency
    Iteration 4/13... 8432 ops/sec, 0.118ms latency
    Iteration 5/13... 8625 ops/sec, 0.115ms latency
    Iteration 6/13... 8575 ops/sec, 0.116ms latency
    Iteration 7/13... 8828 ops/sec, 0.113ms latency
    Iteration 8/13... 8763 ops/sec, 0.114ms latency
    Iteration 9/13... 8746 ops/sec, 0.114ms latency
    Iteration 10/13... 8723 ops/sec, 0.114ms latency
    Iteration 11/13... 8616 ops/sec, 0.116ms latency
    Iteration 12/13... 8698 ops/sec, 0.114ms latency
    Iteration 13/13... 8810 ops/sec, 0.113ms latency
  Dragonfly (TLS-Predis): 8572.31¬±269.05 ops/sec (CV: 3.1%), 0.116¬±0.004ms latency, Quality: good
  Final keys in database: 61296

Testing Valkey with Predis...
  Configuration: IO Threads: 2
  Running 13 iterations for Valkey (non-TLS-Predis)...
  Initial keys in database: 389846
  Flushing database before test...
  Database flushed in 0.13ms. Keys remaining: 0
    Iteration 1/13... 13546 ops/sec, 0.073ms latency
    Iteration 2/13... 14459 ops/sec, 0.069ms latency
    Iteration 3/13... 14668 ops/sec, 0.068ms latency
    Iteration 4/13... 14875 ops/sec, 0.067ms latency
    Iteration 5/13... 14702 ops/sec, 0.068ms latency
    Iteration 6/13... 14948 ops/sec, 0.066ms latency
    Iteration 7/13... 14884 ops/sec, 0.067ms latency
    Iteration 8/13... 14922 ops/sec, 0.067ms latency
    Iteration 9/13... 14861 ops/sec, 0.067ms latency
    Iteration 10/13... 14616 ops/sec, 0.068ms latency
    Iteration 11/13... 14837 ops/sec, 0.067ms latency
    Iteration 12/13... 14713 ops/sec, 0.068ms latency
    Iteration 13/13... 14910 ops/sec, 0.067ms latency
  Valkey (non-TLS-Predis): 14687.75¬±372.01 ops/sec (CV: 2.5%), 0.068¬±0.002ms latency, Quality: good
  Final keys in database: 61507
üîê Attempting TLS connection to Valkey at 127.0.0.1:6393 (Predis)
  Using custom port scheme: Redis=6390, KeyDB=6391, Dragonfly=6392, Valkey=6393
  Note: Predis uses 'tls' scheme and 'ssl' context array
  üì° Method 1: Predis 'tls' scheme with SSL context...
  üß™ Testing TLS connection with SET/GET commands...
  ‚úÖ TLS connection successful with Predis 'tls' scheme
  Running 13 iterations for Valkey (TLS-Predis)...
  Initial keys in database: 389343
  Flushing database before test...
  Database flushed in 0.13ms. Keys remaining: 0
    Iteration 1/13... 9674 ops/sec, 0.103ms latency
    Iteration 2/13... 10410 ops/sec, 0.096ms latency
    Iteration 3/13... 10534 ops/sec, 0.094ms latency
    Iteration 4/13... 10575 ops/sec, 0.094ms latency
    Iteration 5/13... 10641 ops/sec, 0.093ms latency
    Iteration 6/13... 10568 ops/sec, 0.094ms latency
    Iteration 7/13... 10684 ops/sec, 0.093ms latency
    Iteration 8/13... 10686 ops/sec, 0.093ms latency
    Iteration 9/13... 10798 ops/sec, 0.092ms latency
    Iteration 10/13... 10702 ops/sec, 0.093ms latency
    Iteration 11/13... 10577 ops/sec, 0.094ms latency
    Iteration 12/13... 10682 ops/sec, 0.093ms latency
    Iteration 13/13... 10842 ops/sec, 0.092ms latency
  Valkey (TLS-Predis): 10567.09¬±291.25 ops/sec (CV: 2.8%), 0.094¬±0.003ms latency, Quality: good
  Final keys in database: 61464

Enhanced Predis results saved:
  CSV: ./benchmarklogs-2t/wordpress_object_cache_test_predis_predis.csv
  JSON: ./benchmarklogs-2t/wordpress_object_cache_test_predis_predis.json
  Markdown: ./benchmarklogs-2t/wordpress_object_cache_test_predis_predis.md
  Raw Data: ./benchmarklogs-2t/wordpress_object_cache_test_predis_predis_raw.json
============================================================
Enhanced Predis test suite completed!
Total execution time: 3,175.80 seconds
Total tests run: 8
Statistical iterations per test: 13
Results saved to ./benchmarklogs-2t/
Redis implementation: Predis (pure PHP)

====================================================================================================
ENHANCED STATISTICAL PERFORMANCE SUMMARY (Predis)
Thread Variant: 2 | Iterations per test: 13
====================================================================================================
Rank Database                       Ops/sec   ¬±StdDev      CV%  Latency  Quality     95% CI     Reliable
----------------------------------------------------------------------------------------------------
#1  Valkey (Predis)              14688      372    2.5%  0.068ms üü°good    14,481-14,894      ‚úÖ
#2  KeyDB (Predis)               12569      310    2.5%  0.079ms üü°good    12,398-12,741      ‚úÖ
#3  Dragonfly (Predis)           11540      333    2.9%  0.086ms üü°good    11,356-11,725      ‚úÖ
#4  Valkey (TLS-Predis)          10567      291    2.8%  0.094ms üü°good    10,406-10,729      ‚úÖ
#5  Redis (Predis)               10332      290    2.8%  0.096ms üü°good    10,171-10,493      ‚úÖ
#6  KeyDB (TLS-Predis)            9698      311    3.2%  0.103ms üü°good     9,526-9,871      ‚úÖ
#7  Dragonfly (TLS-Predis)        8572      269    3.1%  0.116ms üü°good     8,423-8,722      ‚úÖ
#8  Redis (TLS-Predis)            8012      254    3.2%  0.124ms üü°good     7,871-8,152      ‚úÖ
====================================================================================================
Implementation: Predis (Pure PHP Redis Client)
üìà Compare with phpredis results to see implementation trade-offs

============================================================
TLS vs NON-TLS PERFORMANCE COMPARISON (Predis)
Thread Variant: 2
============================================================
Redis      | Non-TLS:    10332¬±290  | TLS:     8012¬±254  | Impact: +22.5% *
KeyDB      | Non-TLS:    12569¬±310  | TLS:     9698¬±311  | Impact: +22.8% *
Dragonfly  | Non-TLS:    11540¬±333  | TLS:     8572¬±269  | Impact: +25.7% *
Valkey     | Non-TLS:    14688¬±372  | TLS:    10567¬±291  | Impact: +28.1% *
------------------------------------------------------------
* = Statistically significant difference (95% confidence)
Implementation: Predis (Pure PHP)
============================================================

================================================================================
STATISTICAL INSIGHTS (Predis)
Thread Variant: 2 | Iterations: 13
================================================================================
Measurement Quality Distribution:
  üü° Good      :  8 tests (100.0%)

Coefficient of Variation Analysis:
  Average CV: 2.9% (lower is better)
  Range: 2.5% - 3.2%
  üìä Good measurement consistency with Predis

Predis Implementation Notes:
  üì° Connection management: Automatic (no manual close required)
  üîí TLS handling: Enhanced SSL context support
  üîÑ Error recovery: Built-in retry logic with exponential backoff
  üìä Performance characteristics: Pure PHP (higher latency, more consistent)
================================================================================

================================================================================
PREDIS-SPECIFIC INSIGHTS
Thread Variant: 2 | Implementation: Predis (Pure PHP)
================================================================================
TLS Connection Reliability:
  ‚úÖ Predis TLS connections: 4/4 databases
  üìä All TLS connections established successfully
  üîí SSL context handling: Reliable (Predis manages SSL internally)

Predis Configuration Analysis:
  üîó Connection timeout: 5s
  üì° Read/write timeout: 5s
  üîÑ Connection retry attempts: 3
  ‚ö° TCP keepalive: Enabled
  üîó Persistent connections: Disabled

Performance Characteristics:
  üìà Average non-TLS performance: 12,282 ops/sec
  üîí Average TLS performance: 9,212 ops/sec
  üìä TLS overhead: 25.0%
  ‚ÑπÔ∏è  Note: 25-40% TLS overhead is normal for Redis over SSL

Predis Advantages:
  ‚úÖ Better TLS reliability compared to phpredis extension
  ‚úÖ Enhanced SSL context handling
  ‚úÖ No extension compilation dependencies
  ‚úÖ Consistent behavior across PHP versions
  ‚ö†Ô∏è  Trade-off: Lower raw performance due to pure PHP implementation
================================================================================

======================================================================
‚úÖ Predis WordPress Object Cache test completed successfully!
üìÅ Results saved to: ./benchmarklogs-2t
üìä Implementation: Predis (Pure PHP Redis Client)
üîí TLS Support: Enhanced reliability compared to phpredis

üìÑ Generated files:
  php_wordpress_test_phpredis.log (32KB)
  php_wordpress_test_predis.log (16.8KB)
  wordpress_object_cache_test_predis_predis.csv (1.8KB)
  wordpress_object_cache_test_predis_predis.json (99.6KB)
  wordpress_object_cache_test_predis_predis.md (2.7KB)
  wordpress_object_cache_test_predis_predis_raw.json (87.2KB)
