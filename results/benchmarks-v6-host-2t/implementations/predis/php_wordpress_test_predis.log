WordPress Object Cache Test with Predis - Configured Runner
============================================================
Implementation: Predis (Pure PHP Redis Client)
Enhanced TLS Support: Yes
Statistical Analysis: 13 iterations with confidence intervals

üìã Loading configuration from: tests/php/test_config_predis.php
‚úÖ Configuration loaded successfully

üìä Test Configuration:
  Implementation: Predis (Pure PHP)
  Duration per iteration: 30s
  Test iterations: 13
  Output directory: ./benchmarklogs-2t
  TLS testing: Enabled
  Flush before test: Yes
  Thread variant: 2
  Connection timeout: 5s
  Read/write timeout: 5s
  Connection retries: 3
  Persistent connections: No
  Thread configuration:
    redis_io_threads: 2 threads
    keydb_server_threads: 2 threads
    dragonfly_proactor_threads: 2 threads
    valkey_io_threads: 2 threads
  Database configurations:
    Redis: 127.0.0.1:6379 (TLS: 6390) (IO threads: 2)
    KeyDB: 127.0.0.1:6380 (TLS: 6391) (Server threads: 2)
    Dragonfly: 127.0.0.1:6381 (TLS: 6392) (Proactor threads: 2)
    Valkey: 127.0.0.1:6382 (TLS: 6393) (IO threads: 2)

======================================================================

üîç Checking Predis availability...
‚úÖ Predis library available

üöÄ Starting Predis WordPress Object Cache Test...

Starting WordPress Object Cache Test (Predis)...
Timestamp: 2025-06-09 18:10:50 UTC
Predis Version: unknown
PHP Version: 8.4.8
Enhanced Testing Configuration (Predis):
- Iterations per test: 13
- Iteration pause: 500ms
- Statistical analysis: Enabled
- Raw data logging: Enabled
- Connection timeout: 5s
- Read/write timeout: 5s
- Connection retry attempts: 3
- Persistent connections: Disabled
- TCP keepalive: Enabled
Thread Variant: 2
Thread Configuration:
  redis_io_threads: 2 threads
  keydb_server_threads: 2 threads
  dragonfly_proactor_threads: 2 threads
  valkey_io_threads: 2 threads
TLS Certificates: Found and validated (Predis-compatible)

Checking TLS readiness (Predis)...
  Redis: TLS port accessible ‚úì
  KeyDB: TLS port accessible ‚úì
  Dragonfly: TLS port accessible ‚úì
  Valkey: TLS port accessible ‚úì

Predis TLS testing will be attempted for: Redis, KeyDB, Dragonfly, Valkey
============================================================
Testing Redis with Predis...
  Configuration: IO Threads: 2
  Running 13 iterations for Redis (non-TLS-Predis)...
  Initial keys in database: 394713
  Flushing database before test...
  Database flushed in 225.06ms. Keys remaining: 0
    Iteration 1/13... 9438 ops/sec, 0.105ms latency
    Iteration 2/13... 10049 ops/sec, 0.099ms latency
    Iteration 3/13... 10299 ops/sec, 0.097ms latency
    Iteration 4/13... 10316 ops/sec, 0.096ms latency
    Iteration 5/13... 10390 ops/sec, 0.096ms latency
    Iteration 6/13... 10422 ops/sec, 0.095ms latency
    Iteration 7/13... 10387 ops/sec, 0.096ms latency
    Iteration 8/13... 10426 ops/sec, 0.095ms latency
    Iteration 9/13... 10434 ops/sec, 0.095ms latency
    Iteration 10/13... 10436 ops/sec, 0.095ms latency
    Iteration 11/13... 10462 ops/sec, 0.095ms latency
    Iteration 12/13... 10386 ops/sec, 0.096ms latency
    Iteration 13/13... 10399 ops/sec, 0.096ms latency
  Redis (non-TLS-Predis): 10295.64¬±278.86 ops/sec (CV: 2.7%), 0.097¬±0.003ms latency, Quality: good
  Final keys in database: 61479
üîê Attempting TLS connection to Unknown at 127.0.0.1:6390 (Predis)
  Using custom port scheme: Redis=6390, KeyDB=6391, Dragonfly=6392, Valkey=6393
  Note: Predis uses 'tls' scheme and 'ssl' context array
  üì° Method 1: Predis 'tls' scheme with SSL context...
  üß™ Testing TLS connection with SET/GET commands...
  ‚úÖ TLS connection successful with Predis 'tls' scheme
  Running 13 iterations for Redis (TLS-Predis)...
  Initial keys in database: 394660
  Flushing database before test...
  Database flushed in 234.54ms. Keys remaining: 0
    Iteration 1/13... 7136 ops/sec, 0.140ms latency
    Iteration 2/13... 7553 ops/sec, 0.132ms latency
    Iteration 3/13... 7785 ops/sec, 0.128ms latency
    Iteration 4/13... 7815 ops/sec, 0.127ms latency
    Iteration 5/13... 7823 ops/sec, 0.127ms latency
    Iteration 6/13... 7920 ops/sec, 0.126ms latency
    Iteration 7/13... 7887 ops/sec, 0.126ms latency
    Iteration 8/13... 7938 ops/sec, 0.125ms latency
    Iteration 9/13... 7930 ops/sec, 0.126ms latency
    Iteration 10/13... 7984 ops/sec, 0.125ms latency
    Iteration 11/13... 7967 ops/sec, 0.125ms latency
    Iteration 12/13... 7945 ops/sec, 0.125ms latency
    Iteration 13/13... 7958 ops/sec, 0.125ms latency
  Redis (TLS-Predis): 7818.53¬±235.27 ops/sec (CV: 3.0%), 0.127¬±0.004ms latency, Quality: good
  Final keys in database: 61396

Testing KeyDB with Predis...
  Configuration: Server Threads: 2
  Running 13 iterations for KeyDB (non-TLS-Predis)...
  Initial keys in database: 394694
  Flushing database before test...
  Database flushed in 217.92ms. Keys remaining: 0
    Iteration 1/13... 11443 ops/sec, 0.087ms latency
    Iteration 2/13... 12236 ops/sec, 0.081ms latency
    Iteration 3/13... 12505 ops/sec, 0.079ms latency
    Iteration 4/13... 12555 ops/sec, 0.079ms latency
    Iteration 5/13... 12637 ops/sec, 0.079ms latency
    Iteration 6/13... 12599 ops/sec, 0.079ms latency
    Iteration 7/13... 12636 ops/sec, 0.079ms latency
    Iteration 8/13... 12655 ops/sec, 0.078ms latency
    Iteration 9/13... 12757 ops/sec, 0.078ms latency
    Iteration 10/13... 12717 ops/sec, 0.078ms latency
    Iteration 11/13... 12726 ops/sec, 0.078ms latency
    Iteration 12/13... 12673 ops/sec, 0.078ms latency
    Iteration 13/13... 12573 ops/sec, 0.079ms latency
  KeyDB (non-TLS-Predis): 12516.20¬±348.42 ops/sec (CV: 2.8%), 0.079¬±0.002ms latency, Quality: good
  Final keys in database: 61497
üîê Attempting TLS connection to Unknown at 127.0.0.1:6391 (Predis)
  Using custom port scheme: Redis=6390, KeyDB=6391, Dragonfly=6392, Valkey=6393
  Note: Predis uses 'tls' scheme and 'ssl' context array
  üì° Method 1: Predis 'tls' scheme with SSL context...
  üß™ Testing TLS connection with SET/GET commands...
  ‚úÖ TLS connection successful with Predis 'tls' scheme
  Running 13 iterations for KeyDB (TLS-Predis)...
  Initial keys in database: 393626
  Flushing database before test...
  Database flushed in 216.44ms. Keys remaining: 0
    Iteration 1/13... 8622 ops/sec, 0.115ms latency
    Iteration 2/13... 9214 ops/sec, 0.108ms latency
    Iteration 3/13... 9423 ops/sec, 0.106ms latency
    Iteration 4/13... 9546 ops/sec, 0.104ms latency
    Iteration 5/13... 9590 ops/sec, 0.104ms latency
    Iteration 6/13... 9631 ops/sec, 0.103ms latency
    Iteration 7/13... 9603 ops/sec, 0.104ms latency
    Iteration 8/13... 9644 ops/sec, 0.103ms latency
    Iteration 9/13... 9646 ops/sec, 0.103ms latency
    Iteration 10/13... 9518 ops/sec, 0.104ms latency
    Iteration 11/13... 9623 ops/sec, 0.103ms latency
    Iteration 12/13... 9600 ops/sec, 0.104ms latency
    Iteration 13/13... 9615 ops/sec, 0.103ms latency
  KeyDB (TLS-Predis): 9482.71¬±284.74 ops/sec (CV: 3.0%), 0.105¬±0.003ms latency, Quality: good
  Final keys in database: 61440

Testing Dragonfly with Predis...
  Configuration: Proactor Threads: 2
  Running 13 iterations for Dragonfly (non-TLS-Predis)...
  Initial keys in database: 390010
  Flushing database before test...
  Database flushed in 25.69ms. Keys remaining: 0
    Iteration 1/13... 9625 ops/sec, 0.103ms latency
    Iteration 2/13... 10291 ops/sec, 0.097ms latency
    Iteration 3/13... 10309 ops/sec, 0.096ms latency
    Iteration 4/13... 10476 ops/sec, 0.095ms latency
    Iteration 5/13... 10484 ops/sec, 0.095ms latency
    Iteration 6/13... 10518 ops/sec, 0.094ms latency
    Iteration 7/13... 10572 ops/sec, 0.094ms latency
    Iteration 8/13... 10548 ops/sec, 0.094ms latency
    Iteration 9/13... 10502 ops/sec, 0.095ms latency
    Iteration 10/13... 10731 ops/sec, 0.093ms latency
    Iteration 11/13... 10615 ops/sec, 0.094ms latency
    Iteration 12/13... 10635 ops/sec, 0.093ms latency
    Iteration 13/13... 10487 ops/sec, 0.095ms latency
  Dragonfly (non-TLS-Predis): 10445.57¬±274.13 ops/sec (CV: 2.6%), 0.095¬±0.003ms latency, Quality: good
  Final keys in database: 61292
üîê Attempting TLS connection to Unknown at 127.0.0.1:6392 (Predis)
  Using custom port scheme: Redis=6390, KeyDB=6391, Dragonfly=6392, Valkey=6393
  Note: Predis uses 'tls' scheme and 'ssl' context array
  üì° Method 1: Predis 'tls' scheme with SSL context...
  üß™ Testing TLS connection with SET/GET commands...
  ‚ùå Predis 'tls' scheme failed: NOAUTH Authentication required.
  üì° Method 2: Predis 'rediss' URI scheme...
  ‚ùå Predis 'rediss' URI failed: NOAUTH Authentication required.
  üì° Method 3: Predis TLS with localhost hostname...
  ‚ùå Predis localhost TLS failed: NOAUTH Authentication required.
  ‚ùå All Predis TLS connection methods failed for Unknown at port 6392
  üìã Note: TLS connection failed likely due to server certificate configuration
  üîÑ With recent Docker config changes, TLS should now work properly
  üö´ Bypassing TLS test for Unknown to allow testing to continue
  ‚úÖ Non-TLS results remain valid and reliable for performance comparison
  ‚Üí TLS test skipped for Dragonfly due to Predis connection failure

Testing Valkey with Predis...
  Configuration: IO Threads: 2
  Running 13 iterations for Valkey (non-TLS-Predis)...
  Initial keys in database: 391655
  Flushing database before test...
  Database flushed in 0.10ms. Keys remaining: 0
    Iteration 1/13... 13203 ops/sec, 0.075ms latency
    Iteration 2/13... 14051 ops/sec, 0.071ms latency
    Iteration 3/13... 14501 ops/sec, 0.068ms latency
    Iteration 4/13... 14546 ops/sec, 0.068ms latency
    Iteration 5/13... 14407 ops/sec, 0.069ms latency
    Iteration 6/13... 14469 ops/sec, 0.069ms latency
    Iteration 7/13... 14443 ops/sec, 0.069ms latency
    Iteration 8/13... 14335 ops/sec, 0.069ms latency
    Iteration 9/13... 14807 ops/sec, 0.067ms latency
    Iteration 10/13... 14600 ops/sec, 0.068ms latency
    Iteration 11/13... 14502 ops/sec, 0.068ms latency
    Iteration 12/13... 14542 ops/sec, 0.068ms latency
    Iteration 13/13... 14564 ops/sec, 0.068ms latency
  Valkey (non-TLS-Predis): 14382.28¬±393.16 ops/sec (CV: 2.7%), 0.069¬±0.002ms latency, Quality: good
  Final keys in database: 61512
üîê Attempting TLS connection to Unknown at 127.0.0.1:6393 (Predis)
  Using custom port scheme: Redis=6390, KeyDB=6391, Dragonfly=6392, Valkey=6393
  Note: Predis uses 'tls' scheme and 'ssl' context array
  üì° Method 1: Predis 'tls' scheme with SSL context...
  üß™ Testing TLS connection with SET/GET commands...
  ‚úÖ TLS connection successful with Predis 'tls' scheme
  Running 13 iterations for Valkey (TLS-Predis)...
  Initial keys in database: 391750
  Flushing database before test...
  Database flushed in 0.14ms. Keys remaining: 0
    Iteration 1/13... 9507 ops/sec, 0.105ms latency
    Iteration 2/13... 10094 ops/sec, 0.098ms latency
    Iteration 3/13... 10320 ops/sec, 0.096ms latency
    Iteration 4/13... 10319 ops/sec, 0.096ms latency
    Iteration 5/13... 10521 ops/sec, 0.094ms latency
    Iteration 6/13... 10477 ops/sec, 0.095ms latency
    Iteration 7/13... 10519 ops/sec, 0.094ms latency
    Iteration 8/13... 10544 ops/sec, 0.094ms latency
    Iteration 9/13... 10587 ops/sec, 0.094ms latency
    Iteration 10/13... 10523 ops/sec, 0.094ms latency
    Iteration 11/13... 10556 ops/sec, 0.094ms latency
    Iteration 12/13... 10503 ops/sec, 0.095ms latency
    Iteration 13/13... 10565 ops/sec, 0.094ms latency
  Valkey (TLS-Predis): 10387.23¬±298.49 ops/sec (CV: 2.9%), 0.096¬±0.003ms latency, Quality: good
  Final keys in database: 61469

Enhanced Predis results saved:
  CSV: ./benchmarklogs-2t/wordpress_object_cache_test_predis_predis.csv
  JSON: ./benchmarklogs-2t/wordpress_object_cache_test_predis_predis.json
  Markdown: ./benchmarklogs-2t/wordpress_object_cache_test_predis_predis.md
  Raw Data: ./benchmarklogs-2t/wordpress_object_cache_test_predis_predis_raw.json
============================================================
Enhanced Predis test suite completed!
Total execution time: 2,778.90 seconds
Total tests run: 7
Statistical iterations per test: 13
Results saved to ./benchmarklogs-2t/
Redis implementation: Predis (pure PHP)

====================================================================================================
ENHANCED STATISTICAL PERFORMANCE SUMMARY (Predis)
Thread Variant: 2 | Iterations per test: 13
====================================================================================================
Rank Database                       Ops/sec   ¬±StdDev      CV%  Latency  Quality     95% CI     Reliable
----------------------------------------------------------------------------------------------------
#1  Valkey (Predis)              14382      393    2.7%  0.069ms üü°good    14,164-14,600      ‚úÖ
#2  KeyDB (Predis)               12516      348    2.8%  0.079ms üü°good    12,323-12,709      ‚úÖ
#3  Dragonfly (Predis)           10446      274    2.6%  0.095ms üü°good    10,294-10,598      ‚úÖ
#4  Valkey (TLS-Predis)          10387      298    2.9%  0.096ms üü°good    10,222-10,553      ‚úÖ
#5  Redis (Predis)               10296      279    2.7%  0.097ms üü°good    10,141-10,450      ‚úÖ
#6  KeyDB (TLS-Predis)            9483      285    3.0%  0.105ms üü°good     9,325-9,641      ‚úÖ
#7  Redis (TLS-Predis)            7819      235    3.0%  0.127ms üü°good     7,688-7,949      ‚úÖ
====================================================================================================
Implementation: Predis (Pure PHP Redis Client)
üìà Compare with phpredis results to see implementation trade-offs

============================================================
TLS vs NON-TLS PERFORMANCE COMPARISON (Predis)
Thread Variant: 2
============================================================
Redis      | Non-TLS:    10296¬±279  | TLS:     7819¬±235  | Impact: +24.1% *
KeyDB      | Non-TLS:    12516¬±348  | TLS:     9483¬±285  | Impact: +24.2% *
Dragonfly  | Non-TLS:    10446¬±274  | TLS:   FAILED | Impact: N/A
Valkey     | Non-TLS:    14382¬±393  | TLS:    10387¬±298  | Impact: +27.8% *
------------------------------------------------------------
* = Statistically significant difference (95% confidence)
Implementation: Predis (Pure PHP)
============================================================

================================================================================
STATISTICAL INSIGHTS (Predis)
Thread Variant: 2 | Iterations: 13
================================================================================
Measurement Quality Distribution:
  üü° Good      :  7 tests (100.0%)

Coefficient of Variation Analysis:
  Average CV: 2.8% (lower is better)
  Range: 2.6% - 3.0%
  üìä Good measurement consistency with Predis

Predis Implementation Notes:
  üì° Connection management: Automatic (no manual close required)
  üîí TLS handling: Enhanced SSL context support
  üîÑ Error recovery: Built-in retry logic with exponential backoff
  üìä Performance characteristics: Pure PHP (higher latency, more consistent)
================================================================================

================================================================================
PREDIS-SPECIFIC INSIGHTS
Thread Variant: 2 | Implementation: Predis (Pure PHP)
================================================================================
TLS Connection Reliability:
  ‚úÖ Predis TLS connections: 3/4 databases
  üìä All TLS connections established successfully
  üîí SSL context handling: Reliable (Predis manages SSL internally)

Predis Configuration Analysis:
  üîó Connection timeout: 5s
  üì° Read/write timeout: 5s
  üîÑ Connection retry attempts: 3
  ‚ö° TCP keepalive: Enabled
  üîó Persistent connections: Disabled

Performance Characteristics:
  üìà Average non-TLS performance: 11,910 ops/sec
  üîí Average TLS performance: 9,229 ops/sec
  üìä TLS overhead: 22.5%
  ‚ÑπÔ∏è  Note: 25-40% TLS overhead is normal for Redis over SSL

Predis Advantages:
  ‚úÖ Better TLS reliability compared to phpredis extension
  ‚úÖ Enhanced SSL context handling
  ‚úÖ No extension compilation dependencies
  ‚úÖ Consistent behavior across PHP versions
  ‚ö†Ô∏è  Trade-off: Lower raw performance due to pure PHP implementation
================================================================================

======================================================================
‚úÖ Predis WordPress Object Cache test completed successfully!
üìÅ Results saved to: ./benchmarklogs-2t
üìä Implementation: Predis (Pure PHP Redis Client)
üîí TLS Support: Enhanced reliability compared to phpredis

üìÑ Generated files:
  php_wordpress_test_phpredis.log (31.1KB)
  php_wordpress_test_predis.log (16.3KB)
  wordpress_object_cache_test_predis_predis.csv (1.6KB)
  wordpress_object_cache_test_predis_predis.json (87.4KB)
  wordpress_object_cache_test_predis_predis.md (2.6KB)
  wordpress_object_cache_test_predis_predis_raw.json (76.4KB)
