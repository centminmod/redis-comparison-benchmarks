WordPress Object Cache Test with Predis - Configured Runner
============================================================
Implementation: Predis (Pure PHP Redis Client)
Enhanced TLS Support: Yes
Statistical Analysis: 13 iterations with confidence intervals

üìã Loading configuration from: tests/php/test_config_predis.php
‚úÖ Configuration loaded successfully

üìä Test Configuration:
  Implementation: Predis (Pure PHP)
  Duration per iteration: 30s
  Test iterations: 13
  Output directory: ./benchmarklogs-2t
  TLS testing: Enabled
  Flush before test: Yes
  Thread variant: 2
  Connection timeout: 5s
  Read/write timeout: 5s
  Connection retries: 3
  Persistent connections: No
  Thread configuration:
    redis_io_threads: 2 threads
    keydb_server_threads: 2 threads
    dragonfly_proactor_threads: 2 threads
    valkey_io_threads: 2 threads
  Database configurations:
    Redis: 127.0.0.1:6379 (TLS: 6390) (IO threads: 2)
    KeyDB: 127.0.0.1:6380 (TLS: 6391) (Server threads: 2)
    Dragonfly: 127.0.0.1:6381 (TLS: 6392) (Proactor threads: 2)
    Valkey: 127.0.0.1:6382 (TLS: 6393) (IO threads: 2)

======================================================================

üîç Checking Predis availability...
‚úÖ Predis library available

üöÄ Starting Predis WordPress Object Cache Test...

Starting WordPress Object Cache Test (Predis)...
Timestamp: 2025-06-10 04:04:08 UTC
Predis Version: unknown
PHP Version: 8.4.8
Enhanced Testing Configuration (Predis):
- Iterations per test: 13
- Iteration pause: 500ms
- Statistical analysis: Enabled
- Raw data logging: Enabled
- Connection timeout: 5s
- Read/write timeout: 5s
- Connection retry attempts: 3
- Persistent connections: Disabled
- TCP keepalive: Enabled
Thread Variant: 2
Thread Configuration:
  redis_io_threads: 2 threads
  keydb_server_threads: 2 threads
  dragonfly_proactor_threads: 2 threads
  valkey_io_threads: 2 threads
TLS Certificates: Found and validated (Predis-compatible)

Checking TLS readiness (Predis)...
  Redis: TLS port accessible ‚úì
  KeyDB: TLS port accessible ‚úì
  Dragonfly: TLS port accessible ‚úì
  Valkey: TLS port accessible ‚úì

Predis TLS testing will be attempted for: Redis, KeyDB, Dragonfly, Valkey
============================================================
Testing Redis with Predis...
  Configuration: IO Threads: 2
  Running 13 iterations for Redis (non-TLS-Predis)...
  Initial keys in database: 395181
  Flushing database before test...
  Database flushed in 220.73ms. Keys remaining: 0
    Iteration 1/13... 9409 ops/sec, 0.106ms latency
    Iteration 2/13... 10107 ops/sec, 0.098ms latency
    Iteration 3/13... 10251 ops/sec, 0.097ms latency
    Iteration 4/13... 10364 ops/sec, 0.096ms latency
    Iteration 5/13... 10464 ops/sec, 0.095ms latency
    Iteration 6/13... 10487 ops/sec, 0.095ms latency
    Iteration 7/13... 10489 ops/sec, 0.095ms latency
    Iteration 8/13... 10473 ops/sec, 0.095ms latency
    Iteration 9/13... 10451 ops/sec, 0.095ms latency
    Iteration 10/13... 10490 ops/sec, 0.095ms latency
    Iteration 11/13... 10528 ops/sec, 0.094ms latency
    Iteration 12/13... 10455 ops/sec, 0.095ms latency
    Iteration 13/13... 10485 ops/sec, 0.095ms latency
  Redis (non-TLS-Predis): 10342.58¬±304.13 ops/sec (CV: 2.9%), 0.096¬±0.003ms latency, Quality: good
  Final keys in database: 61461
üîê Attempting TLS connection to Redis at 127.0.0.1:6390 (Predis)
  Using custom port scheme: Redis=6390, KeyDB=6391, Dragonfly=6392, Valkey=6393
  Note: Predis uses 'tls' scheme and 'ssl' context array
  üì° Method 1: Predis 'tls' scheme with SSL context...
  üß™ Testing TLS connection with SET/GET commands...
  ‚úÖ TLS connection successful with Predis 'tls' scheme
  Running 13 iterations for Redis (TLS-Predis)...
  Initial keys in database: 394976
  Flushing database before test...
  Database flushed in 213.41ms. Keys remaining: 0
    Iteration 1/13... 7254 ops/sec, 0.137ms latency
    Iteration 2/13... 7771 ops/sec, 0.128ms latency
    Iteration 3/13... 7848 ops/sec, 0.127ms latency
    Iteration 4/13... 7958 ops/sec, 0.125ms latency
    Iteration 5/13... 8009 ops/sec, 0.124ms latency
    Iteration 6/13... 8050 ops/sec, 0.124ms latency
    Iteration 7/13... 8135 ops/sec, 0.122ms latency
    Iteration 8/13... 8137 ops/sec, 0.122ms latency
    Iteration 9/13... 8078 ops/sec, 0.123ms latency
    Iteration 10/13... 8112 ops/sec, 0.123ms latency
    Iteration 11/13... 8085 ops/sec, 0.123ms latency
    Iteration 12/13... 8069 ops/sec, 0.123ms latency
    Iteration 13/13... 8085 ops/sec, 0.123ms latency
  Redis (TLS-Predis): 7968.54¬±241.40 ops/sec (CV: 3.0%), 0.125¬±0.004ms latency, Quality: good
  Final keys in database: 61386

Testing KeyDB with Predis...
  Configuration: Server Threads: 2
  Running 13 iterations for KeyDB (non-TLS-Predis)...
  Initial keys in database: 394283
  Flushing database before test...
  Database flushed in 213.02ms. Keys remaining: 0
    Iteration 1/13... 11541 ops/sec, 0.086ms latency
    Iteration 2/13... 12404 ops/sec, 0.080ms latency
    Iteration 3/13... 12661 ops/sec, 0.078ms latency
    Iteration 4/13... 12739 ops/sec, 0.078ms latency
    Iteration 5/13... 12860 ops/sec, 0.077ms latency
    Iteration 6/13... 12845 ops/sec, 0.077ms latency
    Iteration 7/13... 12880 ops/sec, 0.077ms latency
    Iteration 8/13... 12910 ops/sec, 0.077ms latency
    Iteration 9/13... 12886 ops/sec, 0.077ms latency
    Iteration 10/13... 12891 ops/sec, 0.077ms latency
    Iteration 11/13... 12886 ops/sec, 0.077ms latency
    Iteration 12/13... 12875 ops/sec, 0.077ms latency
    Iteration 13/13... 12700 ops/sec, 0.078ms latency
  KeyDB (non-TLS-Predis): 12698.36¬±375.59 ops/sec (CV: 3.0%), 0.078¬±0.003ms latency, Quality: good
  Final keys in database: 61495
üîê Attempting TLS connection to KeyDB at 127.0.0.1:6391 (Predis)
  Using custom port scheme: Redis=6390, KeyDB=6391, Dragonfly=6392, Valkey=6393
  Note: Predis uses 'tls' scheme and 'ssl' context array
  üì° Method 1: Predis 'tls' scheme with SSL context...
  üß™ Testing TLS connection with SET/GET commands...
  ‚úÖ TLS connection successful with Predis 'tls' scheme
  Running 13 iterations for KeyDB (TLS-Predis)...
  Initial keys in database: 393218
  Flushing database before test...
  Database flushed in 215.55ms. Keys remaining: 0
    Iteration 1/13... 8837 ops/sec, 0.113ms latency
    Iteration 2/13... 9438 ops/sec, 0.105ms latency
    Iteration 3/13... 9578 ops/sec, 0.104ms latency
    Iteration 4/13... 9727 ops/sec, 0.102ms latency
    Iteration 5/13... 9621 ops/sec, 0.103ms latency
    Iteration 6/13... 9760 ops/sec, 0.102ms latency
    Iteration 7/13... 9791 ops/sec, 0.102ms latency
    Iteration 8/13... 9780 ops/sec, 0.102ms latency
    Iteration 9/13... 9856 ops/sec, 0.101ms latency
    Iteration 10/13... 9827 ops/sec, 0.101ms latency
    Iteration 11/13... 9785 ops/sec, 0.102ms latency
    Iteration 12/13... 9789 ops/sec, 0.102ms latency
    Iteration 13/13... 9747 ops/sec, 0.102ms latency
  KeyDB (TLS-Predis): 9656.50¬±271.89 ops/sec (CV: 2.8%), 0.103¬±0.003ms latency, Quality: good
  Final keys in database: 61470

Testing Dragonfly with Predis...
  Configuration: Proactor Threads: 2
  Running 13 iterations for Dragonfly (non-TLS-Predis)...
  Initial keys in database: 389911
  Flushing database before test...
  Database flushed in 20.45ms. Keys remaining: 0
    Iteration 1/13... 10138 ops/sec, 0.098ms latency
    Iteration 2/13... 10716 ops/sec, 0.093ms latency
    Iteration 3/13... 11062 ops/sec, 0.090ms latency
    Iteration 4/13... 11106 ops/sec, 0.090ms latency
    Iteration 5/13... 11183 ops/sec, 0.089ms latency
    Iteration 6/13... 11163 ops/sec, 0.089ms latency
    Iteration 7/13... 11242 ops/sec, 0.088ms latency
    Iteration 8/13... 11258 ops/sec, 0.088ms latency
    Iteration 9/13... 11134 ops/sec, 0.089ms latency
    Iteration 10/13... 11233 ops/sec, 0.088ms latency
    Iteration 11/13... 11158 ops/sec, 0.089ms latency
    Iteration 12/13... 11239 ops/sec, 0.088ms latency
    Iteration 13/13... 11229 ops/sec, 0.089ms latency
  Dragonfly (non-TLS-Predis): 11066.34¬±312.82 ops/sec (CV: 2.8%), 0.090¬±0.003ms latency, Quality: good
  Final keys in database: 61329
üîê Attempting TLS connection to Dragonfly at 127.0.0.1:6392 (Predis)
  Using custom port scheme: Redis=6390, KeyDB=6391, Dragonfly=6392, Valkey=6393
  Note: Predis uses 'tls' scheme and 'ssl' context array
  üì° Method 1: Predis 'tls' scheme with SSL context...
  üîê Adding Dragonfly authentication to connection parameters...
  üß™ Testing TLS connection with SET/GET commands...
  ‚úÖ TLS connection successful with Predis 'tls' scheme
  Running 13 iterations for Dragonfly (TLS-Predis)...
  Initial keys in database: 389013
  Flushing database before test...
  Database flushed in 27.79ms. Keys remaining: 0
    Iteration 1/13... 7789 ops/sec, 0.128ms latency
    Iteration 2/13... 8286 ops/sec, 0.120ms latency
    Iteration 3/13... 8464 ops/sec, 0.118ms latency
    Iteration 4/13... 8601 ops/sec, 0.116ms latency
    Iteration 5/13... 8597 ops/sec, 0.116ms latency
    Iteration 6/13... 8624 ops/sec, 0.115ms latency
    Iteration 7/13... 8504 ops/sec, 0.117ms latency
    Iteration 8/13... 8659 ops/sec, 0.115ms latency
    Iteration 9/13... 8579 ops/sec, 0.116ms latency
    Iteration 10/13... 8646 ops/sec, 0.115ms latency
    Iteration 11/13... 8632 ops/sec, 0.115ms latency
    Iteration 12/13... 8789 ops/sec, 0.113ms latency
    Iteration 13/13... 8862 ops/sec, 0.112ms latency
  Dragonfly (TLS-Predis): 8540.85¬±266.13 ops/sec (CV: 3.1%), 0.117¬±0.004ms latency, Quality: good
  Final keys in database: 61302

Testing Valkey with Predis...
  Configuration: IO Threads: 2
  Running 13 iterations for Valkey (non-TLS-Predis)...
  Initial keys in database: 389792
  Flushing database before test...
  Database flushed in 0.08ms. Keys remaining: 0
    Iteration 1/13... 13624 ops/sec, 0.073ms latency
    Iteration 2/13... 14688 ops/sec, 0.068ms latency
    Iteration 3/13... 14682 ops/sec, 0.068ms latency
    Iteration 4/13... 14906 ops/sec, 0.067ms latency
    Iteration 5/13... 14642 ops/sec, 0.068ms latency
    Iteration 6/13... 14736 ops/sec, 0.067ms latency
    Iteration 7/13... 14690 ops/sec, 0.068ms latency
    Iteration 8/13... 14689 ops/sec, 0.068ms latency
    Iteration 9/13... 14654 ops/sec, 0.068ms latency
    Iteration 10/13... 14728 ops/sec, 0.067ms latency
    Iteration 11/13... 14915 ops/sec, 0.067ms latency
    Iteration 12/13... 14691 ops/sec, 0.068ms latency
    Iteration 13/13... 14625 ops/sec, 0.068ms latency
  Valkey (non-TLS-Predis): 14636.18¬±317.36 ops/sec (CV: 2.2%), 0.068¬±0.002ms latency, Quality: good
  Final keys in database: 61509
üîê Attempting TLS connection to Valkey at 127.0.0.1:6393 (Predis)
  Using custom port scheme: Redis=6390, KeyDB=6391, Dragonfly=6392, Valkey=6393
  Note: Predis uses 'tls' scheme and 'ssl' context array
  üì° Method 1: Predis 'tls' scheme with SSL context...
  üß™ Testing TLS connection with SET/GET commands...
  ‚úÖ TLS connection successful with Predis 'tls' scheme
  Running 13 iterations for Valkey (TLS-Predis)...
  Initial keys in database: 389757
  Flushing database before test...
  Database flushed in 0.17ms. Keys remaining: 0
    Iteration 1/13... 9629 ops/sec, 0.103ms latency
    Iteration 2/13... 10156 ops/sec, 0.098ms latency
    Iteration 3/13... 10483 ops/sec, 0.095ms latency
    Iteration 4/13... 10389 ops/sec, 0.096ms latency
    Iteration 5/13... 10539 ops/sec, 0.094ms latency
    Iteration 6/13... 10473 ops/sec, 0.095ms latency
    Iteration 7/13... 10417 ops/sec, 0.095ms latency
    Iteration 8/13... 10600 ops/sec, 0.094ms latency
    Iteration 9/13... 10564 ops/sec, 0.094ms latency
    Iteration 10/13... 10491 ops/sec, 0.095ms latency
    Iteration 11/13... 10644 ops/sec, 0.093ms latency
    Iteration 12/13... 10510 ops/sec, 0.095ms latency
    Iteration 13/13... 10625 ops/sec, 0.094ms latency
  Valkey (TLS-Predis): 10424.54¬±270.09 ops/sec (CV: 2.6%), 0.095¬±0.003ms latency, Quality: good
  Final keys in database: 61464

Enhanced Predis results saved:
  CSV: ./benchmarklogs-2t/wordpress_object_cache_test_predis_predis.csv
  JSON: ./benchmarklogs-2t/wordpress_object_cache_test_predis_predis.json
  Markdown: ./benchmarklogs-2t/wordpress_object_cache_test_predis_predis.md
  Raw Data: ./benchmarklogs-2t/wordpress_object_cache_test_predis_predis_raw.json
============================================================
Enhanced Predis test suite completed!
Total execution time: 3,175.62 seconds
Total tests run: 8
Statistical iterations per test: 13
Results saved to ./benchmarklogs-2t/
Redis implementation: Predis (pure PHP)

====================================================================================================
ENHANCED STATISTICAL PERFORMANCE SUMMARY (Predis)
Thread Variant: 2 | Iterations per test: 13
====================================================================================================
Rank Database                       Ops/sec   ¬±StdDev      CV%  Latency  Quality     95% CI     Reliable
----------------------------------------------------------------------------------------------------
#1  Valkey (Predis)              14636      317    2.2%  0.068ms üü°good    14,460-14,812      ‚úÖ
#2  KeyDB (Predis)               12698      376    3.0%  0.078ms üü°good    12,490-12,907      ‚úÖ
#3  Dragonfly (Predis)           11066      313    2.8%  0.090ms üü°good    10,893-11,240      ‚úÖ
#4  Valkey (TLS-Predis)          10425      270    2.6%  0.095ms üü°good    10,275-10,574      ‚úÖ
#5  Redis (Predis)               10343      304    2.9%  0.096ms üü°good    10,174-10,511      ‚úÖ
#6  KeyDB (TLS-Predis)            9656      272    2.8%  0.103ms üü°good     9,506-9,807      ‚úÖ
#7  Dragonfly (TLS-Predis)        8541      266    3.1%  0.117ms üü°good     8,393-8,688      ‚úÖ
#8  Redis (TLS-Predis)            7969      241    3.0%  0.125ms üü°good     7,835-8,102      ‚úÖ
====================================================================================================
Implementation: Predis (Pure PHP Redis Client)
üìà Compare with phpredis results to see implementation trade-offs

============================================================
TLS vs NON-TLS PERFORMANCE COMPARISON (Predis)
Thread Variant: 2
============================================================
Redis      | Non-TLS:    10343¬±304  | TLS:     7969¬±241  | Impact: +23.0% *
KeyDB      | Non-TLS:    12698¬±376  | TLS:     9656¬±272  | Impact: +24.0% *
Dragonfly  | Non-TLS:    11066¬±313  | TLS:     8541¬±266  | Impact: +22.8% *
Valkey     | Non-TLS:    14636¬±317  | TLS:    10425¬±270  | Impact: +28.8% *
------------------------------------------------------------
* = Statistically significant difference (95% confidence)
Implementation: Predis (Pure PHP)
============================================================

================================================================================
STATISTICAL INSIGHTS (Predis)
Thread Variant: 2 | Iterations: 13
================================================================================
Measurement Quality Distribution:
  üü° Good      :  8 tests (100.0%)

Coefficient of Variation Analysis:
  Average CV: 2.8% (lower is better)
  Range: 2.2% - 3.1%
  üìä Good measurement consistency with Predis

Predis Implementation Notes:
  üì° Connection management: Automatic (no manual close required)
  üîí TLS handling: Enhanced SSL context support
  üîÑ Error recovery: Built-in retry logic with exponential backoff
  üìä Performance characteristics: Pure PHP (higher latency, more consistent)
================================================================================

================================================================================
PREDIS-SPECIFIC INSIGHTS
Thread Variant: 2 | Implementation: Predis (Pure PHP)
================================================================================
TLS Connection Reliability:
  ‚úÖ Predis TLS connections: 4/4 databases
  üìä All TLS connections established successfully
  üîí SSL context handling: Reliable (Predis manages SSL internally)

Predis Configuration Analysis:
  üîó Connection timeout: 5s
  üì° Read/write timeout: 5s
  üîÑ Connection retry attempts: 3
  ‚ö° TCP keepalive: Enabled
  üîó Persistent connections: Disabled

Performance Characteristics:
  üìà Average non-TLS performance: 12,186 ops/sec
  üîí Average TLS performance: 9,148 ops/sec
  üìä TLS overhead: 24.9%
  ‚ÑπÔ∏è  Note: 25-40% TLS overhead is normal for Redis over SSL

Predis Advantages:
  ‚úÖ Better TLS reliability compared to phpredis extension
  ‚úÖ Enhanced SSL context handling
  ‚úÖ No extension compilation dependencies
  ‚úÖ Consistent behavior across PHP versions
  ‚ö†Ô∏è  Trade-off: Lower raw performance due to pure PHP implementation
================================================================================

======================================================================
‚úÖ Predis WordPress Object Cache test completed successfully!
üìÅ Results saved to: ./benchmarklogs-2t
üìä Implementation: Predis (Pure PHP Redis Client)
üîí TLS Support: Enhanced reliability compared to phpredis

üìÑ Generated files:
  php_wordpress_test_phpredis.log (32KB)
  php_wordpress_test_predis.log (16.8KB)
  wordpress_object_cache_test_predis_predis.csv (1.8KB)
  wordpress_object_cache_test_predis_predis.json (99.5KB)
  wordpress_object_cache_test_predis_predis.md (2.7KB)
  wordpress_object_cache_test_predis_predis_raw.json (87.2KB)
