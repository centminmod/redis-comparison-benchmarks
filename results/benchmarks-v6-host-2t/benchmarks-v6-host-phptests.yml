name: v6 PHP CLI + Matrix Host Network Benchmark Redis vs KeyDB vs Dragonfly vs Valkey - Multi-Thread Tests

on:
  workflow_dispatch:
    branches: [master]
    inputs:
      requests:
        description: 'Number of requests per thread'
        required: false
        default: '5000'
        type: string
      clients:
        description: 'Number of clients per thread'
        required: false
        default: '100'
        type: string
      pipeline:
        description: 'Pipeline depth'
        required: false
        default: '1'
        type: string
      data_size:
        description: 'Data size in bytes'
        required: false
        default: '512'
        type: string
      key_maximum:
        description: 'Maximum key value'
        required: false
        default: '3000000'
        type: string
      intrinsic_latency:
        description: 'intrinsic latency value'
        required: false
        default: '5'
        type: string
      max_redis_io_threads:
        description: 'Maximum Redis IO threads count (will test 1 to this value)'
        required: false
        default: '4'
        type: string
      max_keydb_server_threads:
        description: 'Maximum KeyDB server threads count (will test 1 to this value)'
        required: false
        default: '4'
        type: string
      max_dragonfly_proactor_threads:
        description: 'Maximum Dragonfly proactor threads count (will test 1 to this value)'
        required: false
        default: '4'
        type: string
      valkey_io_threads:
        description: 'Valkey IO threads count (will test 1 to this value)'
        required: false
        default: '4'
        type: string

permissions:
  contents: write

jobs:
  generate-matrix:
    runs-on: ubuntu-24.04
    outputs:
      thread-variants: ${{ steps.generate-variants.outputs.variants }}
    steps:
      - name: Generate thread count variants
        id: generate-variants
        run: |
          max_threads=$(( ${{ inputs.max_redis_io_threads || '4' }} > ${{ inputs.max_keydb_server_threads || '4' }} ? ${{ inputs.max_redis_io_threads || '4' }} : ${{ inputs.max_keydb_server_threads || '4' }} ))
          max_threads=$(( $max_threads > ${{ inputs.max_dragonfly_proactor_threads || '4' }} ? $max_threads : ${{ inputs.max_dragonfly_proactor_threads || '4' }} ))
          max_threads=$(( $max_threads > ${{ inputs.valkey_io_threads || '4' }} ? $max_threads : ${{ inputs.valkey_io_threads || '4' }} ))
          
          variants="["
          for i in $(seq 1 $max_threads); do
            redis_threads=$(( $i <= ${{ inputs.max_redis_io_threads || '4' }} ? $i : ${{ inputs.max_redis_io_threads || '4' }} ))
            keydb_threads=$(( $i <= ${{ inputs.max_keydb_server_threads || '4' }} ? $i : ${{ inputs.max_keydb_server_threads || '4' }} ))
            dragonfly_threads=$(( $i <= ${{ inputs.max_dragonfly_proactor_threads || '4' }} ? $i : ${{ inputs.max_dragonfly_proactor_threads || '4' }} ))
            valkey_threads=$(( $i <= ${{ inputs.valkey_io_threads || '4' }} ? $i : ${{ inputs.valkey_io_threads || '4' }} ))
            
            if [ $i -gt 1 ]; then
              variants="${variants},"
            fi
            variants="${variants}{\"threads\":$i,\"redis_io_threads\":$redis_threads,\"keydb_server_threads\":$keydb_threads,\"dragonfly_proactor_threads\":$dragonfly_threads,\"valkey_io_threads\":$valkey_threads}"
          done
          variants="${variants}]"
          
          echo "Generated variants: $variants"
          echo "variants=$variants" >> $GITHUB_OUTPUT

  benchmark:
    needs: generate-matrix
    runs-on: ubuntu-24.04
    env:
      KEY_MINIMUM: 1
      PHP_TEST_DURATION: 30
    strategy:
      matrix:
        variant: ${{ fromJson(needs.generate-matrix.outputs.thread-variants) }}
      fail-fast: false
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Cache Docker layers
      uses: actions/cache@v4
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}-${{ matrix.variant.threads }}t
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: System Info
      run: |
        echo "==== Kernel ===="
        uname -r

        echo "==== CPU Info ===="
        lscpu
    
        echo "==== Memory Info ===="
        free -m
    
        echo "==== Disk Info ===="
        df -hT

    - name: Display Benchmark Configuration
      run: |
        echo "==== Benchmark Configuration ===="
        echo "Thread Variant: ${{ matrix.variant.threads }}"
        echo "Requests: ${{ inputs.requests || '2000' }}"
        echo "Clients: ${{ inputs.clients || '100' }}"
        echo "Pipeline: ${{ inputs.pipeline || '1' }}"
        echo "Data Size: ${{ inputs.data_size || '1024' }}"
        echo "Key Minimum: ${KEY_MINIMUM}"
        echo "Key Maximum: ${{ inputs.key_maximum || '1000000' }}"
        echo "Key Median: $(( (${{ inputs.key_maximum || '1000000' }} + ${KEY_MINIMUM}) / 2 ))"
        echo "Key Stddev: $(( (${{ inputs.key_maximum || '1000000' }} - ${KEY_MINIMUM}) / 6 ))"
        echo "Intrinsic Latency: ${{ inputs.intrinsic_latency || '5' }}"
        echo "Redis IO Threads: ${{ matrix.variant.redis_io_threads }}"
        echo "KeyDB Server Threads: ${{ matrix.variant.keydb_server_threads }}"
        echo "Dragonfly Proactor Threads: ${{ matrix.variant.dragonfly_proactor_threads }}"
        echo "Valkey IO Threads: ${{ matrix.variant.valkey_io_threads }}"

    - name: Update System
      run: |
        sudo apt-get update -y
        sudo DEBIAN_FRONTEND=noninteractive apt-get upgrade -y
        sudo DEBIAN_FRONTEND=noninteractive apt-get dist-upgrade -y

    - name: Check IRQ and Network Capabilities
      continue-on-error: true
      run: |
        echo "=== Network Interfaces ==="
        ip link show || ifconfig -a
        
        echo "=== IRQ Information ==="
        cat /proc/interrupts | head -20
        
        echo "=== CPU Topology ==="
        lscpu
        cat /proc/cpuinfo | grep processor
        
        echo "=== Test sudo access ==="
        sudo -n echo "Sudo available" 2>/dev/null || echo "No sudo access to system settings"
        
        echo "=== Test ethtool access ==="
        sudo ethtool -i eth0 2>/dev/null || echo "No ethtool access"

    - name: Generate Distinct CA, Server, and Client Certificates
      run: |
        # Generate CA's private key and self-signed certificate
        openssl genpkey -algorithm RSA -pkeyopt rsa_keygen_bits:2048 -out ca.key
        openssl req -new -x509 -days 365 -key ca.key -out ca.crt -subj "/C=US/ST=Some-State/O=OrganizationName/OU=OrganizationalUnit/CN=CA"
        
        # Generate server's private key and certificate signing request (CSR)
        openssl genpkey -algorithm RSA -pkeyopt rsa_keygen_bits:2048 -out test.key
        openssl req -new -key test.key -out test.csr -subj "/C=US/ST=Some-State/O=OrganizationName/OU=OrganizationalUnit/CN=test.com"
        
        # Sign the server's CSR with the CA's private key to get the server's certificate
        openssl x509 -req -in test.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out test.crt -days 365
        
        # Generate client's private key and CSR
        openssl genpkey -algorithm RSA -pkeyopt rsa_keygen_bits:2048 -out client_priv.pem
        openssl req -new -key client_priv.pem -out client.csr -subj "/C=US/ST=Some-State/O=OrganizationName/OU=OrganizationalUnit/CN=test.server.com"
        
        # Sign the client's CSR with the CA's private key to get the client's certificate
        openssl x509 -req -in client.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out client_cert.pem -days 365

    - name: Update Redis Configuration for non-TLS
      run: |
        echo "port 6379" >> redis.conf
        echo "io-threads ${{ matrix.variant.redis_io_threads }}" >> redis.conf
        echo "io-threads-do-reads yes" >> redis.conf
        echo "save \"\"" >> redis.conf
        echo "appendonly no" >> redis.conf

    - name: Update KeyDB Configuration for non-TLS
      run: |
        echo "port 6380" >> keydb.conf
        echo "#server-thread-affinity true" >> keydb.conf
        echo "min-clients-per-thread 50" >> keydb.conf
        echo "server-threads ${{ matrix.variant.keydb_server_threads }}" >> keydb.conf
        echo "io-threads-do-reads yes" >> keydb.conf
        echo "save \"\"" >> keydb.conf
        echo "appendonly no" >> keydb.conf

    - name: Update Dragonfly Configuration for non-TLS
      run: |
        echo "--port=6381" >> dragonfly.conf
        sed -i "s|--proactor_threads=3|--proactor_threads=${{ matrix.variant.dragonfly_proactor_threads }}|" Dockerfile-dragonfly
        echo "--proactor_threads=${{ matrix.variant.dragonfly_proactor_threads }}" >> dragonfly.conf
        echo "--dbfilename=''" >> dragonfly.conf

    - name: Update Valkey Configuration for non-TLS
      run: |
        echo "port 6382" >> valkey.conf
        echo "io-threads ${{ matrix.variant.valkey_io_threads }}" >> valkey.conf
        echo "io-threads-do-reads yes" >> valkey.conf
        echo "save \"\"" >> valkey.conf
        echo "appendonly no" >> valkey.conf

    - name: Update Redis Configuration for TLS
      run: |
        echo "io-threads ${{ matrix.variant.redis_io_threads }}" >> redis-tls.conf
        echo "io-threads-do-reads yes" >> redis-tls.conf
        echo "port 0" >> redis-tls.conf
        echo "tls-port 6390" >> redis-tls.conf
        echo "tls-cert-file /tls/test.crt" >> redis-tls.conf
        echo "tls-key-file /tls/test.key" >> redis-tls.conf
        echo "tls-ca-cert-file /tls/ca.crt" >> redis-tls.conf
        echo "save \"\"" >> redis-tls.conf
        echo "appendonly no" >> redis-tls.conf
    
    - name: Update KeyDB Configuration for TLS
      run: |
        echo "#server-thread-affinity true" >> keydb-tls.conf
        echo "min-clients-per-thread 50" >> keydb-tls.conf
        echo "server-threads ${{ matrix.variant.keydb_server_threads }}" >> keydb-tls.conf
        echo "io-threads-do-reads yes" >> keydb-tls.conf
        echo "port 0" >> keydb-tls.conf
        echo "tls-port 6391" >> keydb-tls.conf
        echo "tls-cert-file /tls/test.crt" >> keydb-tls.conf
        echo "tls-key-file /tls/test.key" >> keydb-tls.conf
        echo "tls-ca-cert-file /tls/ca.crt" >> keydb-tls.conf
        echo "save \"\"" >> keydb-tls.conf
        echo "appendonly no" >> keydb-tls.conf
    
    - name: Update Dragonfly Configuration for TLS
      run: |
        sed -i "s|--proactor_threads=3|--proactor_threads=${{ matrix.variant.dragonfly_proactor_threads }}|" Dockerfile-dragonfly-tls
        echo "--proactor_threads=${{ matrix.variant.dragonfly_proactor_threads }}" >> dragonfly-tls.conf
        echo "--port=6392" >> dragonfly-tls.conf
        echo "--tls_cert_file=/tls/test.crt" >> dragonfly-tls.conf
        echo "--tls_key_file=/tls/test.key" >> dragonfly-tls.conf
        echo "--tls_ca_cert_file=/tls/ca.crt" >> dragonfly-tls.conf
        echo "--dbfilename=''" >> dragonfly-tls.conf

    - name: Update Valkey Configuration for TLS
      run: |
        echo "io-threads ${{ matrix.variant.valkey_io_threads }}" >> valkey-tls.conf
        echo "io-threads-do-reads yes" >> valkey-tls.conf
        echo "port 0" >> valkey-tls.conf
        echo "tls-port 6393" >> valkey-tls.conf
        echo "tls-cert-file /tls/test.crt" >> valkey-tls.conf
        echo "tls-key-file /tls/test.key" >> valkey-tls.conf
        echo "tls-ca-cert-file /tls/ca.crt" >> valkey-tls.conf
        echo "tls-auth-clients no" >> valkey-tls.conf
        echo "save \"\"" >> valkey-tls.conf
        echo "appendonly no" >> valkey-tls.conf

    - name: Build Redis Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ./Dockerfile-redis
        load: true
        tags: redis:latest

    - name: Build KeyDB Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ./Dockerfile-keydb
        load: true
        tags: keydb:latest

    - name: Build Dragonfly Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ./Dockerfile-dragonfly-host
        load: true
        tags: dragonfly:latest

    - name: Build Valkey Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ./Dockerfile-valkey
        load: true
        tags: valkey:latest

    - name: Build Redis Docker image with TLS
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ./Dockerfile-redis-tls-host
        load: true
        tags: redis-tls:latest
    
    - name: Build KeyDB Docker image with TLS
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ./Dockerfile-keydb-tls-host
        load: true
        tags: keydb-tls:latest
    
    - name: Build Dragonfly Docker image with TLS
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ./Dockerfile-dragonfly-tls-nopass
        load: true
        tags: dragonfly-tls:latest

    - name: Build Valkey Docker image with TLS
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ./Dockerfile-valkey-tls-host
        load: true
        tags: valkey-tls:latest

    - name: Run Redis container
      run: |
        docker run -d --name redis --network host --cpuset-cpus="0-3" --ulimit memlock=-1 redis:latest
        sleep 20

    - name: Run KeyDB container
      run: |
        docker run -d --name keydb --network host --cpuset-cpus="0-3" --ulimit memlock=-1 keydb:latest
        sleep 20

    - name: Run Dragonfly container
      run: |
        docker run -d --name dragonfly --network host --cpuset-cpus="0-3" --ulimit memlock=-1 dragonfly:latest
        sleep 20

    - name: Run Redis container with TLS
      run: |
        docker run -d --name redis-tls --network host --cpuset-cpus="0-3" --ulimit memlock=-1 redis-tls:latest
        sleep 20
    
    - name: Run KeyDB container with TLS
      run: |
        docker run -d --name keydb-tls --network host --cpuset-cpus="0-3" --ulimit memlock=-1 keydb-tls:latest
        sleep 20
    
    - name: Run Dragonfly container with TLS
      run: |
        docker run -d --name dragonfly-tls --network host --cpuset-cpus="0-3" --ulimit memlock=-1 dragonfly-tls:latest
        sleep 20

    - name: Run Valkey container
      run: |
        docker run -d --name valkey --network host --cpuset-cpus="0-3" --ulimit memlock=-1 valkey:latest
        sleep 20

    - name: Run Valkey container with TLS
      run: |
        docker run -d --name valkey-tls --network host --cpuset-cpus="0-3" --ulimit memlock=-1 valkey-tls:latest
        sleep 20

    - name: Check Redis logs
      continue-on-error: true
      run: docker logs redis

    - name: Test Redis Connectivity
      continue-on-error: true
      run: docker exec redis redis-cli -h 127.0.0.1 -p 6379 PING

    - name: Check KeyDB logs
      continue-on-error: true
      run: docker logs keydb
    
    - name: Test KeyDB Connectivity
      continue-on-error: true
      run: docker exec keydb keydb-cli -h 127.0.0.1 -p 6379 PING

    - name: Check Dragonfly logs
      continue-on-error: true
      run: docker logs dragonfly
    
    - name: Test Dragonfly Connectivity
      continue-on-error: true
      run: docker exec dragonfly redis-cli -h 127.0.0.1 -p 6379 PING

    - name: Inspect Dragonfly Help
      continue-on-error: true
      run: |
        docker exec dragonfly dragonfly --help || true

    - name: Check Redis TLS logs
      continue-on-error: true
      run: docker logs redis-tls

    - name: Check Valkey logs
      continue-on-error: true
      run: docker logs valkey

    - name: Test Valkey Connectivity
      continue-on-error: true
      run: docker exec valkey redis-cli -h 127.0.0.1 -p 6379 PING
    
    - name: Test Redis TLS Connectivity
      continue-on-error: true
      run: docker exec redis-tls redis-cli -h 127.0.0.1 -p 6390 --tls --insecure --cert /tls/test.crt --key /tls/test.key --cacert /tls/ca.crt PING

    - name: Check KeyDB TLS logs
      continue-on-error: true
      run: docker logs keydb-tls
    
    - name: Test KeyDB TLS Connectivity
      continue-on-error: true
      run: docker exec keydb-tls keydb-cli -h 127.0.0.1 -p 6391 --tls --insecure --cert /tls/test.crt --key /tls/test.key --cacert /tls/ca.crt PING

    - name: Check Dragonfly TLS logs
      continue-on-error: true
      run: docker logs dragonfly-tls

    - name: Check Dragonfly TLS config
      continue-on-error: true
      run: |
        docker exec dragonfly-tls ls -lAh /etc/dragonfly/
   
    - name: Test Dragonfly TLS Connectivity
      continue-on-error: true
      run: |
        docker exec dragonfly-tls redis-cli --help
        docker exec dragonfly-tls redis-cli -h 127.0.0.1 -p 6392 --cert /tls/test.crt --key /tls/test.key --cacert /tls/ca.crt PING

    - name: Check Valkey TLS logs
      continue-on-error: true
      run: docker logs valkey-tls

    - name: Test Valkey TLS Connectivity
      continue-on-error: true
      run: docker exec valkey-tls redis-cli -h 127.0.0.1 -p 6393 --tls --insecure --cert /tls/test.crt --key /tls/test.key --cacert /tls/ca.crt PING

    - name: Check Database Versions
      continue-on-error: true
      run: |
        echo "==== Database Versions ===="
        
        echo "=== Redis Version ==="
        docker exec redis redis-server --version || docker exec redis redis-cli INFO server | grep redis_version | head -1
        
        echo "=== KeyDB Version ==="
        docker exec keydb keydb-server --version || docker exec keydb keydb-cli INFO server | grep -E "(keydb_version|redis_version)" | head -1
        
        echo "=== Dragonfly Version ==="
        docker exec dragonfly dragonfly --version || docker logs dragonfly 2>&1 | grep -i "version\|dragonfly" | head -3
        
        echo "=== Valkey Version ==="
        docker exec valkey valkey-server --version || docker exec valkey redis-cli INFO server | grep -E "(valkey_version|redis_version)" | head -1      

    - name: Check Database Server Configurations
      continue-on-error: true
      run: |
        echo "=================================="
        echo "DATABASE CONFIGURATION ANALYSIS"
        echo "=================================="
        
        echo ""
        echo "=== REDIS CONFIGURATION ==="
        echo "--- IO Threads ---"
        docker exec redis redis-cli CONFIG GET "*io-threads*" || echo "Failed to get Redis IO thread config"
        docker exec redis redis-cli INFO | grep ^io || echo "no ^io"
        echo ""
        docker exec redis redis-cli INFO | grep thread || echo "no thread"
        echo ""
        echo "--- Memory Settings ---"
        docker exec redis redis-cli CONFIG GET "maxmemory*" || echo "Failed to get Redis memory config"
        echo "--- Save/Persistence ---"
        docker exec redis redis-cli CONFIG GET "save" || echo "Failed to get Redis save config"
        docker exec redis redis-cli CONFIG GET "appendonly" || echo "Failed to get Redis AOF config"
        echo ""
        echo "--- Network ---"
        docker exec redis redis-cli CONFIG GET "*timeout*" || echo "Failed to get Redis timeout config"
        docker exec redis redis-cli CONFIG GET "tcp-*" || echo "Failed to get Redis TCP config"
        echo ""
        echo "--- Performance ---"
        docker exec redis redis-cli CONFIG GET "lazyfree-*" || echo "Failed to get Redis lazyfree config"
        docker exec redis redis-cli INFO stats | grep -E "(keyspace_|expired_|evicted_)" || echo "Failed to get Redis stats"
        
        echo ""
        echo "=== KEYDB CONFIGURATION ==="
        echo "--- IO Threads ---"
        docker exec keydb keydb-cli CONFIG GET "*io-threads*" || echo "Failed to get KeyDB IO thread config"
        docker exec keydb keydb-cli CONFIG GET "*server-threads*" || echo "Failed to get KeyDB IO server thread config"
        docker exec keydb redis-cli INFO | grep ^io || echo "no ^io"
        echo ""
        docker exec keydb redis-cli INFO | grep thread || echo "no thread"
        echo ""
        echo "--- KeyDB Specific ---"
        docker exec keydb keydb-cli CONFIG GET "*multimaster*" || echo "No multimaster config"
        docker exec keydb keydb-cli CONFIG GET "*active-replica*" || echo "No active-replica config"
        echo ""
        echo "--- Memory Settings ---"
        docker exec keydb keydb-cli CONFIG GET "maxmemory*" || echo "Failed to get KeyDB memory config"
        echo "--- Save/Persistence ---"
        docker exec keydb keydb-cli CONFIG GET "save" || echo "Failed to get KeyDB save config"
        docker exec keydb keydb-cli CONFIG GET "appendonly" || echo "Failed to get KeyDB AOF config"
        echo ""
        echo "--- Performance ---"
        docker exec keydb keydb-cli INFO stats | grep -E "(keyspace_|expired_|evicted_)" || echo "Failed to get KeyDB stats"
        
        echo ""
        echo "=== DRAGONFLY CONFIGURATION ==="
        echo "--- Dragonfly Help (Performance Options) ---"
        docker exec dragonfly dragonfly --help | grep -E "(thread|memory|cache|performance)" || echo "Failed to get Dragonfly help"
        echo "--- IO Threads ---"
        docker exec dragonfly redis-cli INFO | grep ^io || echo "no ^io"
        echo ""
        docker exec dragonfly redis-cli INFO | grep thread || echo "no thread"
        echo ""
        echo "--- Dragonfly Logs (Config Info) ---"
        docker logs dragonfly 2>&1 | grep -E "(thread|memory|port|bind)" | head -10 || echo "No config info in logs"
        echo "--- Dragonfly Process Info ---"
        docker exec dragonfly ps aux | grep dragonfly || echo "Failed to get Dragonfly process info"
        echo "--- Dragonfly Memory Info ---"
        docker exec dragonfly redis-cli INFO memory || echo "Failed to get Dragonfly memory info"
        
        echo ""
        echo "=== VALKEY CONFIGURATION ==="
        echo "--- IO Threads ---"
        docker exec valkey redis-cli CONFIG GET "*io-threads*" || echo "Failed to get Valkey IO thread config"
        docker exec valkey redis-cli INFO | grep ^io || echo "no ^io"
        echo ""
        docker exec valkey redis-cli INFO | grep thread || echo "no thread"
        echo ""
        echo "--- Valkey Specific Features ---"
        docker exec valkey redis-cli CONFIG GET "*async*" || echo "No async config found"
        docker exec valkey redis-cli MODULE LIST || echo "No modules loaded"
        echo ""
        echo "--- Memory Settings ---"
        docker exec valkey redis-cli CONFIG GET "maxmemory*" || echo "Failed to get Valkey memory config"
        echo "--- Save/Persistence ---"
        docker exec valkey redis-cli CONFIG GET "save" || echo "Failed to get Valkey save config"
        docker exec valkey redis-cli CONFIG GET "appendonly" || echo "Failed to get Valkey AOF config"
        echo ""
        echo "--- Network ---"
        docker exec valkey redis-cli CONFIG GET "*timeout*" || echo "Failed to get Valkey timeout config"
        echo ""
        echo "--- Performance ---"
        docker exec valkey redis-cli CONFIG GET "lazyfree-*" || echo "Failed to get Valkey lazyfree config"
        docker exec valkey redis-cli INFO stats | grep -E "(keyspace_|expired_|evicted_)" || echo "Failed to get Valkey stats"
        
        echo ""
        echo "=== CONTAINER RESOURCE ANALYSIS ==="
        echo "--- Container CPU Affinity ---"
        for db in redis keydb dragonfly valkey; do
          if docker ps | grep -q $db; then
            echo "=== $db CPU affinity ==="
            docker exec $db cat /proc/self/status | grep Cpus_allowed_list 2>/dev/null || echo "$db: Could not get CPU affinity"
            docker exec $db cat /proc/self/status | grep "voluntary_ctxt_switches\|nonvoluntary_ctxt_switches" 2>/dev/null || echo "$db: Could not get context switch info"
          fi
        done
        
        echo ""
        echo "--- Container Memory Usage ---"
        docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.MemPerc}}\t{{.NetIO}}\t{{.BlockIO}}" 2>/dev/null || echo "Could not get container stats"
        
        echo ""
        echo "=== BUILD AND VERSION DETAILS ==="
        echo
        echo "--- Redis Build Info ---"
        docker exec redis redis-cli INFO server | grep -E "(redis_version|redis_git|redis_build|gcc_version|arch_bits|multiplexing_api|executable)" || echo "Failed to get Redis build info"
        
        echo
        echo "--- KeyDB Build Info ---"
        docker exec keydb keydb-cli INFO server | grep -E "(keydb_version|redis_version|gcc_version|arch_bits|multiplexing_api|executable)" || echo "Failed to get KeyDB build info"
        
        echo
        echo "--- Dragonfly Build Info ---"
        docker exec dragonfly dragonfly --version 2>/dev/null || docker logs dragonfly 2>&1 | grep -i "version\|build" | head -3 || echo "Failed to get Dragonfly build info"
        
        echo
        echo "--- Valkey Build Info ---"
        docker exec valkey redis-cli INFO server | grep -E "(valkey_version|redis_version|gcc_version|arch_bits|multiplexing_api|executable)" || echo "Failed to get Valkey build info"
        
        echo ""
        echo "=== PERFORMANCE-RELATED SYSTEM INFO ==="
        echo "--- Available System Resources ---"
        echo "CPU cores: $(nproc)"
        echo "Memory: $(free -h | grep '^Mem:' | awk '{print $2}')"
        echo "--- Docker Network ---"
        docker network ls
        echo "--- Container Network Mode ---"
        for db in redis keydb dragonfly valkey; do
          if docker ps | grep -q $db; then
            echo "$db network: $(docker inspect $db | grep -i networkmode | head -1)"
          fi
        done
        
        echo ""
        echo "=================================="
        echo "CONFIGURATION ANALYSIS COMPLETE"
        echo "=================================="

    - name: Create Benchmark Logs Directory
      run: mkdir -p ./benchmarklogs-${{ matrix.variant.threads }}t

    - name: Set Benchmark Parameters
      run: |
        echo "REQUESTS=${{ inputs.requests || '2000' }}" >> $GITHUB_ENV
        echo "CLIENTS=${{ inputs.clients || '100' }}" >> $GITHUB_ENV
        echo "PIPELINE=${{ inputs.pipeline || '1' }}" >> $GITHUB_ENV
        echo "DATA_SIZE=${{ inputs.data_size || '1024' }}" >> $GITHUB_ENV
        echo "KEY_MAXIMUM=${{ inputs.key_maximum || '1000000' }}" >> $GITHUB_ENV
        echo "KEY_MEDIAN=$(( (${{ inputs.key_maximum || '1000000' }} + ${KEY_MINIMUM}) / 2 ))" >> $GITHUB_ENV
        echo "KEY_STDDEV=$(( (${{ inputs.key_maximum || '1000000' }} - ${KEY_MINIMUM}) / 6 ))" >> $GITHUB_ENV
        echo "INTRINSIC_LATENCY=${{ inputs.intrinsic_latency || '5' }}" >> $GITHUB_ENV
        echo "THREAD_VARIANT=${{ matrix.variant.threads }}" >> $GITHUB_ENV
        echo "==== Database Thread Configuration ===="
        echo "Redis IO Threads: ${{ matrix.variant.redis_io_threads }}"
        echo "KeyDB Server Threads: ${{ matrix.variant.keydb_server_threads }}"
        echo "Dragonfly Proactor Threads: ${{ matrix.variant.dragonfly_proactor_threads }}"
        echo "Valkey IO Threads: ${{ matrix.variant.valkey_io_threads }}"

    - name: Intrinsic latency from inside each container
      continue-on-error: true
      run: |
        echo "=== Intrinsic Latency Tests ===" | tee ./benchmarklogs-${{ matrix.variant.threads }}t/intrinsic_latency.log
        echo "Test Duration: ${INTRINSIC_LATENCY} seconds" | tee -a ./benchmarklogs-${{ matrix.variant.threads }}t/intrinsic_latency.log
        echo "Timestamp: $(date -u)" | tee -a ./benchmarklogs-${{ matrix.variant.threads }}t/intrinsic_latency.log
        echo "" | tee -a ./benchmarklogs-${{ matrix.variant.threads }}t/intrinsic_latency.log
        
        for container in redis keydb dragonfly valkey redis-tls keydb-tls dragonfly-tls valkey-tls; do
          echo "" | tee -a ./benchmarklogs-${{ matrix.variant.threads }}t/intrinsic_latency.log
          echo ">>> Container-side intrinsic latency inside: $container" | tee -a ./benchmarklogs-${{ matrix.variant.threads }}t/intrinsic_latency.log
          echo "Command: docker exec $container redis-cli --intrinsic-latency ${INTRINSIC_LATENCY}" | tee -a ./benchmarklogs-${{ matrix.variant.threads }}t/intrinsic_latency.log
          echo "---" | tee -a ./benchmarklogs-${{ matrix.variant.threads }}t/intrinsic_latency.log
          
          # Run the intrinsic latency test and capture output
          if docker exec "$container" redis-cli --intrinsic-latency ${INTRINSIC_LATENCY} 2>&1 | tee -a ./benchmarklogs-${{ matrix.variant.threads }}t/intrinsic_latency.log; then
            echo "✅ $container intrinsic latency test completed" | tee -a ./benchmarklogs-${{ matrix.variant.threads }}t/intrinsic_latency.log
          else
            echo "❌ $container intrinsic latency test failed" | tee -a ./benchmarklogs-${{ matrix.variant.threads }}t/intrinsic_latency.log
          fi
          echo "" | tee -a ./benchmarklogs-${{ matrix.variant.threads }}t/intrinsic_latency.log
        done
        
        echo "=== Intrinsic Latency Tests Complete ===" | tee -a ./benchmarklogs-${{ matrix.variant.threads }}t/intrinsic_latency.log

    - name: Install memtier_benchmark
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential autoconf automake libpcre3-dev libevent-dev pkg-config zlib1g-dev libssl-dev util-linux
        git clone https://github.com/RedisLabs/memtier_benchmark.git
        cd memtier_benchmark
        autoreconf -ivf
        ./configure
        make
        sudo make install

    - name: Inspect memtier_benchmark Help
      run: |
        memtier_benchmark --help || true

    - name: Memtier 1 Threads Benchmark Redis
      run: taskset -c 0 memtier_benchmark -s 127.0.0.1 --ratio=1:15 -p 6379 --protocol=redis -t 1 --distinct-client-seed --hide-histogram --requests=$REQUESTS --clients=$CLIENTS --pipeline=$PIPELINE --data-size=$DATA_SIZE --key-pattern=G:G --key-minimum=${KEY_MINIMUM} --key-maximum=$KEY_MAXIMUM --key-median=$KEY_MEDIAN --key-stddev=$KEY_STDDEV | tee ./benchmarklogs-${{ matrix.variant.threads }}t/redis_benchmarks_1threads.txt || true

    - name: Memtier 1 Threads Benchmark KeyDB
      run: taskset -c 0 memtier_benchmark -s 127.0.0.1 --ratio=1:15 -p 6380 --protocol=redis -t 1 --distinct-client-seed --hide-histogram --requests=$REQUESTS --clients=$CLIENTS --pipeline=$PIPELINE --data-size=$DATA_SIZE --key-pattern=G:G --key-minimum=${KEY_MINIMUM} --key-maximum=$KEY_MAXIMUM --key-median=$KEY_MEDIAN --key-stddev=$KEY_STDDEV | tee ./benchmarklogs-${{ matrix.variant.threads }}t/keydb_benchmarks_1threads.txt || true

    - name: Memtier 1 Threads Benchmark Dragonfly
      run: taskset -c 0 memtier_benchmark -s 127.0.0.1 --ratio=1:15 -p 6381 --protocol=redis -t 1 --distinct-client-seed --hide-histogram --requests=$REQUESTS --clients=$CLIENTS --pipeline=$PIPELINE --data-size=$DATA_SIZE --key-pattern=G:G --key-minimum=${KEY_MINIMUM} --key-maximum=$KEY_MAXIMUM --key-median=$KEY_MEDIAN --key-stddev=$KEY_STDDEV | tee ./benchmarklogs-${{ matrix.variant.threads }}t/dragonfly_benchmarks_1threads.txt || true

    - name: Memtier 1 Threads Benchmark Valkey
      run: taskset -c 0 memtier_benchmark -s 127.0.0.1 --ratio=1:15 -p 6382 --protocol=redis -t 1 --distinct-client-seed --hide-histogram --requests=$REQUESTS --clients=$CLIENTS --pipeline=$PIPELINE --data-size=$DATA_SIZE --key-pattern=G:G --key-minimum=${KEY_MINIMUM} --key-maximum=$KEY_MAXIMUM --key-median=$KEY_MEDIAN --key-stddev=$KEY_STDDEV | tee ./benchmarklogs-${{ matrix.variant.threads }}t/valkey_benchmarks_1threads.txt || true

    - name: Memtier 2 Threads Benchmark Redis
      run: taskset -c 0,1 memtier_benchmark -s 127.0.0.1 --ratio=1:15 -p 6379 --protocol=redis -t 2 --distinct-client-seed --hide-histogram --requests=$REQUESTS --clients=$CLIENTS --pipeline=$PIPELINE --data-size=$DATA_SIZE --key-pattern=G:G --key-minimum=${KEY_MINIMUM} --key-maximum=$KEY_MAXIMUM --key-median=$KEY_MEDIAN --key-stddev=$KEY_STDDEV | tee ./benchmarklogs-${{ matrix.variant.threads }}t/redis_benchmarks_2threads.txt || true

    - name: Memtier 2 Threads Benchmark KeyDB
      run: taskset -c 0,1 memtier_benchmark -s 127.0.0.1 --ratio=1:15 -p 6380 --protocol=redis -t 2 --distinct-client-seed --hide-histogram --requests=$REQUESTS --clients=$CLIENTS --pipeline=$PIPELINE --data-size=$DATA_SIZE --key-pattern=G:G --key-minimum=${KEY_MINIMUM} --key-maximum=$KEY_MAXIMUM --key-median=$KEY_MEDIAN --key-stddev=$KEY_STDDEV | tee ./benchmarklogs-${{ matrix.variant.threads }}t/keydb_benchmarks_2threads.txt || true

    - name: Memtier 2 Threads Benchmark Dragonfly
      run: taskset -c 0,1 memtier_benchmark -s 127.0.0.1 --ratio=1:15 -p 6381 --protocol=redis -t 2 --distinct-client-seed --hide-histogram --requests=$REQUESTS --clients=$CLIENTS --pipeline=$PIPELINE --data-size=$DATA_SIZE --key-pattern=G:G --key-minimum=${KEY_MINIMUM} --key-maximum=$KEY_MAXIMUM --key-median=$KEY_MEDIAN --key-stddev=$KEY_STDDEV | tee ./benchmarklogs-${{ matrix.variant.threads }}t/dragonfly_benchmarks_2threads.txt || true

    - name: Memtier 2 Threads Benchmark Valkey
      run: taskset -c 0,1 memtier_benchmark -s 127.0.0.1 --ratio=1:15 -p 6382 --protocol=redis -t 2 --distinct-client-seed --hide-histogram --requests=$REQUESTS --clients=$CLIENTS --pipeline=$PIPELINE --data-size=$DATA_SIZE --key-pattern=G:G --key-minimum=${KEY_MINIMUM} --key-maximum=$KEY_MAXIMUM --key-median=$KEY_MEDIAN --key-stddev=$KEY_STDDEV | tee ./benchmarklogs-${{ matrix.variant.threads }}t/valkey_benchmarks_2threads.txt || true 

    - name: Memtier 4 Threads Benchmark Redis
      run: taskset -c 0,1,2,3 memtier_benchmark -s 127.0.0.1 --ratio=1:15 -p 6379 --protocol=redis -t 4 --distinct-client-seed --hide-histogram --requests=$REQUESTS --clients=$CLIENTS --pipeline=$PIPELINE --data-size=$DATA_SIZE --key-pattern=G:G --key-minimum=${KEY_MINIMUM} --key-maximum=$KEY_MAXIMUM --key-median=$KEY_MEDIAN --key-stddev=$KEY_STDDEV | tee ./benchmarklogs-${{ matrix.variant.threads }}t/redis_benchmarks_4threads.txt || true 

    - name: Memtier 4 Threads Benchmark KeyDB
      run: taskset -c 0,1,2,3 memtier_benchmark -s 127.0.0.1 --ratio=1:15 -p 6380 --protocol=redis -t 4 --distinct-client-seed --hide-histogram --requests=$REQUESTS --clients=$CLIENTS --pipeline=$PIPELINE --data-size=$DATA_SIZE --key-pattern=G:G --key-minimum=${KEY_MINIMUM} --key-maximum=$KEY_MAXIMUM --key-median=$KEY_MEDIAN --key-stddev=$KEY_STDDEV | tee ./benchmarklogs-${{ matrix.variant.threads }}t/keydb_benchmarks_4threads.txt || true 

    - name: Memtier 4 Threads Benchmark Dragonfly
      run: taskset -c 0,1,2,3 memtier_benchmark -s 127.0.0.1 --ratio=1:15 -p 6381 --protocol=redis -t 4 --distinct-client-seed --hide-histogram --requests=$REQUESTS --clients=$CLIENTS --pipeline=$PIPELINE --data-size=$DATA_SIZE --key-pattern=G:G --key-minimum=${KEY_MINIMUM} --key-maximum=$KEY_MAXIMUM --key-median=$KEY_MEDIAN --key-stddev=$KEY_STDDEV | tee ./benchmarklogs-${{ matrix.variant.threads }}t/dragonfly_benchmarks_4threads.txt || true 

    - name: Memtier 4 Threads Benchmark Valkey
      run: taskset -c 0,1,2,3 memtier_benchmark -s 127.0.0.1 --ratio=1:15 -p 6382 --protocol=redis -t 4 --distinct-client-seed --hide-histogram --requests=$REQUESTS --clients=$CLIENTS --pipeline=$PIPELINE --data-size=$DATA_SIZE --key-pattern=G:G --key-minimum=${KEY_MINIMUM} --key-maximum=$KEY_MAXIMUM --key-median=$KEY_MEDIAN --key-stddev=$KEY_STDDEV | tee ./benchmarklogs-${{ matrix.variant.threads }}t/valkey_benchmarks_4threads.txt || true 

    - name: Memtier 8 Threads Benchmark Redis
      run: memtier_benchmark -s 127.0.0.1 --ratio=1:15 -p 6379 --protocol=redis -t 8 --distinct-client-seed --hide-histogram --requests=$REQUESTS --clients=$CLIENTS --pipeline=$PIPELINE --data-size=$DATA_SIZE --key-pattern=G:G --key-minimum=${KEY_MINIMUM} --key-maximum=$KEY_MAXIMUM --key-median=$KEY_MEDIAN --key-stddev=$KEY_STDDEV | tee ./benchmarklogs-${{ matrix.variant.threads }}t/redis_benchmarks_8threads.txt || true 

    - name: Memtier 8 Threads Benchmark KeyDB
      run: memtier_benchmark -s 127.0.0.1 --ratio=1:15 -p 6380 --protocol=redis -t 8 --distinct-client-seed --hide-histogram --requests=$REQUESTS --clients=$CLIENTS --pipeline=$PIPELINE --data-size=$DATA_SIZE --key-pattern=G:G --key-minimum=${KEY_MINIMUM} --key-maximum=$KEY_MAXIMUM --key-median=$KEY_MEDIAN --key-stddev=$KEY_STDDEV | tee ./benchmarklogs-${{ matrix.variant.threads }}t/keydb_benchmarks_8threads.txt || true 

    - name: Memtier 8 Threads Benchmark Dragonfly
      run: memtier_benchmark -s 127.0.0.1 --ratio=1:15 -p 6381 --protocol=redis -t 8 --distinct-client-seed --hide-histogram --requests=$REQUESTS --clients=$CLIENTS --pipeline=$PIPELINE --data-size=$DATA_SIZE --key-pattern=G:G --key-minimum=${KEY_MINIMUM} --key-maximum=$KEY_MAXIMUM --key-median=$KEY_MEDIAN --key-stddev=$KEY_STDDEV | tee ./benchmarklogs-${{ matrix.variant.threads }}t/dragonfly_benchmarks_8threads.txt || true 

    - name: Memtier 8 Threads Benchmark Valkey
      run: memtier_benchmark -s 127.0.0.1 --ratio=1:15 -p 6382 --protocol=redis -t 8 --distinct-client-seed --hide-histogram --requests=$REQUESTS --clients=$CLIENTS --pipeline=$PIPELINE --data-size=$DATA_SIZE --key-pattern=G:G --key-minimum=${KEY_MINIMUM} --key-maximum=$KEY_MAXIMUM --key-median=$KEY_MEDIAN --key-stddev=$KEY_STDDEV | tee ./benchmarklogs-${{ matrix.variant.threads }}t/valkey_benchmarks_8threads.txt || true 

    - name: Check Redis IO Thread Usage non-TLS
      run: |
        docker exec redis redis-cli INFO | grep -i thread || echo "threads match" 

    - name: Check KeyDB IO Thread Usage non-TLS
      run: |
        docker exec keydb redis-cli INFO | grep -i thread || echo "threads match" 

    - name: Check Dragonfly IO Thread Usage non-TLS
      run: |
        docker exec dragonfly redis-cli INFO | grep -i thread || echo "threads match" 

    - name: Check Valkey IO Thread Usage non-TLS
      run: |
        docker exec valkey redis-cli INFO | grep -i thread || echo "threads match" 

    - name: Check Database Server Configurations After Benchmarks
      continue-on-error: true
      run: |
        echo "=================================="
        echo "DATABASE CONFIGURATION ANALYSIS"
        echo "=================================="
        
        echo ""
        echo "=== REDIS CONFIGURATION ==="
        echo "--- IO Threads ---"
        docker exec redis redis-cli CONFIG GET "*io-threads*" || echo "Failed to get Redis IO thread config"
        docker exec redis redis-cli INFO | grep ^io || echo "no ^io"
        echo ""
        docker exec redis redis-cli INFO | grep thread || echo "no thread"
        echo ""
        echo "--- Memory Settings ---"
        docker exec redis redis-cli CONFIG GET "maxmemory*" || echo "Failed to get Redis memory config"
        echo "--- Save/Persistence ---"
        docker exec redis redis-cli CONFIG GET "save" || echo "Failed to get Redis save config"
        docker exec redis redis-cli CONFIG GET "appendonly" || echo "Failed to get Redis AOF config"
        echo ""
        echo "--- Network ---"
        docker exec redis redis-cli CONFIG GET "*timeout*" || echo "Failed to get Redis timeout config"
        docker exec redis redis-cli CONFIG GET "tcp-*" || echo "Failed to get Redis TCP config"
        echo ""
        echo "--- Performance ---"
        docker exec redis redis-cli CONFIG GET "lazyfree-*" || echo "Failed to get Redis lazyfree config"
        docker exec redis redis-cli INFO stats | grep -E "(keyspace_|expired_|evicted_)" || echo "Failed to get Redis stats"
        
        echo ""
        echo "=== KEYDB CONFIGURATION ==="
        echo "--- IO Threads ---"
        docker exec keydb keydb-cli CONFIG GET "*io-threads*" || echo "Failed to get KeyDB IO thread config"
        docker exec keydb keydb-cli CONFIG GET "*server-threads*" || echo "Failed to get KeyDB IO server thread config"
        docker exec keydb redis-cli INFO | grep ^io || echo "no ^io"
        echo ""
        docker exec keydb redis-cli INFO | grep thread || echo "no thread"
        echo ""
        echo "--- KeyDB Specific ---"
        docker exec keydb keydb-cli CONFIG GET "*multimaster*" || echo "No multimaster config"
        docker exec keydb keydb-cli CONFIG GET "*active-replica*" || echo "No active-replica config"
        echo ""
        echo "--- Memory Settings ---"
        docker exec keydb keydb-cli CONFIG GET "maxmemory*" || echo "Failed to get KeyDB memory config"
        echo "--- Save/Persistence ---"
        docker exec keydb keydb-cli CONFIG GET "save" || echo "Failed to get KeyDB save config"
        docker exec keydb keydb-cli CONFIG GET "appendonly" || echo "Failed to get KeyDB AOF config"
        echo ""
        echo "--- Performance ---"
        docker exec keydb keydb-cli INFO stats | grep -E "(keyspace_|expired_|evicted_)" || echo "Failed to get KeyDB stats"
        
        echo ""
        echo "=== DRAGONFLY CONFIGURATION ==="
        echo "--- Dragonfly Help (Performance Options) ---"
        docker exec dragonfly dragonfly --help | grep -E "(thread|memory|cache|performance)" || echo "Failed to get Dragonfly help"
        echo ""
        echo "--- IO Threads ---"
        docker exec dragonfly redis-cli INFO | grep ^io || echo "no ^io"
        echo ""
        docker exec dragonfly redis-cli INFO | grep thread || echo "no thread"
        echo ""
        echo "--- Dragonfly Logs (Config Info) ---"
        docker logs dragonfly 2>&1 | grep -E "(thread|memory|port|bind)" | head -10 || echo "No config info in logs"
        echo ""
        echo "--- Dragonfly Process Info ---"
        docker exec dragonfly ps aux | grep dragonfly || echo "Failed to get Dragonfly process info"
        echo ""
        echo "--- Dragonfly Memory Info ---"
        docker exec dragonfly redis-cli INFO memory || echo "Failed to get Dragonfly memory info"
        
        echo ""
        echo "=== VALKEY CONFIGURATION ==="
        echo "--- IO Threads ---"
        docker exec valkey redis-cli CONFIG GET "*io-threads*" || echo "Failed to get Valkey IO thread config"
        docker exec valkey redis-cli INFO | grep ^io || echo "no ^io"
        echo ""
        docker exec valkey redis-cli INFO | grep thread || echo "no thread"
        echo ""
        echo "--- Valkey Specific Features ---"
        docker exec valkey redis-cli CONFIG GET "*async*" || echo "No async config found"
        docker exec valkey redis-cli MODULE LIST || echo "No modules loaded"
        echo ""
        echo "--- Memory Settings ---"
        docker exec valkey redis-cli CONFIG GET "maxmemory*" || echo "Failed to get Valkey memory config"
        echo "--- Save/Persistence ---"
        docker exec valkey redis-cli CONFIG GET "save" || echo "Failed to get Valkey save config"
        docker exec valkey redis-cli CONFIG GET "appendonly" || echo "Failed to get Valkey AOF config"
        echo ""
        echo "--- Network ---"
        docker exec valkey redis-cli CONFIG GET "*timeout*" || echo "Failed to get Valkey timeout config"
        echo ""
        echo "--- Performance ---"
        docker exec valkey redis-cli CONFIG GET "lazyfree-*" || echo "Failed to get Valkey lazyfree config"
        docker exec valkey redis-cli INFO stats | grep -E "(keyspace_|expired_|evicted_)" || echo "Failed to get Valkey stats"
        
        echo ""
        echo "=== CONTAINER RESOURCE ANALYSIS ==="
        echo "--- Container CPU Affinity ---"
        for db in redis keydb dragonfly valkey; do
          if docker ps | grep -q $db; then
            echo "=== $db CPU affinity ==="
            docker exec $db cat /proc/self/status | grep Cpus_allowed_list 2>/dev/null || echo "$db: Could not get CPU affinity"
            docker exec $db cat /proc/self/status | grep "voluntary_ctxt_switches\|nonvoluntary_ctxt_switches" 2>/dev/null || echo "$db: Could not get context switch info"
          fi
        done
        
        echo ""
        echo "--- Container Memory Usage ---"
        docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.MemPerc}}\t{{.NetIO}}\t{{.BlockIO}}" 2>/dev/null || echo "Could not get container stats"
        
        echo ""
        echo "=== BUILD AND VERSION DETAILS ==="
        echo
        echo "--- Redis Build Info ---"
        docker exec redis redis-cli INFO server | grep -E "(redis_version|redis_git|redis_build|gcc_version|arch_bits|multiplexing_api|executable)" || echo "Failed to get Redis build info"
        
        echo
        echo "--- KeyDB Build Info ---"
        docker exec keydb keydb-cli INFO server | grep -E "(keydb_version|redis_version|gcc_version|arch_bits|multiplexing_api|executable)" || echo "Failed to get KeyDB build info"
        
        echo
        echo "--- Dragonfly Build Info ---"
        docker exec dragonfly dragonfly --version 2>/dev/null || docker logs dragonfly 2>&1 | grep -i "version\|build" | head -3 || echo "Failed to get Dragonfly build info"
        
        echo
        echo "--- Valkey Build Info ---"
        docker exec valkey redis-cli INFO server | grep -E "(valkey_version|redis_version|gcc_version|arch_bits|multiplexing_api|executable)" || echo "Failed to get Valkey build info"
        
        echo ""
        echo "=== PERFORMANCE-RELATED SYSTEM INFO ==="
        echo "--- Available System Resources ---"
        echo "CPU cores: $(nproc)"
        echo "Memory: $(free -h | grep '^Mem:' | awk '{print $2}')"
        echo "--- Docker Network ---"
        docker network ls
        echo "--- Container Network Mode ---"
        for db in redis keydb dragonfly valkey; do
          if docker ps | grep -q $db; then
            echo "$db network: $(docker inspect $db | grep -i networkmode | head -1)"
          fi
        done
        
        echo ""
        echo "=================================="
        echo "CONFIGURATION ANALYSIS COMPLETE"
        echo "=================================="

    - name: Memtier 1 Threads Benchmark Redis with TLS
      run: |
        taskset -c 0 memtier_benchmark -s 127.0.0.1 --ratio=1:15 -p 6390 --protocol=redis --tls --cert=${PWD}/test.crt --key=${PWD}/test.key --cacert=${PWD}/ca.crt --tls-skip-verify -t 1 --distinct-client-seed --hide-histogram --requests=$REQUESTS --clients=$CLIENTS --pipeline=$PIPELINE --data-size=$DATA_SIZE --key-pattern=G:G --key-minimum=${KEY_MINIMUM} --key-maximum=$KEY_MAXIMUM --key-median=$KEY_MEDIAN --key-stddev=$KEY_STDDEV | tee ./benchmarklogs-${{ matrix.variant.threads }}t/redis_benchmarks_1threads_tls.txt || true
    
    - name: Memtier 1 Threads Benchmark KeyDB with TLS
      run: |
        taskset -c 0 memtier_benchmark -s 127.0.0.1 --ratio=1:15 -p 6391 --protocol=redis --tls --cert=${PWD}/test.crt --key=${PWD}/test.key --cacert=${PWD}/ca.crt --tls-skip-verify -t 1 --distinct-client-seed --hide-histogram --requests=$REQUESTS --clients=$CLIENTS --pipeline=$PIPELINE --data-size=$DATA_SIZE --key-pattern=G:G --key-minimum=${KEY_MINIMUM} --key-maximum=$KEY_MAXIMUM --key-median=$KEY_MEDIAN --key-stddev=$KEY_STDDEV | tee ./benchmarklogs-${{ matrix.variant.threads }}t/keydb_benchmarks_1threads_tls.txt || true
    
    - name: Memtier 1 Threads Benchmark Dragonfly with TLS
      run: |
        taskset -c 0 memtier_benchmark -s 127.0.0.1 --ratio=1:15 -p 6392 --protocol=redis --tls --cert=${PWD}/client_cert.pem --key=${PWD}/client_priv.pem --cacert=${PWD}/ca.crt -t 1 --distinct-client-seed --hide-histogram --requests=$REQUESTS --clients=$CLIENTS --pipeline=$PIPELINE --data-size=$DATA_SIZE --key-pattern=G:G --key-minimum=${KEY_MINIMUM} --key-maximum=$KEY_MAXIMUM --key-median=$KEY_MEDIAN --key-stddev=$KEY_STDDEV | tee ./benchmarklogs-${{ matrix.variant.threads }}t/dragonfly_benchmarks_1threads_tls.txt || true
    
    - name: Memtier 1 Threads Benchmark Valkey with TLS
      run: |
        taskset -c 0 memtier_benchmark -s 127.0.0.1 --ratio=1:15 -p 6393 --protocol=redis --tls --cert=${PWD}/test.crt --key=${PWD}/test.key --cacert=${PWD}/ca.crt --tls-skip-verify -t 1 --distinct-client-seed --hide-histogram --requests=$REQUESTS --clients=$CLIENTS --pipeline=$PIPELINE --data-size=$DATA_SIZE --key-pattern=G:G --key-minimum=${KEY_MINIMUM} --key-maximum=$KEY_MAXIMUM --key-median=$KEY_MEDIAN --key-stddev=$KEY_STDDEV | tee ./benchmarklogs-${{ matrix.variant.threads }}t/valkey_benchmarks_1threads_tls.txt || true 

    - name: Memtier 2 Threads Benchmark Redis with TLS
      run: |
        taskset -c 0,1 memtier_benchmark -s 127.0.0.1 --ratio=1:15 -p 6390 --protocol=redis --tls --cert=${PWD}/test.crt --key=${PWD}/test.key --cacert=${PWD}/ca.crt --tls-skip-verify -t 2 --distinct-client-seed --hide-histogram --requests=$REQUESTS --clients=$CLIENTS --pipeline=$PIPELINE --data-size=$DATA_SIZE --key-pattern=G:G --key-minimum=${KEY_MINIMUM} --key-maximum=$KEY_MAXIMUM --key-median=$KEY_MEDIAN --key-stddev=$KEY_STDDEV | tee ./benchmarklogs-${{ matrix.variant.threads }}t/redis_benchmarks_2threads_tls.txt || true
    
    - name: Memtier 2 Threads Benchmark KeyDB with TLS
      run: |
        taskset -c 0,1 memtier_benchmark -s 127.0.0.1 --ratio=1:15 -p 6391 --protocol=redis --tls --cert=${PWD}/test.crt --key=${PWD}/test.key --cacert=${PWD}/ca.crt --tls-skip-verify -t 2 --distinct-client-seed --hide-histogram --requests=$REQUESTS --clients=$CLIENTS --pipeline=$PIPELINE --data-size=$DATA_SIZE --key-pattern=G:G --key-minimum=${KEY_MINIMUM} --key-maximum=$KEY_MAXIMUM --key-median=$KEY_MEDIAN --key-stddev=$KEY_STDDEV | tee ./benchmarklogs-${{ matrix.variant.threads }}t/keydb_benchmarks_2threads_tls.txt || true
    
    - name: Memtier 2 Threads Benchmark Dragonfly with TLS
      run: |
        taskset -c 0,1 memtier_benchmark -s 127.0.0.1 --ratio=1:15 -p 6392 --protocol=redis --tls --cert=${PWD}/client_cert.pem --key=${PWD}/client_priv.pem --cacert=${PWD}/ca.crt -t 2 --distinct-client-seed --hide-histogram --requests=$REQUESTS --clients=$CLIENTS --pipeline=$PIPELINE --data-size=$DATA_SIZE --key-pattern=G:G --key-minimum=${KEY_MINIMUM} --key-maximum=$KEY_MAXIMUM --key-median=$KEY_MEDIAN --key-stddev=$KEY_STDDEV | tee ./benchmarklogs-${{ matrix.variant.threads }}t/dragonfly_benchmarks_2threads_tls.txt || true
    
    - name: Memtier 2 Threads Benchmark Valkey with TLS
      run: |
        taskset -c 0,1 memtier_benchmark -s 127.0.0.1 --ratio=1:15 -p 6393 --protocol=redis --tls --cert=${PWD}/test.crt --key=${PWD}/test.key --cacert=${PWD}/ca.crt --tls-skip-verify -t 2 --distinct-client-seed --hide-histogram --requests=$REQUESTS --clients=$CLIENTS --pipeline=$PIPELINE --data-size=$DATA_SIZE --key-pattern=G:G --key-minimum=${KEY_MINIMUM} --key-maximum=$KEY_MAXIMUM --key-median=$KEY_MEDIAN --key-stddev=$KEY_STDDEV | tee ./benchmarklogs-${{ matrix.variant.threads }}t/valkey_benchmarks_2threads_tls.txt || true 

    - name: Memtier 4 Threads Benchmark Redis with TLS
      run: |
        taskset -c 0,1,2,3 memtier_benchmark -s 127.0.0.1 --ratio=1:15 -p 6390 --protocol=redis --tls --cert=${PWD}/test.crt --key=${PWD}/test.key --cacert=${PWD}/ca.crt --tls-skip-verify -t 4 --distinct-client-seed --hide-histogram --requests=$REQUESTS --clients=$CLIENTS --pipeline=$PIPELINE --data-size=$DATA_SIZE --key-pattern=G:G --key-minimum=${KEY_MINIMUM} --key-maximum=$KEY_MAXIMUM --key-median=$KEY_MEDIAN --key-stddev=$KEY_STDDEV | tee ./benchmarklogs-${{ matrix.variant.threads }}t/redis_benchmarks_4threads_tls.txt || true   

    - name: Memtier 4 Threads Benchmark KeyDB with TLS
      run: |
        taskset -c 0,1,2,3 memtier_benchmark -s 127.0.0.1 --ratio=1:15 -p 6391 --protocol=redis --tls --cert=${PWD}/test.crt --key=${PWD}/test.key --cacert=${PWD}/ca.crt --tls-skip-verify -t 4 --distinct-client-seed --hide-histogram --requests=$REQUESTS --clients=$CLIENTS --pipeline=$PIPELINE --data-size=$DATA_SIZE --key-pattern=G:G --key-minimum=${KEY_MINIMUM} --key-maximum=$KEY_MAXIMUM --key-median=$KEY_MEDIAN --key-stddev=$KEY_STDDEV | tee ./benchmarklogs-${{ matrix.variant.threads }}t/keydb_benchmarks_4threads_tls.txt || true
   
    - name: Memtier 4 Threads Benchmark Dragonfly with TLS
      run: |
        taskset -c 0,1,2,3 memtier_benchmark -s 127.0.0.1 --ratio=1:15 -p 6392 --protocol=redis --tls --cert=${PWD}/client_cert.pem --key=${PWD}/client_priv.pem --cacert=${PWD}/ca.crt -t 4 --distinct-client-seed --hide-histogram --requests=$REQUESTS --clients=$CLIENTS --pipeline=$PIPELINE --data-size=$DATA_SIZE --key-pattern=G:G --key-minimum=${KEY_MINIMUM} --key-maximum=$KEY_MAXIMUM --key-median=$KEY_MEDIAN --key-stddev=$KEY_STDDEV | tee ./benchmarklogs-${{ matrix.variant.threads }}t/dragonfly_benchmarks_4threads_tls.txt || true
   
    - name: Memtier 4 Threads Benchmark Valkey with TLS
      run: |
        taskset -c 0,1,2,3 memtier_benchmark -s 127.0.0.1 --ratio=1:15 -p 6393 --protocol=redis --tls --cert=${PWD}/test.crt --key=${PWD}/test.key --cacert=${PWD}/ca.crt --tls-skip-verify -t 4 --distinct-client-seed --hide-histogram --requests=$REQUESTS --clients=$CLIENTS --pipeline=$PIPELINE --data-size=$DATA_SIZE --key-pattern=G:G --key-minimum=${KEY_MINIMUM} --key-maximum=$KEY_MAXIMUM --key-median=$KEY_MEDIAN --key-stddev=$KEY_STDDEV | tee ./benchmarklogs-${{ matrix.variant.threads }}t/valkey_benchmarks_4threads_tls.txt || true 

    - name: Memtier 8 Threads Benchmark Redis with TLS
      run: |
        memtier_benchmark -s 127.0.0.1 --ratio=1:15 -p 6390 --protocol=redis --tls --cert=${PWD}/test.crt --key=${PWD}/test.key --cacert=${PWD}/ca.crt --tls-skip-verify -t 8 --distinct-client-seed --hide-histogram --requests=$REQUESTS --clients=$CLIENTS --pipeline=$PIPELINE --data-size=$DATA_SIZE --key-pattern=G:G --key-minimum=${KEY_MINIMUM} --key-maximum=$KEY_MAXIMUM --key-median=$KEY_MEDIAN --key-stddev=$KEY_STDDEV | tee ./benchmarklogs-${{ matrix.variant.threads }}t/redis_benchmarks_8threads_tls.txt || true
   
    - name: Memtier 8 Threads Benchmark KeyDB with TLS
      run: |
        memtier_benchmark -s 127.0.0.1 --ratio=1:15 -p 6391 --protocol=redis --tls --cert=${PWD}/test.crt --key=${PWD}/test.key --cacert=${PWD}/ca.crt --tls-skip-verify -t 8 --distinct-client-seed --hide-histogram --requests=$REQUESTS --clients=$CLIENTS --pipeline=$PIPELINE --data-size=$DATA_SIZE --key-pattern=G:G --key-minimum=${KEY_MINIMUM} --key-maximum=$KEY_MAXIMUM --key-median=$KEY_MEDIAN --key-stddev=$KEY_STDDEV | tee ./benchmarklogs-${{ matrix.variant.threads }}t/keydb_benchmarks_8threads_tls.txt || true
   
    - name: Memtier 8 Threads Benchmark Dragonfly with TLS
      run: |
        memtier_benchmark -s 127.0.0.1 --ratio=1:15 -p 6392 --protocol=redis --tls --cert=${PWD}/client_cert.pem --key=${PWD}/client_priv.pem --cacert=${PWD}/ca.crt -t 8 --distinct-client-seed --hide-histogram --requests=$REQUESTS --clients=$CLIENTS --pipeline=$PIPELINE --data-size=$DATA_SIZE --key-pattern=G:G --key-minimum=${KEY_MINIMUM} --key-maximum=$KEY_MAXIMUM --key-median=$KEY_MEDIAN --key-stddev=$KEY_STDDEV | tee ./benchmarklogs-${{ matrix.variant.threads }}t/dragonfly_benchmarks_8threads_tls.txt || true 

    - name: Memtier 8 Threads Benchmark Valkey with TLS
      run: |
        memtier_benchmark -s 127.0.0.1 --ratio=1:15 -p 6393 --protocol=redis --tls --cert=${PWD}/test.crt --key=${PWD}/test.key --cacert=${PWD}/ca.crt --tls-skip-verify -t 8 --distinct-client-seed --hide-histogram --requests=$REQUESTS --clients=$CLIENTS --pipeline=$PIPELINE --data-size=$DATA_SIZE --key-pattern=G:G --key-minimum=${KEY_MINIMUM} --key-maximum=$KEY_MAXIMUM --key-median=$KEY_MEDIAN --key-stddev=$KEY_STDDEV | tee ./benchmarklogs-${{ matrix.variant.threads }}t/valkey_benchmarks_8threads_tls.txt || true 

    - name: Convert Redis 1 Threads Benchmark to MD
      continue-on-error: true
      run: |
        python scripts/parse_memtier_to_md.py ./benchmarklogs-${{ matrix.variant.threads }}t/redis_benchmarks_1threads.txt "Redis 1 Thread"
        cat ./benchmarklogs-${{ matrix.variant.threads }}t/redis_benchmarks_1threads.md 

    - name: Convert KeyDB 1 Threads Benchmark to MD
      continue-on-error: true
      run: |
        python scripts/parse_memtier_to_md.py ./benchmarklogs-${{ matrix.variant.threads }}t/keydb_benchmarks_1threads.txt "KeyDB 1 Thread"
        cat ./benchmarklogs-${{ matrix.variant.threads }}t/keydb_benchmarks_1threads.md 

    - name: Convert Dragonfly 1 Threads Benchmark to MD
      continue-on-error: true
      run: |
        python scripts/parse_memtier_to_md.py ./benchmarklogs-${{ matrix.variant.threads }}t/dragonfly_benchmarks_1threads.txt "Dragonfly 1 Threads"
        cat ./benchmarklogs-${{ matrix.variant.threads }}t/dragonfly_benchmarks_1threads.md 

    - name: Convert Valkey 1 Threads Benchmark to MD
      continue-on-error: true
      run: |
        python scripts/parse_memtier_to_md.py ./benchmarklogs-${{ matrix.variant.threads }}t/valkey_benchmarks_1threads.txt "Valkey 1 Thread"
        cat ./benchmarklogs-${{ matrix.variant.threads }}t/valkey_benchmarks_1threads.md 

    - name: Convert Redis 2 Threads Benchmark to MD
      continue-on-error: true
      run: |
        python scripts/parse_memtier_to_md.py ./benchmarklogs-${{ matrix.variant.threads }}t/redis_benchmarks_2threads.txt "Redis 2 Threads"
        cat ./benchmarklogs-${{ matrix.variant.threads }}t/redis_benchmarks_2threads.md 

    - name: Convert KeyDB 2 Threads Benchmark to MD
      continue-on-error: true
      run: |
        python scripts/parse_memtier_to_md.py ./benchmarklogs-${{ matrix.variant.threads }}t/keydb_benchmarks_2threads.txt "KeyDB 2 Threads"
        cat ./benchmarklogs-${{ matrix.variant.threads }}t/keydb_benchmarks_2threads.md 

    - name: Convert Dragonfly 2 Threads Benchmark to MD
      continue-on-error: true
      run: |
        python scripts/parse_memtier_to_md.py ./benchmarklogs-${{ matrix.variant.threads }}t/dragonfly_benchmarks_2threads.txt "Dragonfly 2 Thread"
        cat ./benchmarklogs-${{ matrix.variant.threads }}t/dragonfly_benchmarks_2threads.md 

    - name: Convert Valkey 2 Threads Benchmark to MD
      continue-on-error: true
      run: |
        python scripts/parse_memtier_to_md.py ./benchmarklogs-${{ matrix.variant.threads }}t/valkey_benchmarks_2threads.txt "Valkey 2 Threads"
        cat ./benchmarklogs-${{ matrix.variant.threads }}t/valkey_benchmarks_2threads.md 

    - name: Convert Redis 4 Threads Benchmark to MD
      continue-on-error: true
      run: |
        python scripts/parse_memtier_to_md.py ./benchmarklogs-${{ matrix.variant.threads }}t/redis_benchmarks_4threads.txt "Redis 4 Threads"
        cat ./benchmarklogs-${{ matrix.variant.threads }}t/redis_benchmarks_4threads.md 

    - name: Convert KeyDB 4 Threads Benchmark to MD
      continue-on-error: true
      run: |
        python scripts/parse_memtier_to_md.py ./benchmarklogs-${{ matrix.variant.threads }}t/keydb_benchmarks_4threads.txt "KeyDB 4 Threads"
        cat ./benchmarklogs-${{ matrix.variant.threads }}t/keydb_benchmarks_4threads.md 

    - name: Convert Dragonfly 4 Threads Benchmark to MD
      continue-on-error: true
      run: |
        python scripts/parse_memtier_to_md.py ./benchmarklogs-${{ matrix.variant.threads }}t/dragonfly_benchmarks_4threads.txt "Dragonfly 4 Threads"
        cat ./benchmarklogs-${{ matrix.variant.threads }}t/dragonfly_benchmarks_4threads.md 

    - name: Convert Valkey 4 Threads Benchmark to MD
      continue-on-error: true
      run: |
        python scripts/parse_memtier_to_md.py ./benchmarklogs-${{ matrix.variant.threads }}t/valkey_benchmarks_4threads.txt "Valkey 4 Threads"
        cat ./benchmarklogs-${{ matrix.variant.threads }}t/valkey_benchmarks_4threads.md 

    - name: Convert Redis 8 Threads Benchmark to MD
      continue-on-error: true
      run: |
        python scripts/parse_memtier_to_md.py ./benchmarklogs-${{ matrix.variant.threads }}t/redis_benchmarks_8threads.txt "Redis 8 Threads"
        cat ./benchmarklogs-${{ matrix.variant.threads }}t/redis_benchmarks_8threads.md 

    - name: Convert KeyDB 8 Threads Benchmark to MD
      continue-on-error: true
      run: |
        python scripts/parse_memtier_to_md.py ./benchmarklogs-${{ matrix.variant.threads }}t/keydb_benchmarks_8threads.txt "KeyDB 8 Threads"
        cat ./benchmarklogs-${{ matrix.variant.threads }}t/keydb_benchmarks_8threads.md 

    - name: Convert Dragonfly 8 Threads Benchmark to MD
      continue-on-error: true
      run: |
        python scripts/parse_memtier_to_md.py ./benchmarklogs-${{ matrix.variant.threads }}t/dragonfly_benchmarks_8threads.txt "Dragonfly 8 Threads"
        cat ./benchmarklogs-${{ matrix.variant.threads }}t/dragonfly_benchmarks_8threads.md 

    - name: Convert Valkey 8 Threads Benchmark to MD
      continue-on-error: true
      run: |
        python scripts/parse_memtier_to_md.py ./benchmarklogs-${{ matrix.variant.threads }}t/valkey_benchmarks_8threads.txt "Valkey 8 Threads"
        cat ./benchmarklogs-${{ matrix.variant.threads }}t/valkey_benchmarks_8threads.md 

    - name: Convert Redis 1 Threads Benchmark with TLS to MD
      continue-on-error: true
      run: |
        python scripts/parse_memtier_to_md.py ./benchmarklogs-${{ matrix.variant.threads }}t/redis_benchmarks_1threads_tls.txt "Redis TLS 1 Thread"
        cat ./benchmarklogs-${{ matrix.variant.threads }}t/redis_benchmarks_1threads_tls.md
   
    - name: Convert KeyDB 1 Threads Benchmark with TLS to MD
      continue-on-error: true
      run: |
        python scripts/parse_memtier_to_md.py ./benchmarklogs-${{ matrix.variant.threads }}t/keydb_benchmarks_1threads_tls.txt "KeyDB TLS 1 Thread"
        cat ./benchmarklogs-${{ matrix.variant.threads }}t/keydb_benchmarks_1threads_tls.md
   
    - name: Convert Dragonfly 1 Threads Benchmark with TLS to MD
      continue-on-error: true
      run: |
        python scripts/parse_memtier_to_md.py ./benchmarklogs-${{ matrix.variant.threads }}t/dragonfly_benchmarks_1threads_tls.txt "Dragonfly TLS 1 Thread"
        cat ./benchmarklogs-${{ matrix.variant.threads }}t/dragonfly_benchmarks_1threads_tls.md 

    - name: Convert Valkey 1 Threads Benchmark with TLS to MD
      continue-on-error: true
      run: |
        python scripts/parse_memtier_to_md.py ./benchmarklogs-${{ matrix.variant.threads }}t/valkey_benchmarks_1threads_tls.txt "Valkey TLS 1 Thread"
        cat ./benchmarklogs-${{ matrix.variant.threads }}t/valkey_benchmarks_1threads_tls.md
   
    - name: Convert Redis 2 Threads Benchmark with TLS to MD
      continue-on-error: true
      run: |
        python scripts/parse_memtier_to_md.py ./benchmarklogs-${{ matrix.variant.threads }}t/redis_benchmarks_2threads_tls.txt "Redis TLS 2 Threads"
        cat ./benchmarklogs-${{ matrix.variant.threads }}t/redis_benchmarks_2threads_tls.md
   
    - name: Convert KeyDB 2 Threads Benchmark with TLS to MD
      continue-on-error: true
      run: |
        python scripts/parse_memtier_to_md.py ./benchmarklogs-${{ matrix.variant.threads }}t/keydb_benchmarks_2threads_tls.txt "KeyDB TLS 2 Threads"
        cat ./benchmarklogs-${{ matrix.variant.threads }}t/keydb_benchmarks_2threads_tls.md
   
    - name: Convert Dragonfly 2 Threads Benchmark with TLS to MD
      continue-on-error: true
      run: |
        python scripts/parse_memtier_to_md.py ./benchmarklogs-${{ matrix.variant.threads }}t/dragonfly_benchmarks_2threads_tls.txt "Dragonfly TLS 2 Threads"
        cat ./benchmarklogs-${{ matrix.variant.threads }}t/dragonfly_benchmarks_2threads_tls.md 

    - name: Convert Valkey 2 Threads Benchmark with TLS to MD
      continue-on-error: true
      run: |
        python scripts/parse_memtier_to_md.py ./benchmarklogs-${{ matrix.variant.threads }}t/valkey_benchmarks_2threads_tls.txt "Valkey TLS 2 Threads"
        cat ./benchmarklogs-${{ matrix.variant.threads }}t/valkey_benchmarks_2threads_tls.md 

    - name: Convert Redis 4 Threads Benchmark with TLS to MD
      continue-on-error: true
      run: |
        python scripts/parse_memtier_to_md.py ./benchmarklogs-${{ matrix.variant.threads }}t/redis_benchmarks_4threads_tls.txt "Redis TLS 4 Threads"
        cat ./benchmarklogs-${{ matrix.variant.threads }}t/redis_benchmarks_4threads_tls.md
   
    - name: Convert KeyDB 4 Threads Benchmark with TLS to MD
      continue-on-error: true
      run: |
        python scripts/parse_memtier_to_md.py ./benchmarklogs-${{ matrix.variant.threads }}t/keydb_benchmarks_4threads_tls.txt "KeyDB TLS 4 Threads"
        cat ./benchmarklogs-${{ matrix.variant.threads }}t/keydb_benchmarks_4threads_tls.md
   
    - name: Convert Dragonfly 4 Threads Benchmark with TLS to MD
      continue-on-error: true
      run: |
        python scripts/parse_memtier_to_md.py ./benchmarklogs-${{ matrix.variant.threads }}t/dragonfly_benchmarks_4threads_tls.txt "Dragonfly TLS 4 Threads"
        cat ./benchmarklogs-${{ matrix.variant.threads }}t/dragonfly_benchmarks_4threads_tls.md 

    - name: Convert Valkey 4 Threads Benchmark with TLS to MD
      continue-on-error: true
      run: |
        python scripts/parse_memtier_to_md.py ./benchmarklogs-${{ matrix.variant.threads }}t/valkey_benchmarks_4threads_tls.txt "Valkey TLS 4 Threads"
        cat ./benchmarklogs-${{ matrix.variant.threads }}t/valkey_benchmarks_4threads_tls.md
   
    - name: Convert Redis 8 Threads Benchmark with TLS to MD
      continue-on-error: true
      run: |
        python scripts/parse_memtier_to_md.py ./benchmarklogs-${{ matrix.variant.threads }}t/redis_benchmarks_8threads_tls.txt "Redis TLS 8 Threads"
        cat ./benchmarklogs-${{ matrix.variant.threads }}t/redis_benchmarks_8threads_tls.md
   
    - name: Convert KeyDB 8 Threads Benchmark with TLS to MD
      continue-on-error: true
      run: |
        python scripts/parse_memtier_to_md.py ./benchmarklogs-${{ matrix.variant.threads }}t/keydb_benchmarks_8threads_tls.txt "KeyDB TLS 8 Threads"
        cat ./benchmarklogs-${{ matrix.variant.threads }}t/keydb_benchmarks_8threads_tls.md
   
    - name: Convert Dragonfly 8 Threads Benchmark with TLS to MD
      continue-on-error: true
      run: |
        python scripts/parse_memtier_to_md.py ./benchmarklogs-${{ matrix.variant.threads }}t/dragonfly_benchmarks_8threads_tls.txt "Dragonfly TLS 8 Threads"
        cat ./benchmarklogs-${{ matrix.variant.threads }}t/dragonfly_benchmarks_8threads_tls.md 

    - name: Convert Valkey 8 Threads Benchmark with TLS to MD
      continue-on-error: true
      run: |
        python scripts/parse_memtier_to_md.py ./benchmarklogs-${{ matrix.variant.threads }}t/valkey_benchmarks_8threads_tls.txt "Valkey TLS 8 Threads"
        cat ./benchmarklogs-${{ matrix.variant.threads }}t/valkey_benchmarks_8threads_tls.md 

    - name: Combine Redis Benchmark MD Table
      continue-on-error: true
      run: |
        python scripts/combine_markdown_results_matrix.py "./benchmarklogs-${{ matrix.variant.threads }}t/redis_benchmarks_1threads.md ./benchmarklogs-${{ matrix.variant.threads }}t/redis_benchmarks_2threads.md ./benchmarklogs-${{ matrix.variant.threads }}t/redis_benchmarks_4threads.md ./benchmarklogs-${{ matrix.variant.threads }}t/redis_benchmarks_8threads.md" redis "./benchmarklogs-${{ matrix.variant.threads }}t"
        cat ./benchmarklogs-${{ matrix.variant.threads }}t/combined_redis_results.md 

    - name: Combine KeyDB Benchmark MD Table
      continue-on-error: true
      run: |
        python scripts/combine_markdown_results_matrix.py "./benchmarklogs-${{ matrix.variant.threads }}t/keydb_benchmarks_1threads.md ./benchmarklogs-${{ matrix.variant.threads }}t/keydb_benchmarks_2threads.md ./benchmarklogs-${{ matrix.variant.threads }}t/keydb_benchmarks_4threads.md ./benchmarklogs-${{ matrix.variant.threads }}t/keydb_benchmarks_8threads.md" keydb "./benchmarklogs-${{ matrix.variant.threads }}t"
        cat ./benchmarklogs-${{ matrix.variant.threads }}t/combined_keydb_results.md 

    - name: Combine Dragonfly Benchmark MD Table
      continue-on-error: true
      run: |
        python scripts/combine_markdown_results_matrix.py "./benchmarklogs-${{ matrix.variant.threads }}t/dragonfly_benchmarks_1threads.md ./benchmarklogs-${{ matrix.variant.threads }}t/dragonfly_benchmarks_2threads.md ./benchmarklogs-${{ matrix.variant.threads }}t/dragonfly_benchmarks_4threads.md ./benchmarklogs-${{ matrix.variant.threads }}t/dragonfly_benchmarks_8threads.md" dragonfly "./benchmarklogs-${{ matrix.variant.threads }}t"
        cat ./benchmarklogs-${{ matrix.variant.threads }}t/combined_dragonfly_results.md 

    - name: Combine Valkey Benchmark MD Table
      continue-on-error: true
      run: |
        python scripts/combine_markdown_results_matrix.py "./benchmarklogs-${{ matrix.variant.threads }}t/valkey_benchmarks_1threads.md ./benchmarklogs-${{ matrix.variant.threads }}t/valkey_benchmarks_2threads.md ./benchmarklogs-${{ matrix.variant.threads }}t/valkey_benchmarks_4threads.md ./benchmarklogs-${{ matrix.variant.threads }}t/valkey_benchmarks_8threads.md" valkey "./benchmarklogs-${{ matrix.variant.threads }}t"
        cat ./benchmarklogs-${{ matrix.variant.threads }}t/combined_valkey_results.md 

    - name: Combine Redis TLS Benchmark MD Table
      continue-on-error: true
      run: |
        python scripts/combine_markdown_results_matrix.py "./benchmarklogs-${{ matrix.variant.threads }}t/redis_benchmarks_1threads_tls.md ./benchmarklogs-${{ matrix.variant.threads }}t/redis_benchmarks_2threads_tls.md ./benchmarklogs-${{ matrix.variant.threads }}t/redis_benchmarks_4threads_tls.md ./benchmarklogs-${{ matrix.variant.threads }}t/redis_benchmarks_8threads_tls.md" "redis-tls" "./benchmarklogs-${{ matrix.variant.threads }}t"
        cat ./benchmarklogs-${{ matrix.variant.threads }}t/combined_redis-tls_results.md 

    - name: Combine KeyDB TLS Benchmark MD Table
      continue-on-error: true
      run: |
        python scripts/combine_markdown_results_matrix.py "./benchmarklogs-${{ matrix.variant.threads }}t/keydb_benchmarks_1threads_tls.md ./benchmarklogs-${{ matrix.variant.threads }}t/keydb_benchmarks_2threads_tls.md ./benchmarklogs-${{ matrix.variant.threads }}t/keydb_benchmarks_4threads_tls.md ./benchmarklogs-${{ matrix.variant.threads }}t/keydb_benchmarks_8threads_tls.md" "keydb-tls" "./benchmarklogs-${{ matrix.variant.threads }}t"
        cat ./benchmarklogs-${{ matrix.variant.threads }}t/combined_keydb-tls_results.md 

    - name: Combine Dragonfly TLS Benchmark MD Table
      continue-on-error: true
      run: |
        python scripts/combine_markdown_results_matrix.py "./benchmarklogs-${{ matrix.variant.threads }}t/dragonfly_benchmarks_1threads_tls.md ./benchmarklogs-${{ matrix.variant.threads }}t/dragonfly_benchmarks_2threads_tls.md ./benchmarklogs-${{ matrix.variant.threads }}t/dragonfly_benchmarks_4threads_tls.md ./benchmarklogs-${{ matrix.variant.threads }}t/dragonfly_benchmarks_8threads_tls.md" "dragonfly-tls" "./benchmarklogs-${{ matrix.variant.threads }}t"
        cat ./benchmarklogs-${{ matrix.variant.threads }}t/combined_dragonfly-tls_results.md 

    - name: Combine Valkey TLS Benchmark MD Table
      continue-on-error: true
      run: |
        python scripts/combine_markdown_results_matrix.py "./benchmarklogs-${{ matrix.variant.threads }}t/valkey_benchmarks_1threads_tls.md ./benchmarklogs-${{ matrix.variant.threads }}t/valkey_benchmarks_2threads_tls.md ./benchmarklogs-${{ matrix.variant.threads }}t/valkey_benchmarks_4threads_tls.md ./benchmarklogs-${{ matrix.variant.threads }}t/valkey_benchmarks_8threads_tls.md" "valkey-tls" "./benchmarklogs-${{ matrix.variant.threads }}t"
        cat ./benchmarklogs-${{ matrix.variant.threads }}t/combined_valkey-tls_results.md

    - name: Combine benchmark Markdown results
      continue-on-error: true
      run: |
        # Create a single combined file in the desired order
        cat \
          ./benchmarklogs-${{ matrix.variant.threads }}t/combined_redis_results.md \
          ./benchmarklogs-${{ matrix.variant.threads }}t/combined_keydb_results.md \
          ./benchmarklogs-${{ matrix.variant.threads }}t/combined_dragonfly_results.md \
          ./benchmarklogs-${{ matrix.variant.threads }}t/combined_valkey_results.md \
          > ./combined_all_results.md 

        echo "✅ All results merged into combined_all_results.md" 

    - name: Combine TLS benchmark Markdown results
      continue-on-error: true
      run: |
        # Create a single combined file in the desired order
        cat \
          ./benchmarklogs-${{ matrix.variant.threads }}t/combined_redis-tls_results.md \
          ./benchmarklogs-${{ matrix.variant.threads }}t/combined_keydb-tls_results.md \
          ./benchmarklogs-${{ matrix.variant.threads }}t/combined_dragonfly-tls_results.md \
          ./benchmarklogs-${{ matrix.variant.threads }}t/combined_valkey-tls_results.md \
          > ./combined_all_results_tls.md 

        echo "✅ All results merged into combined_all_results_tls.md" 

    - name: Debug Combined Results File
      run: |
        echo "=== Check if combined file exists ==="
        ls -la combined_all_results.md
        echo "=== First 20 lines of combined file ==="
        head -20 combined_all_results.md
        echo "=== File size ==="
        wc -l combined_all_results.md 

    - name: Set up Python 3.x
      uses: actions/setup-python@v5
      with:
        python-version: "3.x" 

    - name: Install charting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pandas matplotlib seaborn numpy

    - name: Debug Chart Input Data
      continue-on-error: true
      run: |
        echo "=== Contents of combined_all_results.md ==="
        cat combined_all_results.md
       
        echo "=== Check for database names ==="
        grep -E "(Redis|KeyDB|Dragonfly|Valkey)" combined_all_results.md || echo "No database names found"
       
        echo "=== Check for Ops/sec data ==="
        grep -i "ops/sec" combined_all_results.md || echo "No ops/sec data found"
       
        echo "=== Check table structure ==="
        grep "|" combined_all_results.md | head -10 

    - name: Generate non-TLS Latency Charts
      continue-on-error: true
      run: |
        python scripts/latency-charts-matrix.py combined_all_results.md nonTLS "./benchmarklogs-${{ matrix.variant.threads }}t" --redis_io_threads ${{ matrix.variant.redis_io_threads }} --keydb_server_threads ${{ matrix.variant.keydb_server_threads }} --dragonfly_proactor_threads ${{ matrix.variant.dragonfly_proactor_threads }} --valkey_io_threads ${{ matrix.variant.valkey_io_threads }} --requests ${{ inputs.requests }} --clients ${{ inputs.clients }} --pipeline ${{ inputs.pipeline }} --data_size ${{ inputs.data_size }} 2>&1 | tee ./benchmarklogs-${{ matrix.variant.threads }}t/latency-charts-nonTLS.log

    - name: Generate non-TLS Ops/Sec Charts
      continue-on-error: true
      run: |
        python scripts/opssec-charts-matrix.py combined_all_results.md nonTLS "./benchmarklogs-${{ matrix.variant.threads }}t" --redis_io_threads ${{ matrix.variant.redis_io_threads }} --keydb_server_threads ${{ matrix.variant.keydb_server_threads }} --dragonfly_proactor_threads ${{ matrix.variant.dragonfly_proactor_threads }} --valkey_io_threads ${{ matrix.variant.valkey_io_threads }} --requests ${{ inputs.requests }} --clients ${{ inputs.clients }} --pipeline ${{ inputs.pipeline }} --data_size ${{ inputs.data_size }} 2>&1 | tee ./benchmarklogs-${{ matrix.variant.threads }}t/opssec-charts-nonTLS.log

    - name: Generate TLS Latency Charts
      continue-on-error: true
      run: |
        python scripts/latency-charts-matrix.py combined_all_results_tls.md TLS "./benchmarklogs-${{ matrix.variant.threads }}t" --redis_io_threads ${{ matrix.variant.redis_io_threads }} --keydb_server_threads ${{ matrix.variant.keydb_server_threads }} --dragonfly_proactor_threads ${{ matrix.variant.dragonfly_proactor_threads }} --valkey_io_threads ${{ matrix.variant.valkey_io_threads }} --requests ${{ inputs.requests }} --clients ${{ inputs.clients }} --pipeline ${{ inputs.pipeline }} --data_size ${{ inputs.data_size }} 2>&1 | tee ./benchmarklogs-${{ matrix.variant.threads }}t/latency-charts-TLS.log

    - name: Generate TLS Ops/Sec Charts
      continue-on-error: true
      run: |
        python scripts/opssec-charts-matrix.py combined_all_results_tls.md TLS "./benchmarklogs-${{ matrix.variant.threads }}t" --redis_io_threads ${{ matrix.variant.redis_io_threads }} --keydb_server_threads ${{ matrix.variant.keydb_server_threads }} --dragonfly_proactor_threads ${{ matrix.variant.dragonfly_proactor_threads }} --valkey_io_threads ${{ matrix.variant.valkey_io_threads }} --requests ${{ inputs.requests }} --clients ${{ inputs.clients }} --pipeline ${{ inputs.pipeline }} --data_size ${{ inputs.data_size }} 2>&1 | tee ./benchmarklogs-${{ matrix.variant.threads }}t/opssec-charts-TLS.log

    - name: Capture Versions for Benchmark Report
      continue-on-error: true
      run: |
        mkdir -p ./benchmarklogs-${{ matrix.variant.threads }}t
        echo "# Database Versions Used" > ./benchmarklogs-${{ matrix.variant.threads }}t/versions.md
        echo "" >> ./benchmarklogs-${{ matrix.variant.threads }}t/versions.md
        echo "| Database | Version |" >> ./benchmarklogs-${{ matrix.variant.threads }}t/versions.md
        echo "|----------|---------|" >> ./benchmarklogs-${{ matrix.variant.threads }}t/versions.md
        
        REDIS_VER=$(docker exec redis redis-server --version 2>/dev/null | cut -d' ' -f3 || docker exec redis redis-cli INFO server | grep redis_version | cut -d: -f2 | tr -d '\r')
        echo "| Redis | ${REDIS_VER} |" >> ./benchmarklogs-${{ matrix.variant.threads }}t/versions.md
        
        KEYDB_VER=$(docker exec keydb keydb-server --version 2>/dev/null | cut -d' ' -f3 || docker exec keydb keydb-cli INFO server | grep -E "(keydb_version|redis_version)" | head -1 | cut -d: -f2 | tr -d '\r')
        echo "| KeyDB | ${KEYDB_VER} |" >> ./benchmarklogs-${{ matrix.variant.threads }}t/versions.md
        
        DRAGONFLY_VER=$(docker exec dragonfly dragonfly --version 2>/dev/null | cut -d' ' -f2 | head -n1 || docker logs dragonfly 2>&1 | grep -i "version" | head -1 | cut -d' ' -f4 || echo "unknown")
        echo "| Dragonfly | ${DRAGONFLY_VER} |" >> ./benchmarklogs-${{ matrix.variant.threads }}t/versions.md
        
        VALKEY_VER=$(docker exec valkey valkey-server --version 2>/dev/null | cut -d' ' -f3 || docker exec valkey redis-cli INFO server | grep -E "(valkey_version|redis_version)" | head -1 | cut -d: -f2 | tr -d '\r')
        echo "| Valkey | ${VALKEY_VER} |" >> ./benchmarklogs-${{ matrix.variant.threads }}t/versions.md
        
        cat ./benchmarklogs-${{ matrix.variant.threads }}t/versions.md  

    - name: Create Benchmark Summary with Parameters
      run: |
        echo "# Benchmark v5 Configuration Summary - ${{ matrix.variant.threads }} Threads" > ./benchmarklogs-${{ matrix.variant.threads }}t/benchmark_config.md
        echo "" >> ./benchmarklogs-${{ matrix.variant.threads }}t/benchmark_config.md
        echo "| Parameter | Value |" >> ./benchmarklogs-${{ matrix.variant.threads }}t/benchmark_config.md
        echo "|-----------|-------|" >> ./benchmarklogs-${{ matrix.variant.threads }}t/benchmark_config.md
        echo "| Thread Variant | ${{ matrix.variant.threads }} |" >> ./benchmarklogs-${{ matrix.variant.threads }}t/benchmark_config.md
        echo "| Requests | ${{ inputs.requests || '2000' }} |" >> ./benchmarklogs-${{ matrix.variant.threads }}t/benchmark_config.md
        echo "| Clients | ${{ inputs.clients || '100' }} |" >> ./benchmarklogs-${{ matrix.variant.threads }}t/benchmark_config.md
        echo "| Pipeline | ${{ inputs.pipeline || '1' }} |" >> ./benchmarklogs-${{ matrix.variant.threads }}t/benchmark_config.md
        echo "| Data Size | ${{ inputs.data_size || '1024' }} bytes |" >> ./benchmarklogs-${{ matrix.variant.threads }}t/benchmark_config.md
        echo "| Key Minimum | ${KEY_MINIMUM} |" >> ./benchmarklogs-${{ matrix.variant.threads }}t/benchmark_config.md
        echo "| Key Maximum | ${{ inputs.key_maximum || '1000000' }} |" >> ./benchmarklogs-${{ matrix.variant.threads }}t/benchmark_config.md
        echo "| Ratio | 1:15 (Read:Write) |" >> ./benchmarklogs-${{ matrix.variant.threads }}t/benchmark_config.md
        echo "| Key Pattern | G:G (Gaussian) |" >> ./benchmarklogs-${{ matrix.variant.threads }}t/benchmark_config.md
        echo "| Intrinsic Latency | ${{ inputs.intrinsic_latency || '5' }} |" >> ./benchmarklogs-${{ matrix.variant.threads }}t/benchmark_config.md
        echo "| Redis IO Threads | ${{ matrix.variant.redis_io_threads }} |" >> ./benchmarklogs-${{ matrix.variant.threads }}t/benchmark_config.md
        echo "| KeyDB Server Threads | ${{ matrix.variant.keydb_server_threads }} |" >> ./benchmarklogs-${{ matrix.variant.threads }}t/benchmark_config.md
        echo "| Dragonfly Proactor Threads | ${{ matrix.variant.dragonfly_proactor_threads }} |" >> ./benchmarklogs-${{ matrix.variant.threads }}t/benchmark_config.md
        echo "| Valkey IO Threads | ${{ matrix.variant.valkey_io_threads }} |" >> ./benchmarklogs-${{ matrix.variant.threads }}t/benchmark_config.md
        echo "" >> ./benchmarklogs-${{ matrix.variant.threads }}t/benchmark_config.md
        echo "Run Date: $(date -u)" >> ./benchmarklogs-${{ matrix.variant.threads }}t/benchmark_config.md
        echo "Workflow Run: ${{ github.run_number }}" >> ./benchmarklogs-${{ matrix.variant.threads }}t/benchmark_config.md
        
        cat ./benchmarklogs-${{ matrix.variant.threads }}t/benchmark_config.md  

    - name: Generate Advanced Benchmark Charts
      continue-on-error: true
      run: |
        echo "=== Generating Advanced Benchmark Charts ==="
        
        # Check if input files exist and show their structure
        if [ -f "combined_all_results.md" ]; then
          echo "✅ Found combined_all_results.md"
          echo "First 20 lines:"
          head -20 combined_all_results.md
        else
          echo "❌ combined_all_results.md not found"
        fi
        
        if [ -f "combined_all_results_tls.md" ]; then
          echo "✅ Found combined_all_results_tls.md"
          echo "First 20 lines:"
          head -20 combined_all_results_tls.md
        else
          echo "❌ combined_all_results_tls.md not found"
        fi 

        sed -i '/| ---------------------------------------------------------------------------------------------------------------------------- |/d' combined_all_results.md
        sed -i '/| ---------------------------------------------------------------------------------------------------------------------------- |/d' combined_all_results_tls.md
        sed -i '/| Waits |/d' combined_all_results.md
        sed -i '/| Waits |/d' combined_all_results_tls.md
        
        # Generate non-TLS advanced charts
        echo "=== Generating non-TLS Advanced Charts ==="
        python scripts/benchmark_charts.py --non-tls --input-dir . --output-dir benchmarklogs-${{ matrix.variant.threads }}t 2>&1 | tee ./benchmarklogs-${{ matrix.variant.threads }}t/advanced-charts-nonTLS.log
        
        # Generate TLS advanced charts  
        echo "=== Generating TLS Advanced Charts ==="
        python scripts/benchmark_charts.py --tls --input-dir . --output-dir benchmarklogs-${{ matrix.variant.threads }}t 2>&1 | tee ./benchmarklogs-${{ matrix.variant.threads }}t/advanced-charts-TLS.log 

        # Generate stacked comparison chart (requires both datasets)
        echo "=== Generating Stacked Comparison Chart ==="
        python scripts/benchmark_charts.py --non-tls --tls --input-dir . --output-dir benchmarklogs-${{ matrix.variant.threads }}t 2>&1 | tee ./benchmarklogs-${{ matrix.variant.threads }}t/advanced-charts-stacked.log
        
        # List generated chart files
        echo "=== Generated Chart Files ==="
        ls -la benchmarklogs-${{ matrix.variant.threads }}t/advcharts-*.png || echo "No advanced chart files found"
        
        echo "✅ Advanced benchmark charts generation completed" 

    - name: Set up PHP for WordPress Redis Tests
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: redis, json
        coverage: none

    - name: Verify PHP Redis Extension and Test Files
      run: |
        echo "=== PHP Version and Extensions ==="
        php --version
        php -m | grep -E "(redis|json)" || echo "Extensions check"
        
        echo "=== Test Redis PHP Connection ==="
        php -r "
        try {
            \$redis = new Redis();
            echo 'Redis PHP extension: OK\n';
        } catch (Exception \$e) {
            echo 'Redis PHP extension failed: ' . \$e->getMessage() . '\n';
            exit(1);
        }
        "
        
        echo "=== Verify WordPress Redis Test Files ==="
        ls -la tests/php/
        if [ ! -f "tests/php/wp_object_cache_test.php" ]; then
            echo "ERROR: WordPress Redis test files not found!"
            exit 1
        fi
        echo "WordPress Redis test files verified"

    # PHP WordPress Tests Section - AFTER all memtier tests
    - name: Flush All Databases Before PHP Tests
      run: |
        echo "=== Flushing All Databases Before PHP Tests ==="
        
        # Flush all non-TLS databases
        echo "Flushing Redis (non-TLS)..."
        docker exec redis redis-cli -h 127.0.0.1 -p 6379 FLUSHALL || echo "Redis flush failed"
        
        echo "Flushing KeyDB (non-TLS)..."
        docker exec keydb keydb-cli -h 127.0.0.1 -p 6380 FLUSHALL || echo "KeyDB flush failed"
        
        echo "Flushing Dragonfly (non-TLS)..."
        docker exec dragonfly redis-cli -h 127.0.0.1 -p 6381 FLUSHALL || echo "Dragonfly flush failed"
        
        echo "Flushing Valkey (non-TLS)..."
        docker exec valkey redis-cli -h 127.0.0.1 -p 6382 FLUSHALL || echo "Valkey flush failed"
        
        # Flush all TLS databases
        echo "Flushing Redis (TLS)..."
        docker exec redis-tls redis-cli -h 127.0.0.1 -p 6390 --tls --insecure --cert /tls/test.crt --key /tls/test.key --cacert /tls/ca.crt FLUSHALL || echo "Redis TLS flush failed"
        
        echo "Flushing KeyDB (TLS)..."
        docker exec keydb-tls keydb-cli -h 127.0.0.1 -p 6391 --tls --insecure --cert /tls/test.crt --key /tls/test.key --cacert /tls/ca.crt FLUSHALL || echo "KeyDB TLS flush failed"
        
        echo "Flushing Dragonfly (TLS)..."
        docker exec dragonfly-tls redis-cli -h 127.0.0.1 -p 6392 --tls --cert /tls/test.crt --key /tls/test.key --cacert /tls/ca.crt FLUSHALL || echo "Dragonfly TLS flush failed"
        
        echo "Flushing Valkey (TLS)..."
        docker exec valkey-tls redis-cli -h 127.0.0.1 -p 6393 --tls --insecure --cert /tls/test.crt --key /tls/test.key --cacert /tls/ca.crt FLUSHALL || echo "Valkey TLS flush failed"
        
        echo "=== Database flush completed ==="
        
        # Verify databases are empty
        echo "=== Verifying Database State ==="
        echo "Redis keys: $(docker exec redis redis-cli -h 127.0.0.1 -p 6379 DBSIZE)"
        echo "KeyDB keys: $(docker exec keydb keydb-cli -h 127.0.0.1 -p 6380 DBSIZE)"
        echo "Dragonfly keys: $(docker exec dragonfly redis-cli -h 127.0.0.1 -p 6381 DBSIZE)"
        echo "Valkey keys: $(docker exec valkey redis-cli -h 127.0.0.1 -p 6382 DBSIZE)"

    - name: Run WordPress Object Cache PHP Tests
      run: |
        echo "=== Starting WordPress Object Cache PHP Tests ==="
        echo "Working directory: $(pwd)"
        
        # Copy TLS certs, keys and client PEMs to tests/php directory
        cp *.crt *.key *.pem tests/php/ 2>/dev/null || echo "TLS certificates not found, will skip TLS tests"
        
        # Configure test duration from environment variable in the source file
        sed -i "s/private \$test_duration = 30/private \$test_duration = ${PHP_TEST_DURATION}/" tests/php/wp_object_cache_test.php
        
        # Create custom config using echo commands for reliability - in tests/php directory
        echo '<?php' > tests/php/test_config.php
        echo 'return [' >> tests/php/test_config.php
        echo "    'duration' => ${PHP_TEST_DURATION}," >> tests/php/test_config.php
        echo "    'output_dir' => './benchmarklogs-${{ matrix.variant.threads }}t'," >> tests/php/test_config.php
        echo "    'test_tls' => true," >> tests/php/test_config.php
        echo "    'flush_before_test' => true," >> tests/php/test_config.php
        echo "    'databases' => [" >> tests/php/test_config.php
        echo "        'Redis' => ['host' => '127.0.0.1', 'port' => 6379, 'tls_port' => 6390]," >> tests/php/test_config.php
        echo "        'KeyDB' => ['host' => '127.0.0.1', 'port' => 6380, 'tls_port' => 6391]," >> tests/php/test_config.php
        echo "        'Dragonfly' => ['host' => '127.0.0.1', 'port' => 6381, 'tls_port' => 6392]," >> tests/php/test_config.php
        echo "        'Valkey' => ['host' => '127.0.0.1', 'port' => 6382, 'tls_port' => 6393]" >> tests/php/test_config.php
        echo "    ]" >> tests/php/test_config.php
        echo "];" >> tests/php/test_config.php
        
        # Create configured test runner using echo commands - in tests/php directory
        echo '<?php' > tests/php/wp_object_cache_test_configured.php
        echo "require_once 'RedisTestBase.php';" >> tests/php/wp_object_cache_test_configured.php
        echo "require_once 'wp_object_cache_test.php';" >> tests/php/wp_object_cache_test_configured.php
        echo "" >> tests/php/wp_object_cache_test_configured.php
        echo "if (php_sapi_name() === 'cli') {" >> tests/php/wp_object_cache_test_configured.php
        echo "    \$config = include 'test_config.php';" >> tests/php/wp_object_cache_test_configured.php
        echo "    \$test = new WordPressObjectCacheTest(\$config);" >> tests/php/wp_object_cache_test_configured.php
        echo "    \$test->run();" >> tests/php/wp_object_cache_test_configured.php
        echo "}" >> tests/php/wp_object_cache_test_configured.php
        
        # Run the WordPress Object Cache test from repository root
        echo "Running WordPress Object Cache Test for ${{ matrix.variant.threads }}t configuration..."
        echo "Test duration: ${PHP_TEST_DURATION} seconds"
        echo "Thread variant: ${{ matrix.variant.threads }}"
        echo "Database configurations:"
        echo "  Redis IO Threads: ${{ matrix.variant.redis_io_threads }}"
        echo "  KeyDB Server Threads: ${{ matrix.variant.keydb_server_threads }}"
        echo "  Dragonfly Proactor Threads: ${{ matrix.variant.dragonfly_proactor_threads }}"
        echo "  Valkey IO Threads: ${{ matrix.variant.valkey_io_threads }}"
        
        # Execute PHP test with full path, staying in repository root
        php tests/php/wp_object_cache_test_configured.php 2>&1 | tee ./benchmarklogs-${{ matrix.variant.threads }}t/php_wordpress_test.log
        
        echo "WordPress Object Cache PHP test completed"

    - name: Generate PHP WordPress Test Charts
      run: |
        echo "=== Generating PHP WordPress Test Charts ==="
        echo "Working directory: $(pwd)"
        
        # Install Python dependencies for charting
        python3 -m pip install --user pandas matplotlib seaborn numpy pathlib
        
        # Check if PHP test results exist
        if [ -d "./benchmarklogs-${{ matrix.variant.threads }}t" ]; then
            echo "Found PHP test results directory"
            ls -la ./benchmarklogs-${{ matrix.variant.threads }}t/*wordpress* || echo "No WordPress-specific files found"
            ls -la ./benchmarklogs-${{ matrix.variant.threads }}t/*.json || echo "No JSON files found"
        else
            echo "No PHP test results directory found"
            exit 1
        fi
        
        # Create PHP results subdirectory
        mkdir -p ./benchmarklogs-${{ matrix.variant.threads }}t/php_results
        
        # Copy/move any PHP JSON results to the subdirectory
        find ./benchmarklogs-${{ matrix.variant.threads }}t -name "*wordpress*" -type f -exec cp {} ./benchmarklogs-${{ matrix.variant.threads }}t/php_results/ \; 2>/dev/null || echo "No WordPress files to copy"
        find ./benchmarklogs-${{ matrix.variant.threads }}t -name "*.json" -type f -exec cp {} ./benchmarklogs-${{ matrix.variant.threads }}t/php_results/ \; 2>/dev/null || echo "No JSON files to copy"
        
        # Generate PHP charts if results exist - run from repository root with full path
        if [ -n "$(ls -A ./benchmarklogs-${{ matrix.variant.threads }}t/php_results/*.json 2>/dev/null)" ]; then
            echo "Generating charts from PHP results..."
            python3 tests/php/php_redis_charts.py \
                --results-dir ./benchmarklogs-${{ matrix.variant.threads }}t/php_results \
                --output-dir ./benchmarklogs-${{ matrix.variant.threads }}t 2>&1 | tee ./benchmarklogs-${{ matrix.variant.threads }}t/php_charts_generation.log
                
            echo "PHP chart generation completed"
            echo "Generated files:"
            ls -la ./benchmarklogs-${{ matrix.variant.threads }}t/php_redis_*.png || echo "No PNG charts generated"
            ls -la ./benchmarklogs-${{ matrix.variant.threads }}t/php_redis_*.md || echo "No markdown reports generated"
        else
            echo "No PHP JSON results found, skipping chart generation"
        fi

    - name: Create PHP WordPress Test Summary
      run: |
        echo "=== Creating PHP WordPress Test Summary ==="
        
        # Create summary using echo commands for reliability
        echo "# WordPress Object Cache PHP Test Summary - ${{ matrix.variant.threads }} Threads" > ./benchmarklogs-${{ matrix.variant.threads }}t/php_wordpress_summary.md
        echo "" >> ./benchmarklogs-${{ matrix.variant.threads }}t/php_wordpress_summary.md
        echo "**Test Configuration:**" >> ./benchmarklogs-${{ matrix.variant.threads }}t/php_wordpress_summary.md
        echo "- Thread Variant: ${{ matrix.variant.threads }}" >> ./benchmarklogs-${{ matrix.variant.threads }}t/php_wordpress_summary.md
        echo "- Test Duration: ${PHP_TEST_DURATION} seconds" >> ./benchmarklogs-${{ matrix.variant.threads }}t/php_wordpress_summary.md
        echo "- Redis IO Threads: ${{ matrix.variant.redis_io_threads }}" >> ./benchmarklogs-${{ matrix.variant.threads }}t/php_wordpress_summary.md
        echo "- KeyDB Server Threads: ${{ matrix.variant.keydb_server_threads }}" >> ./benchmarklogs-${{ matrix.variant.threads }}t/php_wordpress_summary.md
        echo "- Dragonfly Proactor Threads: ${{ matrix.variant.dragonfly_proactor_threads }}" >> ./benchmarklogs-${{ matrix.variant.threads }}t/php_wordpress_summary.md
        echo "- Valkey IO Threads: ${{ matrix.variant.valkey_io_threads }}" >> ./benchmarklogs-${{ matrix.variant.threads }}t/php_wordpress_summary.md
        echo "" >> ./benchmarklogs-${{ matrix.variant.threads }}t/php_wordpress_summary.md
        echo "**Test Details:**" >> ./benchmarklogs-${{ matrix.variant.threads }}t/php_wordpress_summary.md
        echo "- Test Type: WordPress Object Cache simulation" >> ./benchmarklogs-${{ matrix.variant.threads }}t/php_wordpress_summary.md
        echo "- Operations: 70% reads (GET), 30% writes (SETEX with TTL)" >> ./benchmarklogs-${{ matrix.variant.threads }}t/php_wordpress_summary.md
        echo "- Key Pattern: WordPress cache groups (posts, terms, users, options, comments)" >> ./benchmarklogs-${{ matrix.variant.threads }}t/php_wordpress_summary.md
        echo "- TTL Range: 1-24 hours" >> ./benchmarklogs-${{ matrix.variant.threads }}t/php_wordpress_summary.md
        echo "- Databases Tested: Redis, KeyDB, Dragonfly, Valkey (both non-TLS and TLS)" >> ./benchmarklogs-${{ matrix.variant.threads }}t/php_wordpress_summary.md
        echo "- Database State: FLUSHALL executed before tests" >> ./benchmarklogs-${{ matrix.variant.threads }}t/php_wordpress_summary.md
        echo "" >> ./benchmarklogs-${{ matrix.variant.threads }}t/php_wordpress_summary.md
        echo "**Workflow Information:**" >> ./benchmarklogs-${{ matrix.variant.threads }}t/php_wordpress_summary.md
        echo "- Workflow Run: ${{ github.run_number }}" >> ./benchmarklogs-${{ matrix.variant.threads }}t/php_wordpress_summary.md
        echo "- Commit SHA: ${{ github.sha }}" >> ./benchmarklogs-${{ matrix.variant.threads }}t/php_wordpress_summary.md
        echo "- Run Date: $(date -u)" >> ./benchmarklogs-${{ matrix.variant.threads }}t/php_wordpress_summary.md
        echo "- Matrix Variant: ${{ matrix.variant.threads }}t" >> ./benchmarklogs-${{ matrix.variant.threads }}t/php_wordpress_summary.md
        echo "" >> ./benchmarklogs-${{ matrix.variant.threads }}t/php_wordpress_summary.md
        echo "**Files Generated:**" >> ./benchmarklogs-${{ matrix.variant.threads }}t/php_wordpress_summary.md
        echo "- Raw test logs: php_wordpress_test.log" >> ./benchmarklogs-${{ matrix.variant.threads }}t/php_wordpress_summary.md
        echo "- JSON results: php_results/*.json" >> ./benchmarklogs-${{ matrix.variant.threads }}t/php_wordpress_summary.md
        echo "- Charts: php_redis_*.png" >> ./benchmarklogs-${{ matrix.variant.threads }}t/php_wordpress_summary.md
        echo "- Summary report: php_redis_benchmark_summary.md" >> ./benchmarklogs-${{ matrix.variant.threads }}t/php_wordpress_summary.md
        
        echo "PHP WordPress test summary created"

    - name: Prepare Thread-Specific Results Directory
      continue-on-error: true
      run: |
        # Create thread-specific results directory structure
        mkdir -p results/benchmarks-v6-host-${{ matrix.variant.threads }}t

        # Copy PHP test files and results
        mkdir -p results/benchmarks-v6-host-${{ matrix.variant.threads }}t/php_tests
        cp tests/php/*.php results/benchmarks-v6-host-${{ matrix.variant.threads }}t/php_tests/ 2>/dev/null || echo "No PHP files to copy"
        cp tests/php/*.py results/benchmarks-v6-host-${{ matrix.variant.threads }}t/php_tests/ 2>/dev/null || echo "No Python files to copy"

        # Copy PHP-specific results and summary
        cp ./benchmarklogs-${{ matrix.variant.threads }}t/php_wordpress_summary.md results/benchmarks-v6-host-${{ matrix.variant.threads }}t/ 2>/dev/null || echo "No PHP summary found"
        cp benchmarklogs-${{ matrix.variant.threads }}t/php_results/*.json results/benchmarks-v6-host-${{ matrix.variant.threads }}t/ 2>/dev/null || echo "No PHP JSON results to copy"
        
        # Copy files to thread-specific results directory
        cp ./.github/workflows/benchmarks-v6-host-phptests.yml results/benchmarks-v6-host-${{ matrix.variant.threads }}t/
        cp ./scripts/latency-charts.py results/benchmarks-v6-host-${{ matrix.variant.threads }}t/
        cp ./scripts/opssec-charts.py results/benchmarks-v6-host-${{ matrix.variant.threads }}t/
        cp ./scripts/combine_markdown_results.py results/benchmarks-v6-host-${{ matrix.variant.threads }}t/
        cp ./scripts/combine_markdown_results_matrix.py results/benchmarks-v6-host-${{ matrix.variant.threads }}t/
        cp ./scripts/parse_memtier_to_md.py results/benchmarks-v6-host-${{ matrix.variant.threads }}t/
        cp ./scripts/benchmark_charts.py results/benchmarks-v6-host-${{ matrix.variant.threads }}t/
        cp ./docker-compose.yml results/benchmarks-v6-host-${{ matrix.variant.threads }}t/
        cp ./Dockerfile-* results/benchmarks-v6-host-${{ matrix.variant.threads }}t/ 

        cp ./benchmarklogs-${{ matrix.variant.threads }}t/intrinsic_latency.log results/benchmarks-v6-host-${{ matrix.variant.threads }}t/
        cp ./benchmarklogs-${{ matrix.variant.threads }}t/versions.md results/benchmarks-v6-host-${{ matrix.variant.threads }}t/
        cp ./benchmarklogs-${{ matrix.variant.threads }}t/benchmark_config.md results/benchmarks-v6-host-${{ matrix.variant.threads }}t/
        sed -i '/| ---------------------------------------------------------------------------------------------------------------------------- |/d' combined_all_results.md
        sed -i '/| ---------------------------------------------------------------------------------------------------------------------------- |/d' combined_all_results_tls.md
        sed -i '/| Waits |/d' combined_all_results.md
        sed -i '/| Waits |/d' combined_all_results_tls.md
        cp combined_all_results.md results/benchmarks-v6-host-${{ matrix.variant.threads }}t/
        cp combined_all_results_tls.md results/benchmarks-v6-host-${{ matrix.variant.threads }}t/ 

        # Copy all chart files from thread-specific benchmarklogs directory to results directory
        cp benchmarklogs-${{ matrix.variant.threads }}t/*.png results/benchmarks-v6-host-${{ matrix.variant.threads }}t/ 2>/dev/null || true 

        # Add a timestamp file
        echo "Last updated: $(date -u)" > results/benchmarks-v6-host-${{ matrix.variant.threads }}t/last_updated.txt
        echo "Thread Variant: ${{ matrix.variant.threads }}" >> results/benchmarks-v6-host-${{ matrix.variant.threads }}t/last_updated.txt
        echo "Workflow run: ${{ github.run_number }}" >> results/benchmarks-v6-host-${{ matrix.variant.threads }}t/last_updated.txt
        echo "Commit SHA: ${{ github.sha }}" >> results/benchmarks-v6-host-${{ matrix.variant.threads }}t/last_updated.txt
        echo "Benchmark Config:" >> results/benchmarks-v6-host-${{ matrix.variant.threads }}t/last_updated.txt
        echo "  Requests: ${{ inputs.requests || '2000' }}" >> results/benchmarks-v6-host-${{ matrix.variant.threads }}t/last_updated.txt
        echo "  Clients: ${{ inputs.clients || '100' }}" >> results/benchmarks-v6-host-${{ matrix.variant.threads }}t/last_updated.txt
        echo "  Pipeline: ${{ inputs.pipeline || '1' }}" >> results/benchmarks-v6-host-${{ matrix.variant.threads }}t/last_updated.txt
        echo "  Data Size: ${{ inputs.data_size || '1024' }}" >> results/benchmarks-v6-host-${{ matrix.variant.threads }}t/last_updated.txt
        echo "  Key Range: ${KEY_MINIMUM}-${{ inputs.key_maximum || '1000000' }}" >> results/benchmarks-v6-host-${{ matrix.variant.threads }}t/last_updated.txt
        echo "  Intrinsic Latency: ${{ inputs.intrinsic_latency || '5' }}" >> results/benchmarks-v6-host-${{ matrix.variant.threads }}t/last_updated.txt
        echo "Server Configs:" >> results/benchmarks-v6-host-${{ matrix.variant.threads }}t/last_updated.txt
        echo "Redis IO Threads: ${{ matrix.variant.redis_io_threads }}" >> results/benchmarks-v6-host-${{ matrix.variant.threads }}t/last_updated.txt
        echo "KeyDB Server Threads: ${{ matrix.variant.keydb_server_threads }}" >> results/benchmarks-v6-host-${{ matrix.variant.threads }}t/last_updated.txt
        echo "Dragonfly Proactor Threads: ${{ matrix.variant.dragonfly_proactor_threads }}" >> results/benchmarks-v6-host-${{ matrix.variant.threads }}t/last_updated.txt
        echo "Valkey IO Threads: ${{ matrix.variant.valkey_io_threads }}" >> results/benchmarks-v6-host-${{ matrix.variant.threads }}t/last_updated.txt
        echo "PHP Tests:" >> results/benchmarks-v6-host-${{ matrix.variant.threads }}t/last_updated.txt
        echo "  WordPress Object Cache Test Duration: ${PHP_TEST_DURATION}s" >> results/benchmarks-v6-host-${{ matrix.variant.threads }}t/last_updated.txt
        echo "  PHP Version: $(php --version | head -1)" >> results/benchmarks-v6-host-${{ matrix.variant.threads }}t/last_updated.txt

    - name: Upload Thread-Specific Benchmark Logs and Charts
      uses: actions/upload-artifact@v4
      with:
        name: benchmark_v6_artifacts_${{ matrix.variant.threads }}t
        path: |
          benchmarklogs-${{ matrix.variant.threads }}t/**
          combined_all_results.md
          combined_all_results_tls.md
          results/benchmarks-v6-host-${{ matrix.variant.threads }}t/**

    - name: Cleanup
      run: |
        docker stop redis keydb dragonfly valkey redis-tls keydb-tls dragonfly-tls valkey-tls 2>/dev/null || true

  commit-results:
    needs: benchmark
    runs-on: ubuntu-24.04
    if: always() && (needs.benchmark.result == 'success' || needs.benchmark.result == 'failure')
    env:
      KEY_MINIMUM: 1
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download benchmark artifacts only
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts
        pattern: benchmark_v6_artifacts_*
        merge-multiple: false

    - name: List downloaded artifacts
      run: |
        echo "=== Downloaded Artifacts ==="
        ls -la ./artifacts/
        echo ""
        for artifact in ./artifacts/benchmark_v6_artifacts_*; do
          if [ -d "$artifact" ]; then
            echo "=== Contents of $artifact ==="
            ls -la "$artifact" | head -20
            echo ""
          fi
        done

    - name: Organize results by thread variant
      run: |
        echo "=== Organizing Results by Thread Variant ==="
        
        for artifact in ./artifacts/benchmark_v6_artifacts_*; do
          if [ -d "$artifact" ]; then
            # Extract thread variant from artifact name (e.g., benchmark_v6_artifacts_4t -> 4)
            thread_variant=$(basename "$artifact" | sed 's/benchmark_v6_artifacts_//' | sed 's/t$//')
            echo "Processing thread variant: ${thread_variant}t"
            
            # Create results directory
            mkdir -p "results/benchmarks-v6-host-${thread_variant}t"
            
            # Copy results directory if it exists in artifact
            if [ -d "$artifact/results/benchmarks-v6-host-${thread_variant}t" ]; then
              echo "Copying from artifact results directory..."
              cp -r "$artifact/results/benchmarks-v6-host-${thread_variant}t/"* "results/benchmarks-v6-host-${thread_variant}t/"
            else
              echo "No pre-built results directory found, building from artifact contents..."
              
              # Copy workflow and script files
              cp ./.github/workflows/benchmarks-v6-host-phptests.yml "results/benchmarks-v6-host-${thread_variant}t/" 2>/dev/null || echo "Warning: workflow file not found"
              cp ./scripts/*.py "results/benchmarks-v6-host-${thread_variant}t/" 2>/dev/null || echo "Warning: script files not found"
              cp ./docker-compose.yml "results/benchmarks-v6-host-${thread_variant}t/" 2>/dev/null || echo "Warning: docker-compose.yml not found"
              cp ./Dockerfile-* "results/benchmarks-v6-host-${thread_variant}t/" 2>/dev/null || echo "Warning: Dockerfiles not found"
              
              # Copy benchmark results and charts from artifact
              cp "$artifact"/benchmarklogs-${thread_variant}t/* "results/benchmarks-v6-host-${thread_variant}t/" 2>/dev/null || echo "Warning: benchmarklogs not found"
              cp "$artifact"/*.md "results/benchmarks-v6-host-${thread_variant}t/" 2>/dev/null || echo "Warning: markdown files not found"
              cp "$artifact"/*.png "results/benchmarks-v6-host-${thread_variant}t/" 2>/dev/null || echo "Warning: chart files not found"
              
              # Create metadata file
              echo "Last updated: $(date -u)" > "results/benchmarks-v6-host-${thread_variant}t/last_updated.txt"
              echo "Thread Variant: ${thread_variant}" >> "results/benchmarks-v6-host-${thread_variant}t/last_updated.txt"
              echo "Workflow run: ${{ github.run_number }}" >> "results/benchmarks-v6-host-${thread_variant}t/last_updated.txt"
              echo "Commit SHA: ${{ github.sha }}" >> "results/benchmarks-v6-host-${thread_variant}t/last_updated.txt"
              echo "Benchmark Config:" >> "results/benchmarks-v6-host-${thread_variant}t/last_updated.txt"
              echo "  Requests: ${{ inputs.requests || '2000' }}" >> "results/benchmarks-v6-host-${thread_variant}t/last_updated.txt"
              echo "  Clients: ${{ inputs.clients || '100' }}" >> "results/benchmarks-v6-host-${thread_variant}t/last_updated.txt"
              echo "  Pipeline: ${{ inputs.pipeline || '1' }}" >> "results/benchmarks-v6-host-${thread_variant}t/last_updated.txt"
              echo "  Data Size: ${{ inputs.data_size || '1024' }}" >> "results/benchmarks-v6-host-${thread_variant}t/last_updated.txt"
              echo "  Key Range: ${KEY_MINIMUM}-${{ inputs.key_maximum || '1000000' }}" >> "results/benchmarks-v6-host-${thread_variant}t/last_updated.txt"
              echo "  Intrinsic Latency: ${{ inputs.intrinsic_latency || '5' }}" >> "results/benchmarks-v6-host-${thread_variant}t/last_updated.txt"
            fi
            
            echo "✅ Completed organizing thread variant: ${thread_variant}t"
            echo "Results directory contents:"
            ls -la "results/benchmarks-v6-host-${thread_variant}t/" | head -10
            echo ""
          fi
        done

    - name: Verify organized results
      run: |
        echo "=== Final Results Directory Structure ==="
        ls -la results/
        echo ""
        
        for dir in results/benchmarks-v6-host-*t/; do
          if [ -d "$dir" ]; then
            echo "=== Contents of $dir ==="
            ls -la "$dir" | head -15
            echo ""
          fi
        done

    - name: Commit All Thread-Specific Results
      continue-on-error: true
      run: |
        echo "=== Starting Git Operations ==="
        
        # Configure git
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Fetch latest changes
        echo "Fetching latest changes..."
        git fetch origin
        
        # Check current status
        echo "Git status before pull:"
        git status
        
        # Pull latest changes
        echo "Pulling latest changes..."
        git pull origin ${{ github.ref_name }}
        
        # Stage all changes
        echo "Staging changes..."
        git add results/benchmarks-v6-host-*t/
        
        # Check what's staged
        echo "Staged changes:"
        git diff --staged --name-only
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          echo "Committing changes..."
          
          # Get list of thread variants for commit message
          thread_variants=$(ls results/ | grep benchmarks-v6-host- | sed 's/benchmarks-v6-host-//' | tr '\n' ' ' | sed 's/ $//')
          
          # Create comprehensive commit message
          git commit -m "Update benchmark + WordPress PHP v6 results for all thread variants from workflow run #${{ github.run_number }}
          
          Thread variants: ${thread_variants}
          - Updated benchmark results for Redis, KeyDB, Dragonfly, and Valkey
          - Generated charts for latency and ops/sec metrics
          - Both TLS and non-TLS configurations tested
          - Custom parameters: requests=${{ inputs.requests || '2000' }}, clients=${{ inputs.clients || '100' }}, pipeline=${{ inputs.pipeline || '1' }}, intrinsic_latency=${{ inputs.intrinsic_latency || '5' }}, data_size=${{ inputs.data_size || '1024' }}
          - Key range: ${KEY_MINIMUM}-${{ inputs.key_maximum || '1000000' }}
          - Workflow: ${{ github.workflow }}
          - Run: ${{ github.run_number }}
          - SHA: ${{ github.sha }}"
          
          # Push with retry logic
          echo "Pushing changes..."
          for i in {1..3}; do
            if git push origin HEAD; then
              echo "✅ Successfully pushed on attempt $i"
              break
            else
              echo "Push failed on attempt $i, retrying..."
              if [ $i -lt 3 ]; then
                echo "Fetching and rebasing..."
                git fetch origin
                git rebase origin/${{ github.ref_name }}
                sleep $((i * 2))
              else
                echo "❌ Failed to push after 3 attempts"
                exit 1
              fi
            fi
          done
          
          echo "✅ All thread-specific benchmark results committed and pushed successfully!"
        fi

    - name: Summary
      run: |
        echo "=== Commit Job Summary ==="
        echo "Successfully processed and committed results for thread variants:"
        ls results/ | grep benchmarks-v6-host- | sed 's/benchmarks-v6-host-/  - /'
        echo ""
        echo "Workflow run #${{ github.run_number }} completed successfully!"