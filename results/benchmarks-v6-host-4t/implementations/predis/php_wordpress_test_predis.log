WordPress Object Cache Test with Predis - Configured Runner
============================================================
Implementation: Predis (Pure PHP Redis Client)
Enhanced TLS Support: Yes
Statistical Analysis: 5 iterations with confidence intervals

📋 Loading configuration from: tests/php/test_config_predis.php
✅ Configuration loaded successfully

📊 Test Configuration:
  Implementation: Predis (Pure PHP)
  Duration per iteration: 10s
  Test iterations: 5
  Output directory: ./benchmarklogs-4t
  TLS testing: Enabled
  Flush before test: Yes
  Thread variant: 4
  Connection timeout: 5s
  Read/write timeout: 5s
  Connection retries: 3
  Persistent connections: No
  Thread configuration:
    redis_io_threads: 4 threads
    keydb_server_threads: 4 threads
    dragonfly_proactor_threads: 4 threads
    valkey_io_threads: 4 threads
  Database configurations:
    Redis: 127.0.0.1:6379 (TLS: 6390) (IO threads: 4)
    KeyDB: 127.0.0.1:6380 (TLS: 6391) (Server threads: 4)
    Dragonfly: 127.0.0.1:6381 (TLS: 6392) (Proactor threads: 4)
    Valkey: 127.0.0.1:6382 (TLS: 6393) (IO threads: 4)

======================================================================

🔍 Checking Predis availability...
✅ Predis library available

🚀 Starting Predis WordPress Object Cache Test...

Starting WordPress Object Cache Test (Predis)...
Timestamp: 2025-06-10 10:55:18 UTC
Predis Version: unknown
PHP Version: 8.4.8
Enhanced Testing Configuration (Predis):
- Iterations per test: 5
- Iteration pause: 500ms
- Statistical analysis: Enabled
- Raw data logging: Enabled
- Connection timeout: 5s
- Read/write timeout: 5s
- Connection retry attempts: 3
- Persistent connections: Disabled
- TCP keepalive: Enabled
Thread Variant: 4
Thread Configuration:
  redis_io_threads: 4 threads
  keydb_server_threads: 4 threads
  dragonfly_proactor_threads: 4 threads
  valkey_io_threads: 4 threads
TLS Certificates: Found and validated (Predis-compatible)

Checking TLS readiness (Predis)...
  Redis: TLS port accessible ✓
  KeyDB: TLS port accessible ✓
  Dragonfly: TLS port accessible ✓
  Valkey: TLS port accessible ✓

Predis TLS testing will be attempted for: Redis, KeyDB, Dragonfly, Valkey
============================================================
Testing Redis with Predis...
  Configuration: IO Threads: 4
  Running 5 iterations for Redis (non-TLS-Predis)...
  Initial keys in database: 190451
  Flushing database before test...
  Database flushed in 108.59ms. Keys remaining: 0
    Iteration 1/5... 8906 ops/sec, 0.112ms latency
    Iteration 2/5... 9484 ops/sec, 0.105ms latency
    Iteration 3/5... 9762 ops/sec, 0.102ms latency
    Iteration 4/5... 9902 ops/sec, 0.100ms latency
    Iteration 5/5... 10016 ops/sec, 0.099ms latency
  Redis (non-TLS-Predis): 9613.93±442.56 ops/sec (CV: 4.6%), 0.104±0.005ms latency, Quality: good
  Final keys in database: 44369
🔐 Attempting TLS connection to Redis at 127.0.0.1:6390 (Predis)
  Using custom port scheme: Redis=6390, KeyDB=6391, Dragonfly=6392, Valkey=6393
  Note: Predis uses 'tls' scheme and 'ssl' context array
  📡 Method 1: Predis 'tls' scheme with SSL context...
  🧪 Testing TLS connection with SET/GET commands...
  ✅ TLS connection successful with Predis 'tls' scheme
  Running 5 iterations for Redis (TLS-Predis)...
  Initial keys in database: 167913
  Flushing database before test...
  Database flushed in 86.82ms. Keys remaining: 0
    Iteration 1/5... 6772 ops/sec, 0.147ms latency
    Iteration 2/5... 7137 ops/sec, 0.139ms latency
    Iteration 3/5... 7315 ops/sec, 0.136ms latency
    Iteration 4/5... 7530 ops/sec, 0.132ms latency
    Iteration 5/5... 7627 ops/sec, 0.130ms latency
  Redis (TLS-Predis): 7276.09±339.80 ops/sec (CV: 4.7%), 0.137±0.007ms latency, Quality: good
  Final keys in database: 39161

Testing KeyDB with Predis...
  Configuration: Server Threads: 4
  Running 5 iterations for KeyDB (non-TLS-Predis)...
  Initial keys in database: 190192
  Flushing database before test...
  Database flushed in 109.38ms. Keys remaining: 0
    Iteration 1/5... 10785 ops/sec, 0.092ms latency
    Iteration 2/5... 11526 ops/sec, 0.086ms latency
    Iteration 3/5... 11990 ops/sec, 0.083ms latency
    Iteration 4/5... 12110 ops/sec, 0.082ms latency
    Iteration 5/5... 12246 ops/sec, 0.081ms latency
  KeyDB (non-TLS-Predis): 11731.55±594.20 ops/sec (CV: 5.1%), 0.085±0.005ms latency, Quality: fair
  Final keys in database: 47986
🔐 Attempting TLS connection to KeyDB at 127.0.0.1:6391 (Predis)
  Using custom port scheme: Redis=6390, KeyDB=6391, Dragonfly=6392, Valkey=6393
  Note: Predis uses 'tls' scheme and 'ssl' context array
  📡 Method 1: Predis 'tls' scheme with SSL context...
  🧪 Testing TLS connection with SET/GET commands...
  ✅ TLS connection successful with Predis 'tls' scheme
  Running 5 iterations for KeyDB (TLS-Predis)...
  Initial keys in database: 189713
  Flushing database before test...
  Database flushed in 127.06ms. Keys remaining: 0
    Iteration 1/5... 8258 ops/sec, 0.120ms latency
    Iteration 2/5... 8852 ops/sec, 0.112ms latency
    Iteration 3/5... 9077 ops/sec, 0.110ms latency
    Iteration 4/5... 9285 ops/sec, 0.107ms latency
    Iteration 5/5... 9265 ops/sec, 0.107ms latency
  KeyDB (TLS-Predis): 8947.19±422.91 ops/sec (CV: 4.7%), 0.111±0.006ms latency, Quality: good
  Final keys in database: 42924

Testing Dragonfly with Predis...
  Configuration: Proactor Threads: 4
  Running 5 iterations for Dragonfly (non-TLS-Predis)...
  Initial keys in database: 189821
  Flushing database before test...
  Database flushed in 13.95ms. Keys remaining: 0
    Iteration 1/5... 9391 ops/sec, 0.106ms latency
    Iteration 2/5... 9907 ops/sec, 0.100ms latency
    Iteration 3/5... 10108 ops/sec, 0.098ms latency
    Iteration 4/5... 10331 ops/sec, 0.096ms latency
    Iteration 5/5... 10517 ops/sec, 0.094ms latency
  Dragonfly (non-TLS-Predis): 10050.83±434.64 ops/sec (CV: 4.3%), 0.099±0.004ms latency, Quality: good
  Final keys in database: 45042
🔐 Attempting TLS connection to Dragonfly at 127.0.0.1:6392 (Predis)
  Using custom port scheme: Redis=6390, KeyDB=6391, Dragonfly=6392, Valkey=6393
  Note: Predis uses 'tls' scheme and 'ssl' context array
  📡 Method 1: Predis 'tls' scheme with SSL context...
  🔐 Adding Dragonfly authentication to connection parameters...
  🧪 Testing TLS connection with SET/GET commands...
  ✅ TLS connection successful with Predis 'tls' scheme
  Running 5 iterations for Dragonfly (TLS-Predis)...
  Initial keys in database: 169304
  Flushing database before test...
  Database flushed in 10.17ms. Keys remaining: 0
    Iteration 1/5... 6657 ops/sec, 0.150ms latency
    Iteration 2/5... 6925 ops/sec, 0.144ms latency
    Iteration 3/5... 6991 ops/sec, 0.142ms latency
    Iteration 4/5... 7138 ops/sec, 0.139ms latency
    Iteration 5/5... 7368 ops/sec, 0.135ms latency
  Dragonfly (TLS-Predis): 7015.87±262.94 ops/sec (CV: 3.7%), 0.142±0.005ms latency, Quality: good
  Final keys in database: 38426

Testing Valkey with Predis...
  Configuration: IO Threads: 4
  Running 5 iterations for Valkey (non-TLS-Predis)...
  Initial keys in database: 190102
  Flushing database before test...
  Database flushed in 0.11ms. Keys remaining: 0
    Iteration 1/5... 12879 ops/sec, 0.077ms latency
    Iteration 2/5... 13704 ops/sec, 0.072ms latency
    Iteration 3/5... 14110 ops/sec, 0.070ms latency
    Iteration 4/5... 14090 ops/sec, 0.070ms latency
    Iteration 5/5... 14464 ops/sec, 0.069ms latency
  Valkey (non-TLS-Predis): 13849.53±605.34 ops/sec (CV: 4.4%), 0.072±0.003ms latency, Quality: good
  Final keys in database: 50711
🔐 Attempting TLS connection to Valkey at 127.0.0.1:6393 (Predis)
  Using custom port scheme: Redis=6390, KeyDB=6391, Dragonfly=6392, Valkey=6393
  Note: Predis uses 'tls' scheme and 'ssl' context array
  📡 Method 1: Predis 'tls' scheme with SSL context...
  🧪 Testing TLS connection with SET/GET commands...
  ✅ TLS connection successful with Predis 'tls' scheme
  Running 5 iterations for Valkey (TLS-Predis)...
  Initial keys in database: 189880
  Flushing database before test...
  Database flushed in 0.33ms. Keys remaining: 0
    Iteration 1/5... 9242 ops/sec, 0.108ms latency
    Iteration 2/5... 9836 ops/sec, 0.101ms latency
    Iteration 3/5... 10059 ops/sec, 0.099ms latency
    Iteration 4/5... 10310 ops/sec, 0.096ms latency
    Iteration 5/5... 10258 ops/sec, 0.097ms latency
  Valkey (TLS-Predis): 9941.10±432.97 ops/sec (CV: 4.4%), 0.100±0.005ms latency, Quality: good
  Final keys in database: 44906

Enhanced Predis results saved:
  CSV: ./benchmarklogs-4t/wordpress_object_cache_test_predis_predis.csv
  JSON: ./benchmarklogs-4t/wordpress_object_cache_test_predis_predis.json
  Markdown: ./benchmarklogs-4t/wordpress_object_cache_test_predis_predis.md
  Raw Data: ./benchmarklogs-4t/wordpress_object_cache_test_predis_predis_raw.json
============================================================
Enhanced Predis test suite completed!
Total execution time: 417.25 seconds
Total tests run: 8
Statistical iterations per test: 5
Results saved to ./benchmarklogs-4t/
Redis implementation: Predis (pure PHP)

====================================================================================================
ENHANCED STATISTICAL PERFORMANCE SUMMARY (Predis)
Thread Variant: 4 | Iterations per test: 5
====================================================================================================
Rank Database                       Ops/sec   ±StdDev      CV%  Latency  Quality     95% CI     Reliable
----------------------------------------------------------------------------------------------------
#1  Valkey (Predis)              13850      605    4.4%  0.072ms 🟡good    13,098-14,601      ✅
#2  KeyDB (Predis)               11732      594    5.1%  0.085ms 🟠fair    10,994-12,469      ✅
#3  Dragonfly (Predis)           10051      435    4.3%  0.099ms 🟡good    9,511-10,590      ✅
#4  Valkey (TLS-Predis)           9941      433    4.4%  0.100ms 🟡good    9,404-10,479      ✅
#5  Redis (Predis)                9614      443    4.6%  0.104ms 🟡good    9,065-10,163      ✅
#6  KeyDB (TLS-Predis)            8947      423    4.7%  0.111ms 🟡good     8,422-9,472      ✅
#7  Redis (TLS-Predis)            7276      340    4.7%  0.137ms 🟡good     6,854-7,698      ✅
#8  Dragonfly (TLS-Predis)        7016      263    3.7%  0.142ms 🟡good     6,689-7,342      ✅
====================================================================================================
Implementation: Predis (Pure PHP Redis Client)
📈 Compare with phpredis results to see implementation trade-offs

============================================================
TLS vs NON-TLS PERFORMANCE COMPARISON (Predis)
Thread Variant: 4
============================================================
Redis      | Non-TLS:     9614±443  | TLS:     7276±340  | Impact: +24.3% *
KeyDB      | Non-TLS:    11732±594  | TLS:     8947±423  | Impact: +23.7% *
Dragonfly  | Non-TLS:    10051±435  | TLS:     7016±263  | Impact: +30.2% *
Valkey     | Non-TLS:    13850±605  | TLS:     9941±433  | Impact: +28.2% *
------------------------------------------------------------
* = Statistically significant difference (95% confidence)
Implementation: Predis (Pure PHP)
============================================================

================================================================================
STATISTICAL INSIGHTS (Predis)
Thread Variant: 4 | Iterations: 5
================================================================================
Measurement Quality Distribution:
  🟡 Good      :  7 tests (87.5%)
  🟠 Fair      :  1 tests (12.5%)

Coefficient of Variation Analysis:
  Average CV: 4.5% (lower is better)
  Range: 3.7% - 5.1%
  📊 Good measurement consistency with Predis

Predis Implementation Notes:
  📡 Connection management: Automatic (no manual close required)
  🔒 TLS handling: Enhanced SSL context support
  🔄 Error recovery: Built-in retry logic with exponential backoff
  📊 Performance characteristics: Pure PHP (higher latency, more consistent)
================================================================================

================================================================================
PREDIS-SPECIFIC INSIGHTS
Thread Variant: 4 | Implementation: Predis (Pure PHP)
================================================================================
TLS Connection Reliability:
  ✅ Predis TLS connections: 4/4 databases
  📊 All TLS connections established successfully
  🔒 SSL context handling: Reliable (Predis manages SSL internally)

Predis Configuration Analysis:
  🔗 Connection timeout: 5s
  📡 Read/write timeout: 5s
  🔄 Connection retry attempts: 3
  ⚡ TCP keepalive: Enabled
  🔗 Persistent connections: Disabled

Performance Characteristics:
  📈 Average non-TLS performance: 11,311 ops/sec
  🔒 Average TLS performance: 8,295 ops/sec
  📊 TLS overhead: 26.7%
  ℹ️  Note: 25-40% TLS overhead is normal for Redis over SSL

Predis Advantages:
  ✅ Better TLS reliability compared to phpredis extension
  ✅ Enhanced SSL context handling
  ✅ No extension compilation dependencies
  ✅ Consistent behavior across PHP versions
  ⚠️  Trade-off: Lower raw performance due to pure PHP implementation
================================================================================

======================================================================
✅ Predis WordPress Object Cache test completed successfully!
📁 Results saved to: ./benchmarklogs-4t
📊 Implementation: Predis (Pure PHP Redis Client)
🔒 TLS Support: Enhanced reliability compared to phpredis

📄 Generated files:
  php_wordpress_test_phpredis.log (25.4KB)
  php_wordpress_test_predis.log (13.4KB)
  wordpress_object_cache_test_predis_predis.csv (1.8KB)
  wordpress_object_cache_test_predis_predis.json (50.6KB)
  wordpress_object_cache_test_predis_predis.md (2.7KB)
  wordpress_object_cache_test_predis_predis_raw.json (38.2KB)
