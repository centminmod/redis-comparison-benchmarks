WordPress Object Cache Test with Predis - Configured Runner
============================================================
Implementation: Predis (Pure PHP Redis Client)
Enhanced TLS Support: Yes
Statistical Analysis: 13 iterations with confidence intervals

üìã Loading configuration from: tests/php/test_config_predis.php
‚úÖ Configuration loaded successfully

üìä Test Configuration:
  Implementation: Predis (Pure PHP)
  Duration per iteration: 30s
  Test iterations: 13
  Output directory: ./benchmarklogs-4t
  TLS testing: Enabled
  Flush before test: Yes
  Thread variant: 4
  Connection timeout: 5s
  Read/write timeout: 5s
  Connection retries: 3
  Persistent connections: No
  Thread configuration:
    redis_io_threads: 4 threads
    keydb_server_threads: 4 threads
    dragonfly_proactor_threads: 4 threads
    valkey_io_threads: 4 threads
  Database configurations:
    Redis: 127.0.0.1:6379 (TLS: 6390) (IO threads: 4)
    KeyDB: 127.0.0.1:6380 (TLS: 6391) (Server threads: 4)
    Dragonfly: 127.0.0.1:6381 (TLS: 6392) (Proactor threads: 4)
    Valkey: 127.0.0.1:6382 (TLS: 6393) (IO threads: 4)

======================================================================

üîç Checking Predis availability...
‚úÖ Predis library available

üöÄ Starting Predis WordPress Object Cache Test...

Starting WordPress Object Cache Test (Predis)...
Timestamp: 2025-06-09 18:08:40 UTC
Predis Version: unknown
PHP Version: 8.4.8
Enhanced Testing Configuration (Predis):
- Iterations per test: 13
- Iteration pause: 500ms
- Statistical analysis: Enabled
- Raw data logging: Enabled
- Connection timeout: 5s
- Read/write timeout: 5s
- Connection retry attempts: 3
- Persistent connections: Disabled
- TCP keepalive: Enabled
Thread Variant: 4
Thread Configuration:
  redis_io_threads: 4 threads
  keydb_server_threads: 4 threads
  dragonfly_proactor_threads: 4 threads
  valkey_io_threads: 4 threads
TLS Certificates: Found and validated (Predis-compatible)

Checking TLS readiness (Predis)...
  Redis: TLS port accessible ‚úì
  KeyDB: TLS port accessible ‚úì
  Dragonfly: TLS port accessible ‚úì
  Valkey: TLS port accessible ‚úì

Predis TLS testing will be attempted for: Redis, KeyDB, Dragonfly, Valkey
============================================================
Testing Redis with Predis...
  Configuration: IO Threads: 4
  Running 13 iterations for Redis (non-TLS-Predis)...
  Initial keys in database: 395056
  Flushing database before test...
  Database flushed in 225.68ms. Keys remaining: 0
    Iteration 1/13... 9624 ops/sec, 0.103ms latency
    Iteration 2/13... 10224 ops/sec, 0.097ms latency
    Iteration 3/13... 10432 ops/sec, 0.095ms latency
    Iteration 4/13... 10537 ops/sec, 0.094ms latency
    Iteration 5/13... 10603 ops/sec, 0.094ms latency
    Iteration 6/13... 10613 ops/sec, 0.094ms latency
    Iteration 7/13... 10651 ops/sec, 0.093ms latency
    Iteration 8/13... 10670 ops/sec, 0.093ms latency
    Iteration 9/13... 10692 ops/sec, 0.093ms latency
    Iteration 10/13... 10692 ops/sec, 0.093ms latency
    Iteration 11/13... 10683 ops/sec, 0.093ms latency
    Iteration 12/13... 10709 ops/sec, 0.093ms latency
    Iteration 13/13... 10654 ops/sec, 0.093ms latency
  Redis (non-TLS-Predis): 10521.90¬±301.93 ops/sec (CV: 2.9%), 0.095¬±0.003ms latency, Quality: good
  Final keys in database: 61478
üîê Attempting TLS connection to Unknown at 127.0.0.1:6390 (Predis)
  Using custom port scheme: Redis=6390, KeyDB=6391, Dragonfly=6392, Valkey=6393
  Note: Predis uses 'tls' scheme and 'ssl' context array
  üì° Method 1: Predis 'tls' scheme with SSL context...
  üß™ Testing TLS connection with SET/GET commands...
  ‚úÖ TLS connection successful with Predis 'tls' scheme
  Running 13 iterations for Redis (TLS-Predis)...
  Initial keys in database: 394777
  Flushing database before test...
  Database flushed in 221.51ms. Keys remaining: 0
    Iteration 1/13... 7270 ops/sec, 0.137ms latency
    Iteration 2/13... 7755 ops/sec, 0.128ms latency
    Iteration 3/13... 7926 ops/sec, 0.126ms latency
    Iteration 4/13... 7967 ops/sec, 0.125ms latency
    Iteration 5/13... 8113 ops/sec, 0.123ms latency
    Iteration 6/13... 8163 ops/sec, 0.122ms latency
    Iteration 7/13... 8102 ops/sec, 0.123ms latency
    Iteration 8/13... 8188 ops/sec, 0.122ms latency
    Iteration 9/13... 8186 ops/sec, 0.122ms latency
    Iteration 10/13... 8176 ops/sec, 0.122ms latency
    Iteration 11/13... 8226 ops/sec, 0.121ms latency
    Iteration 12/13... 8181 ops/sec, 0.122ms latency
    Iteration 13/13... 8166 ops/sec, 0.122ms latency
  Redis (TLS-Predis): 8032.22¬±265.77 ops/sec (CV: 3.3%), 0.124¬±0.004ms latency, Quality: good
  Final keys in database: 61379

Testing KeyDB with Predis...
  Configuration: Server Threads: 4
  Running 13 iterations for KeyDB (non-TLS-Predis)...
  Initial keys in database: 394039
  Flushing database before test...
  Database flushed in 213.79ms. Keys remaining: 0
    Iteration 1/13... 11835 ops/sec, 0.084ms latency
    Iteration 2/13... 12654 ops/sec, 0.078ms latency
    Iteration 3/13... 12892 ops/sec, 0.077ms latency
    Iteration 4/13... 13024 ops/sec, 0.076ms latency
    Iteration 5/13... 13062 ops/sec, 0.076ms latency
    Iteration 6/13... 13079 ops/sec, 0.076ms latency
    Iteration 7/13... 13073 ops/sec, 0.076ms latency
    Iteration 8/13... 13065 ops/sec, 0.076ms latency
    Iteration 9/13... 13068 ops/sec, 0.076ms latency
    Iteration 10/13... 13089 ops/sec, 0.076ms latency
    Iteration 11/13... 13044 ops/sec, 0.076ms latency
    Iteration 12/13... 13118 ops/sec, 0.076ms latency
    Iteration 13/13... 13062 ops/sec, 0.076ms latency
  KeyDB (non-TLS-Predis): 12928.05¬±350.54 ops/sec (CV: 2.7%), 0.077¬±0.002ms latency, Quality: good
  Final keys in database: 61503
üîê Attempting TLS connection to Unknown at 127.0.0.1:6391 (Predis)
  Using custom port scheme: Redis=6390, KeyDB=6391, Dragonfly=6392, Valkey=6393
  Note: Predis uses 'tls' scheme and 'ssl' context array
  üì° Method 1: Predis 'tls' scheme with SSL context...
  üß™ Testing TLS connection with SET/GET commands...
  ‚úÖ TLS connection successful with Predis 'tls' scheme
  Running 13 iterations for KeyDB (TLS-Predis)...
  Initial keys in database: 394276
  Flushing database before test...
  Database flushed in 228.06ms. Keys remaining: 0
    Iteration 1/13... 9001 ops/sec, 0.110ms latency
    Iteration 2/13... 9543 ops/sec, 0.104ms latency
    Iteration 3/13... 9731 ops/sec, 0.102ms latency
    Iteration 4/13... 9818 ops/sec, 0.101ms latency
    Iteration 5/13... 9841 ops/sec, 0.101ms latency
    Iteration 6/13... 9867 ops/sec, 0.101ms latency
    Iteration 7/13... 9934 ops/sec, 0.100ms latency
    Iteration 8/13... 9852 ops/sec, 0.101ms latency
    Iteration 9/13... 9920 ops/sec, 0.100ms latency
    Iteration 10/13... 9928 ops/sec, 0.100ms latency
    Iteration 11/13... 9869 ops/sec, 0.101ms latency
    Iteration 12/13... 9904 ops/sec, 0.100ms latency
    Iteration 13/13... 9882 ops/sec, 0.101ms latency
  KeyDB (TLS-Predis): 9776.06¬±255.16 ops/sec (CV: 2.6%), 0.102¬±0.003ms latency, Quality: good
  Final keys in database: 61446

Testing Dragonfly with Predis...
  Configuration: Proactor Threads: 4
  Running 13 iterations for Dragonfly (non-TLS-Predis)...
  Initial keys in database: 390078
  Flushing database before test...
  Database flushed in 20.76ms. Keys remaining: 0
    Iteration 1/13... 10072 ops/sec, 0.099ms latency
    Iteration 2/13... 10706 ops/sec, 0.093ms latency
    Iteration 3/13... 10826 ops/sec, 0.092ms latency
    Iteration 4/13... 10957 ops/sec, 0.091ms latency
    Iteration 5/13... 11135 ops/sec, 0.089ms latency
    Iteration 6/13... 11110 ops/sec, 0.089ms latency
    Iteration 7/13... 11108 ops/sec, 0.089ms latency
    Iteration 8/13... 10918 ops/sec, 0.091ms latency
    Iteration 9/13... 11031 ops/sec, 0.090ms latency
    Iteration 10/13... 11134 ops/sec, 0.089ms latency
    Iteration 11/13... 11112 ops/sec, 0.089ms latency
    Iteration 12/13... 11092 ops/sec, 0.090ms latency
    Iteration 13/13... 11023 ops/sec, 0.090ms latency
  Dragonfly (non-TLS-Predis): 10940.10¬±291.96 ops/sec (CV: 2.7%), 0.091¬±0.003ms latency, Quality: good
  Final keys in database: 61333
üîê Attempting TLS connection to Unknown at 127.0.0.1:6392 (Predis)
  Using custom port scheme: Redis=6390, KeyDB=6391, Dragonfly=6392, Valkey=6393
  Note: Predis uses 'tls' scheme and 'ssl' context array
  üì° Method 1: Predis 'tls' scheme with SSL context...
  üß™ Testing TLS connection with SET/GET commands...
  ‚ùå Predis 'tls' scheme failed: NOAUTH Authentication required.
  üì° Method 2: Predis 'rediss' URI scheme...
  ‚ùå Predis 'rediss' URI failed: NOAUTH Authentication required.
  üì° Method 3: Predis TLS with localhost hostname...
  ‚ùå Predis localhost TLS failed: NOAUTH Authentication required.
  ‚ùå All Predis TLS connection methods failed for Unknown at port 6392
  üìã Note: TLS connection failed likely due to server certificate configuration
  üîÑ With recent Docker config changes, TLS should now work properly
  üö´ Bypassing TLS test for Unknown to allow testing to continue
  ‚úÖ Non-TLS results remain valid and reliable for performance comparison
  ‚Üí TLS test skipped for Dragonfly due to Predis connection failure

Testing Valkey with Predis...
  Configuration: IO Threads: 4
  Running 13 iterations for Valkey (non-TLS-Predis)...
  Initial keys in database: 392383
  Flushing database before test...
  Database flushed in 0.09ms. Keys remaining: 0
    Iteration 1/13... 13828 ops/sec, 0.072ms latency
    Iteration 2/13... 14891 ops/sec, 0.067ms latency
    Iteration 3/13... 15102 ops/sec, 0.066ms latency
    Iteration 4/13... 15074 ops/sec, 0.066ms latency
    Iteration 5/13... 15150 ops/sec, 0.065ms latency
    Iteration 6/13... 15209 ops/sec, 0.065ms latency
    Iteration 7/13... 15316 ops/sec, 0.065ms latency
    Iteration 8/13... 15155 ops/sec, 0.065ms latency
    Iteration 9/13... 15217 ops/sec, 0.065ms latency
    Iteration 10/13... 15124 ops/sec, 0.066ms latency
    Iteration 11/13... 15207 ops/sec, 0.065ms latency
    Iteration 12/13... 15294 ops/sec, 0.065ms latency
    Iteration 13/13... 15269 ops/sec, 0.065ms latency
  Valkey (non-TLS-Predis): 15064.28¬±387.46 ops/sec (CV: 2.6%), 0.066¬±0.002ms latency, Quality: good
  Final keys in database: 61504
üîê Attempting TLS connection to Unknown at 127.0.0.1:6393 (Predis)
  Using custom port scheme: Redis=6390, KeyDB=6391, Dragonfly=6392, Valkey=6393
  Note: Predis uses 'tls' scheme and 'ssl' context array
  üì° Method 1: Predis 'tls' scheme with SSL context...
  üß™ Testing TLS connection with SET/GET commands...
  ‚úÖ TLS connection successful with Predis 'tls' scheme
  Running 13 iterations for Valkey (TLS-Predis)...
  Initial keys in database: 391166
  Flushing database before test...
  Database flushed in 0.13ms. Keys remaining: 0
    Iteration 1/13... 9783 ops/sec, 0.102ms latency
    Iteration 2/13... 10536 ops/sec, 0.094ms latency
    Iteration 3/13... 10661 ops/sec, 0.093ms latency
    Iteration 4/13... 10751 ops/sec, 0.092ms latency
    Iteration 5/13... 10857 ops/sec, 0.092ms latency
    Iteration 6/13... 10877 ops/sec, 0.091ms latency
    Iteration 7/13... 10840 ops/sec, 0.092ms latency
    Iteration 8/13... 10836 ops/sec, 0.092ms latency
    Iteration 9/13... 10931 ops/sec, 0.091ms latency
    Iteration 10/13... 10898 ops/sec, 0.091ms latency
    Iteration 11/13... 10797 ops/sec, 0.092ms latency
    Iteration 12/13... 10874 ops/sec, 0.091ms latency
    Iteration 13/13... 10906 ops/sec, 0.091ms latency
  Valkey (TLS-Predis): 10734.29¬±306.22 ops/sec (CV: 2.9%), 0.093¬±0.003ms latency, Quality: good
  Final keys in database: 61465

Enhanced Predis results saved:
  CSV: ./benchmarklogs-4t/wordpress_object_cache_test_predis_predis.csv
  JSON: ./benchmarklogs-4t/wordpress_object_cache_test_predis_predis.json
  Markdown: ./benchmarklogs-4t/wordpress_object_cache_test_predis_predis.md
  Raw Data: ./benchmarklogs-4t/wordpress_object_cache_test_predis_predis_raw.json
============================================================
Enhanced Predis test suite completed!
Total execution time: 2,779.18 seconds
Total tests run: 7
Statistical iterations per test: 13
Results saved to ./benchmarklogs-4t/
Redis implementation: Predis (pure PHP)

====================================================================================================
ENHANCED STATISTICAL PERFORMANCE SUMMARY (Predis)
Thread Variant: 4 | Iterations per test: 13
====================================================================================================
Rank Database                       Ops/sec   ¬±StdDev      CV%  Latency  Quality     95% CI     Reliable
----------------------------------------------------------------------------------------------------
#1  Valkey (Predis)              15064      387    2.6%  0.066ms üü°good    14,849-15,279      ‚úÖ
#2  KeyDB (Predis)               12928      351    2.7%  0.077ms üü°good    12,734-13,122      ‚úÖ
#3  Dragonfly (Predis)           10940      292    2.7%  0.091ms üü°good    10,778-11,102      ‚úÖ
#4  Valkey (TLS-Predis)          10734      306    2.9%  0.093ms üü°good    10,564-10,904      ‚úÖ
#5  Redis (Predis)               10522      302    2.9%  0.095ms üü°good    10,354-10,689      ‚úÖ
#6  KeyDB (TLS-Predis)            9776      255    2.6%  0.102ms üü°good     9,635-9,918      ‚úÖ
#7  Redis (TLS-Predis)            8032      266    3.3%  0.124ms üü°good     7,885-8,180      ‚úÖ
====================================================================================================
Implementation: Predis (Pure PHP Redis Client)
üìà Compare with phpredis results to see implementation trade-offs

============================================================
TLS vs NON-TLS PERFORMANCE COMPARISON (Predis)
Thread Variant: 4
============================================================
Redis      | Non-TLS:    10522¬±302  | TLS:     8032¬±266  | Impact: +23.7% *
KeyDB      | Non-TLS:    12928¬±351  | TLS:     9776¬±255  | Impact: +24.4% *
Dragonfly  | Non-TLS:    10940¬±292  | TLS:   FAILED | Impact: N/A
Valkey     | Non-TLS:    15064¬±387  | TLS:    10734¬±306  | Impact: +28.7% *
------------------------------------------------------------
* = Statistically significant difference (95% confidence)
Implementation: Predis (Pure PHP)
============================================================

================================================================================
STATISTICAL INSIGHTS (Predis)
Thread Variant: 4 | Iterations: 13
================================================================================
Measurement Quality Distribution:
  üü° Good      :  7 tests (100.0%)

Coefficient of Variation Analysis:
  Average CV: 2.8% (lower is better)
  Range: 2.6% - 3.3%
  üìä Good measurement consistency with Predis

Predis Implementation Notes:
  üì° Connection management: Automatic (no manual close required)
  üîí TLS handling: Enhanced SSL context support
  üîÑ Error recovery: Built-in retry logic with exponential backoff
  üìä Performance characteristics: Pure PHP (higher latency, more consistent)
================================================================================

================================================================================
PREDIS-SPECIFIC INSIGHTS
Thread Variant: 4 | Implementation: Predis (Pure PHP)
================================================================================
TLS Connection Reliability:
  ‚úÖ Predis TLS connections: 3/4 databases
  üìä All TLS connections established successfully
  üîí SSL context handling: Reliable (Predis manages SSL internally)

Predis Configuration Analysis:
  üîó Connection timeout: 5s
  üì° Read/write timeout: 5s
  üîÑ Connection retry attempts: 3
  ‚ö° TCP keepalive: Enabled
  üîó Persistent connections: Disabled

Performance Characteristics:
  üìà Average non-TLS performance: 12,364 ops/sec
  üîí Average TLS performance: 9,514 ops/sec
  üìä TLS overhead: 23.0%
  ‚ÑπÔ∏è  Note: 25-40% TLS overhead is normal for Redis over SSL

Predis Advantages:
  ‚úÖ Better TLS reliability compared to phpredis extension
  ‚úÖ Enhanced SSL context handling
  ‚úÖ No extension compilation dependencies
  ‚úÖ Consistent behavior across PHP versions
  ‚ö†Ô∏è  Trade-off: Lower raw performance due to pure PHP implementation
================================================================================

======================================================================
‚úÖ Predis WordPress Object Cache test completed successfully!
üìÅ Results saved to: ./benchmarklogs-4t
üìä Implementation: Predis (Pure PHP Redis Client)
üîí TLS Support: Enhanced reliability compared to phpredis

üìÑ Generated files:
  php_wordpress_test_phpredis.log (31.1KB)
  php_wordpress_test_predis.log (16.3KB)
  wordpress_object_cache_test_predis_predis.csv (1.6KB)
  wordpress_object_cache_test_predis_predis.json (87.3KB)
  wordpress_object_cache_test_predis_predis.md (2.6KB)
  wordpress_object_cache_test_predis_predis_raw.json (76.3KB)
