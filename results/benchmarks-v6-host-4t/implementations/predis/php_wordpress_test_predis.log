WordPress Object Cache Test with Predis - Configured Runner
============================================================
Implementation: Predis (Pure PHP Redis Client)
Enhanced TLS Support: Yes
Statistical Analysis: 13 iterations with confidence intervals

üìã Loading configuration from: tests/php/test_config_predis.php
‚úÖ Configuration loaded successfully

üìä Test Configuration:
  Implementation: Predis (Pure PHP)
  Duration per iteration: 30s
  Test iterations: 13
  Output directory: ./benchmarklogs-4t
  TLS testing: Enabled
  Flush before test: Yes
  Thread variant: 4
  Connection timeout: 5s
  Read/write timeout: 5s
  Connection retries: 3
  Persistent connections: No
  Thread configuration:
    redis_io_threads: 4 threads
    keydb_server_threads: 4 threads
    dragonfly_proactor_threads: 4 threads
    valkey_io_threads: 4 threads
  Database configurations:
    Redis: 127.0.0.1:6379 (TLS: 6390) (IO threads: 4)
    KeyDB: 127.0.0.1:6380 (TLS: 6391) (Server threads: 4)
    Dragonfly: 127.0.0.1:6381 (TLS: 6392) (Proactor threads: 4)
    Valkey: 127.0.0.1:6382 (TLS: 6393) (IO threads: 4)

======================================================================

üîç Checking Predis availability...
‚úÖ Predis library available

üöÄ Starting Predis WordPress Object Cache Test...

Starting WordPress Object Cache Test (Predis)...
Timestamp: 2025-06-10 06:49:39 UTC
Predis Version: unknown
PHP Version: 8.4.8
Enhanced Testing Configuration (Predis):
- Iterations per test: 13
- Iteration pause: 500ms
- Statistical analysis: Enabled
- Raw data logging: Enabled
- Connection timeout: 5s
- Read/write timeout: 5s
- Connection retry attempts: 3
- Persistent connections: Disabled
- TCP keepalive: Enabled
Thread Variant: 4
Thread Configuration:
  redis_io_threads: 4 threads
  keydb_server_threads: 4 threads
  dragonfly_proactor_threads: 4 threads
  valkey_io_threads: 4 threads
TLS Certificates: Found and validated (Predis-compatible)

Checking TLS readiness (Predis)...
  Redis: TLS port accessible ‚úì
  KeyDB: TLS port accessible ‚úì
  Dragonfly: TLS port accessible ‚úì
  Valkey: TLS port accessible ‚úì

Predis TLS testing will be attempted for: Redis, KeyDB, Dragonfly, Valkey
============================================================
Testing Redis with Predis...
  Configuration: IO Threads: 4
  Running 13 iterations for Redis (non-TLS-Predis)...
  Initial keys in database: 394673
  Flushing database before test...
  Database flushed in 234.35ms. Keys remaining: 0
    Iteration 1/13... 9416 ops/sec, 0.106ms latency
    Iteration 2/13... 10069 ops/sec, 0.099ms latency
    Iteration 3/13... 10233 ops/sec, 0.097ms latency
    Iteration 4/13... 10366 ops/sec, 0.096ms latency
    Iteration 5/13... 10445 ops/sec, 0.095ms latency
    Iteration 6/13... 10456 ops/sec, 0.095ms latency
    Iteration 7/13... 10478 ops/sec, 0.095ms latency
    Iteration 8/13... 10506 ops/sec, 0.095ms latency
    Iteration 9/13... 10501 ops/sec, 0.095ms latency
    Iteration 10/13... 10540 ops/sec, 0.094ms latency
    Iteration 11/13... 10501 ops/sec, 0.095ms latency
    Iteration 12/13... 10410 ops/sec, 0.096ms latency
    Iteration 13/13... 10432 ops/sec, 0.095ms latency
  Redis (non-TLS-Predis): 10334.76¬±304.82 ops/sec (CV: 2.9%), 0.096¬±0.003ms latency, Quality: good
  Final keys in database: 61470
üîê Attempting TLS connection to Redis at 127.0.0.1:6390 (Predis)
  Using custom port scheme: Redis=6390, KeyDB=6391, Dragonfly=6392, Valkey=6393
  Note: Predis uses 'tls' scheme and 'ssl' context array
  üì° Method 1: Predis 'tls' scheme with SSL context...
  üß™ Testing TLS connection with SET/GET commands...
  ‚úÖ TLS connection successful with Predis 'tls' scheme
  Running 13 iterations for Redis (TLS-Predis)...
  Initial keys in database: 394490
  Flushing database before test...
  Database flushed in 237.30ms. Keys remaining: 0
    Iteration 1/13... 7112 ops/sec, 0.140ms latency
    Iteration 2/13... 7544 ops/sec, 0.132ms latency
    Iteration 3/13... 7751 ops/sec, 0.128ms latency
    Iteration 4/13... 7848 ops/sec, 0.127ms latency
    Iteration 5/13... 7881 ops/sec, 0.126ms latency
    Iteration 6/13... 7935 ops/sec, 0.125ms latency
    Iteration 7/13... 7938 ops/sec, 0.125ms latency
    Iteration 8/13... 7965 ops/sec, 0.125ms latency
    Iteration 9/13... 7915 ops/sec, 0.126ms latency
    Iteration 10/13... 8027 ops/sec, 0.124ms latency
    Iteration 11/13... 7965 ops/sec, 0.125ms latency
    Iteration 12/13... 7978 ops/sec, 0.125ms latency
    Iteration 13/13... 7996 ops/sec, 0.124ms latency
  Redis (TLS-Predis): 7834.94¬±251.82 ops/sec (CV: 3.2%), 0.127¬±0.004ms latency, Quality: good
  Final keys in database: 61388

Testing KeyDB with Predis...
  Configuration: Server Threads: 4
  Running 13 iterations for KeyDB (non-TLS-Predis)...
  Initial keys in database: 394049
  Flushing database before test...
  Database flushed in 223.60ms. Keys remaining: 0
    Iteration 1/13... 11431 ops/sec, 0.087ms latency
    Iteration 2/13... 12227 ops/sec, 0.081ms latency
    Iteration 3/13... 12445 ops/sec, 0.080ms latency
    Iteration 4/13... 12578 ops/sec, 0.079ms latency
    Iteration 5/13... 12609 ops/sec, 0.079ms latency
    Iteration 6/13... 12658 ops/sec, 0.078ms latency
    Iteration 7/13... 12650 ops/sec, 0.078ms latency
    Iteration 8/13... 12675 ops/sec, 0.078ms latency
    Iteration 9/13... 12622 ops/sec, 0.079ms latency
    Iteration 10/13... 12647 ops/sec, 0.079ms latency
    Iteration 11/13... 12668 ops/sec, 0.078ms latency
    Iteration 12/13... 12582 ops/sec, 0.079ms latency
    Iteration 13/13... 12650 ops/sec, 0.078ms latency
  KeyDB (non-TLS-Predis): 12495.52¬±342.80 ops/sec (CV: 2.7%), 0.080¬±0.002ms latency, Quality: good
  Final keys in database: 61498
üîê Attempting TLS connection to KeyDB at 127.0.0.1:6391 (Predis)
  Using custom port scheme: Redis=6390, KeyDB=6391, Dragonfly=6392, Valkey=6393
  Note: Predis uses 'tls' scheme and 'ssl' context array
  üì° Method 1: Predis 'tls' scheme with SSL context...
  üß™ Testing TLS connection with SET/GET commands...
  ‚úÖ TLS connection successful with Predis 'tls' scheme
  Running 13 iterations for KeyDB (TLS-Predis)...
  Initial keys in database: 393414
  Flushing database before test...
  Database flushed in 232.61ms. Keys remaining: 0
    Iteration 1/13... 8695 ops/sec, 0.114ms latency
    Iteration 2/13... 9268 ops/sec, 0.107ms latency
    Iteration 3/13... 9383 ops/sec, 0.106ms latency
    Iteration 4/13... 9539 ops/sec, 0.104ms latency
    Iteration 5/13... 9572 ops/sec, 0.104ms latency
    Iteration 6/13... 9606 ops/sec, 0.103ms latency
    Iteration 7/13... 9661 ops/sec, 0.103ms latency
    Iteration 8/13... 9713 ops/sec, 0.102ms latency
    Iteration 9/13... 9744 ops/sec, 0.102ms latency
    Iteration 10/13... 9813 ops/sec, 0.101ms latency
    Iteration 11/13... 9693 ops/sec, 0.103ms latency
    Iteration 12/13... 9761 ops/sec, 0.102ms latency
    Iteration 13/13... 9760 ops/sec, 0.102ms latency
  KeyDB (TLS-Predis): 9554.49¬±302.12 ops/sec (CV: 3.2%), 0.104¬±0.004ms latency, Quality: good
  Final keys in database: 61449

Testing Dragonfly with Predis...
  Configuration: Proactor Threads: 4
  Running 13 iterations for Dragonfly (non-TLS-Predis)...
  Initial keys in database: 389790
  Flushing database before test...
  Database flushed in 20.80ms. Keys remaining: 0
    Iteration 1/13... 10119 ops/sec, 0.098ms latency
    Iteration 2/13... 10854 ops/sec, 0.092ms latency
    Iteration 3/13... 11036 ops/sec, 0.090ms latency
    Iteration 4/13... 11077 ops/sec, 0.090ms latency
    Iteration 5/13... 11133 ops/sec, 0.089ms latency
    Iteration 6/13... 11285 ops/sec, 0.088ms latency
    Iteration 7/13... 11319 ops/sec, 0.088ms latency
    Iteration 8/13... 11248 ops/sec, 0.088ms latency
    Iteration 9/13... 11277 ops/sec, 0.088ms latency
    Iteration 10/13... 11341 ops/sec, 0.088ms latency
    Iteration 11/13... 11368 ops/sec, 0.087ms latency
    Iteration 12/13... 11318 ops/sec, 0.088ms latency
    Iteration 13/13... 11417 ops/sec, 0.087ms latency
  Dragonfly (non-TLS-Predis): 11137.79¬±344.41 ops/sec (CV: 3.1%), 0.089¬±0.003ms latency, Quality: good
  Final keys in database: 61319
üîê Attempting TLS connection to Dragonfly at 127.0.0.1:6392 (Predis)
  Using custom port scheme: Redis=6390, KeyDB=6391, Dragonfly=6392, Valkey=6393
  Note: Predis uses 'tls' scheme and 'ssl' context array
  üì° Method 1: Predis 'tls' scheme with SSL context...
  üîê Adding Dragonfly authentication to connection parameters...
  üß™ Testing TLS connection with SET/GET commands...
  ‚úÖ TLS connection successful with Predis 'tls' scheme
  Running 13 iterations for Dragonfly (TLS-Predis)...
  Initial keys in database: 388008
  Flushing database before test...
  Database flushed in 14.64ms. Keys remaining: 0
    Iteration 1/13... 6993 ops/sec, 0.142ms latency
    Iteration 2/13... 7455 ops/sec, 0.134ms latency
    Iteration 3/13... 7537 ops/sec, 0.132ms latency
    Iteration 4/13... 7601 ops/sec, 0.131ms latency
    Iteration 5/13... 7607 ops/sec, 0.131ms latency
    Iteration 6/13... 7655 ops/sec, 0.130ms latency
    Iteration 7/13... 7666 ops/sec, 0.130ms latency
    Iteration 8/13... 7620 ops/sec, 0.131ms latency
    Iteration 9/13... 7841 ops/sec, 0.127ms latency
    Iteration 10/13... 7646 ops/sec, 0.130ms latency
    Iteration 11/13... 7646 ops/sec, 0.130ms latency
    Iteration 12/13... 7663 ops/sec, 0.130ms latency
    Iteration 13/13... 7796 ops/sec, 0.128ms latency
  Dragonfly (TLS-Predis): 7594.27¬±205.22 ops/sec (CV: 2.7%), 0.131¬±0.004ms latency, Quality: good
  Final keys in database: 61068

Testing Valkey with Predis...
  Configuration: IO Threads: 4
  Running 13 iterations for Valkey (non-TLS-Predis)...
  Initial keys in database: 390160
  Flushing database before test...
  Database flushed in 0.11ms. Keys remaining: 0
    Iteration 1/13... 13560 ops/sec, 0.073ms latency
    Iteration 2/13... 14493 ops/sec, 0.068ms latency
    Iteration 3/13... 14705 ops/sec, 0.067ms latency
    Iteration 4/13... 14905 ops/sec, 0.067ms latency
    Iteration 5/13... 14942 ops/sec, 0.066ms latency
    Iteration 6/13... 14982 ops/sec, 0.066ms latency
    Iteration 7/13... 14872 ops/sec, 0.067ms latency
    Iteration 8/13... 14890 ops/sec, 0.067ms latency
    Iteration 9/13... 14971 ops/sec, 0.066ms latency
    Iteration 10/13... 14991 ops/sec, 0.066ms latency
    Iteration 11/13... 14914 ops/sec, 0.067ms latency
    Iteration 12/13... 14964 ops/sec, 0.066ms latency
    Iteration 13/13... 14856 ops/sec, 0.067ms latency
  Valkey (non-TLS-Predis): 14772.69¬±389.06 ops/sec (CV: 2.6%), 0.067¬±0.002ms latency, Quality: good
  Final keys in database: 61509
üîê Attempting TLS connection to Valkey at 127.0.0.1:6393 (Predis)
  Using custom port scheme: Redis=6390, KeyDB=6391, Dragonfly=6392, Valkey=6393
  Note: Predis uses 'tls' scheme and 'ssl' context array
  üì° Method 1: Predis 'tls' scheme with SSL context...
  üß™ Testing TLS connection with SET/GET commands...
  ‚úÖ TLS connection successful with Predis 'tls' scheme
  Running 13 iterations for Valkey (TLS-Predis)...
  Initial keys in database: 389568
  Flushing database before test...
  Database flushed in 0.15ms. Keys remaining: 0
    Iteration 1/13... 9782 ops/sec, 0.102ms latency
    Iteration 2/13... 10408 ops/sec, 0.095ms latency
    Iteration 3/13... 10646 ops/sec, 0.093ms latency
    Iteration 4/13... 10672 ops/sec, 0.093ms latency
    Iteration 5/13... 10831 ops/sec, 0.092ms latency
    Iteration 6/13... 10755 ops/sec, 0.092ms latency
    Iteration 7/13... 10923 ops/sec, 0.091ms latency
    Iteration 8/13... 10845 ops/sec, 0.092ms latency
    Iteration 9/13... 10854 ops/sec, 0.092ms latency
    Iteration 10/13... 10826 ops/sec, 0.092ms latency
    Iteration 11/13... 10808 ops/sec, 0.092ms latency
    Iteration 12/13... 10746 ops/sec, 0.092ms latency
    Iteration 13/13... 10783 ops/sec, 0.092ms latency
  Valkey (TLS-Predis): 10683.06¬±299.93 ops/sec (CV: 2.8%), 0.093¬±0.003ms latency, Quality: good
  Final keys in database: 61474

Enhanced Predis results saved:
  CSV: ./benchmarklogs-4t/wordpress_object_cache_test_predis_predis.csv
  JSON: ./benchmarklogs-4t/wordpress_object_cache_test_predis_predis.json
  Markdown: ./benchmarklogs-4t/wordpress_object_cache_test_predis_predis.md
  Raw Data: ./benchmarklogs-4t/wordpress_object_cache_test_predis_predis_raw.json
============================================================
Enhanced Predis test suite completed!
Total execution time: 3,175.72 seconds
Total tests run: 8
Statistical iterations per test: 13
Results saved to ./benchmarklogs-4t/
Redis implementation: Predis (pure PHP)

====================================================================================================
ENHANCED STATISTICAL PERFORMANCE SUMMARY (Predis)
Thread Variant: 4 | Iterations per test: 13
====================================================================================================
Rank Database                       Ops/sec   ¬±StdDev      CV%  Latency  Quality     95% CI     Reliable
----------------------------------------------------------------------------------------------------
#1  Valkey (Predis)              14773      389    2.6%  0.067ms üü°good    14,557-14,989      ‚úÖ
#2  KeyDB (Predis)               12496      343    2.7%  0.080ms üü°good    12,305-12,686      ‚úÖ
#3  Dragonfly (Predis)           11138      344    3.1%  0.089ms üü°good    10,947-11,329      ‚úÖ
#4  Valkey (TLS-Predis)          10683      300    2.8%  0.093ms üü°good    10,517-10,849      ‚úÖ
#5  Redis (Predis)               10335      305    2.9%  0.096ms üü°good    10,166-10,504      ‚úÖ
#6  KeyDB (TLS-Predis)            9554      302    3.2%  0.104ms üü°good     9,387-9,722      ‚úÖ
#7  Redis (TLS-Predis)            7835      252    3.2%  0.127ms üü°good     7,695-7,975      ‚úÖ
#8  Dragonfly (TLS-Predis)        7594      205    2.7%  0.131ms üü°good     7,480-7,708      ‚úÖ
====================================================================================================
Implementation: Predis (Pure PHP Redis Client)
üìà Compare with phpredis results to see implementation trade-offs

============================================================
TLS vs NON-TLS PERFORMANCE COMPARISON (Predis)
Thread Variant: 4
============================================================
Redis      | Non-TLS:    10335¬±305  | TLS:     7835¬±252  | Impact: +24.2% *
KeyDB      | Non-TLS:    12496¬±343  | TLS:     9554¬±302  | Impact: +23.5% *
Dragonfly  | Non-TLS:    11138¬±344  | TLS:     7594¬±205  | Impact: +31.8% *
Valkey     | Non-TLS:    14773¬±389  | TLS:    10683¬±300  | Impact: +27.7% *
------------------------------------------------------------
* = Statistically significant difference (95% confidence)
Implementation: Predis (Pure PHP)
============================================================

================================================================================
STATISTICAL INSIGHTS (Predis)
Thread Variant: 4 | Iterations: 13
================================================================================
Measurement Quality Distribution:
  üü° Good      :  8 tests (100.0%)

Coefficient of Variation Analysis:
  Average CV: 2.9% (lower is better)
  Range: 2.6% - 3.2%
  üìä Good measurement consistency with Predis

Predis Implementation Notes:
  üì° Connection management: Automatic (no manual close required)
  üîí TLS handling: Enhanced SSL context support
  üîÑ Error recovery: Built-in retry logic with exponential backoff
  üìä Performance characteristics: Pure PHP (higher latency, more consistent)
================================================================================

================================================================================
PREDIS-SPECIFIC INSIGHTS
Thread Variant: 4 | Implementation: Predis (Pure PHP)
================================================================================
TLS Connection Reliability:
  ‚úÖ Predis TLS connections: 4/4 databases
  üìä All TLS connections established successfully
  üîí SSL context handling: Reliable (Predis manages SSL internally)

Predis Configuration Analysis:
  üîó Connection timeout: 5s
  üì° Read/write timeout: 5s
  üîÑ Connection retry attempts: 3
  ‚ö° TCP keepalive: Enabled
  üîó Persistent connections: Disabled

Performance Characteristics:
  üìà Average non-TLS performance: 12,185 ops/sec
  üîí Average TLS performance: 8,917 ops/sec
  üìä TLS overhead: 26.8%
  ‚ÑπÔ∏è  Note: 25-40% TLS overhead is normal for Redis over SSL

Predis Advantages:
  ‚úÖ Better TLS reliability compared to phpredis extension
  ‚úÖ Enhanced SSL context handling
  ‚úÖ No extension compilation dependencies
  ‚úÖ Consistent behavior across PHP versions
  ‚ö†Ô∏è  Trade-off: Lower raw performance due to pure PHP implementation
================================================================================

======================================================================
‚úÖ Predis WordPress Object Cache test completed successfully!
üìÅ Results saved to: ./benchmarklogs-4t
üìä Implementation: Predis (Pure PHP Redis Client)
üîí TLS Support: Enhanced reliability compared to phpredis

üìÑ Generated files:
  php_wordpress_test_phpredis.log (32KB)
  php_wordpress_test_predis.log (16.8KB)
  wordpress_object_cache_test_predis_predis.csv (1.8KB)
  wordpress_object_cache_test_predis_predis.json (99.6KB)
  wordpress_object_cache_test_predis_predis.md (2.7KB)
  wordpress_object_cache_test_predis_predis_raw.json (87.2KB)
