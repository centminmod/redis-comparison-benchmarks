WordPress Object Cache Test with Predis - Configured Runner
============================================================
Implementation: Predis (Pure PHP Redis Client)
Enhanced TLS Support: Yes
Statistical Analysis: 5 iterations with confidence intervals

📋 Loading configuration from: tests/php/test_config_predis.php
✅ Configuration loaded successfully

📊 Test Configuration:
  Implementation: Predis (Pure PHP)
  Duration per iteration: 10s
  Test iterations: 5
  Output directory: ./benchmarklogs-3t
  TLS testing: Enabled
  Flush before test: Yes
  Thread variant: 3
  Connection timeout: 5s
  Read/write timeout: 5s
  Connection retries: 3
  Persistent connections: No
  Thread configuration:
    redis_io_threads: 3 threads
    keydb_server_threads: 3 threads
    dragonfly_proactor_threads: 3 threads
    valkey_io_threads: 3 threads
  Database configurations:
    Redis: 127.0.0.1:6379 (TLS: 6390) (IO threads: 3)
    KeyDB: 127.0.0.1:6380 (TLS: 6391) (Server threads: 3)
    Dragonfly: 127.0.0.1:6381 (TLS: 6392) (Proactor threads: 3)
    Valkey: 127.0.0.1:6382 (TLS: 6393) (IO threads: 3)

======================================================================

🔍 Checking Predis availability...
✅ Predis library available

🚀 Starting Predis WordPress Object Cache Test...

Starting WordPress Object Cache Test (Predis)...
Timestamp: 2025-06-10 10:53:51 UTC
Predis Version: unknown
PHP Version: 8.4.8
Enhanced Testing Configuration (Predis):
- Iterations per test: 5
- Iteration pause: 500ms
- Statistical analysis: Enabled
- Raw data logging: Enabled
- Connection timeout: 5s
- Read/write timeout: 5s
- Connection retry attempts: 3
- Persistent connections: Disabled
- TCP keepalive: Enabled
Thread Variant: 3
Thread Configuration:
  redis_io_threads: 3 threads
  keydb_server_threads: 3 threads
  dragonfly_proactor_threads: 3 threads
  valkey_io_threads: 3 threads
TLS Certificates: Found and validated (Predis-compatible)

Checking TLS readiness (Predis)...
  Redis: TLS port accessible ✓
  KeyDB: TLS port accessible ✓
  Dragonfly: TLS port accessible ✓
  Valkey: TLS port accessible ✓

Predis TLS testing will be attempted for: Redis, KeyDB, Dragonfly, Valkey
============================================================
Testing Redis with Predis...
  Configuration: IO Threads: 3
  Running 5 iterations for Redis (non-TLS-Predis)...
  Initial keys in database: 189824
  Flushing database before test...
  Database flushed in 90.69ms. Keys remaining: 0
    Iteration 1/5... 8942 ops/sec, 0.111ms latency
    Iteration 2/5... 9534 ops/sec, 0.104ms latency
    Iteration 3/5... 9768 ops/sec, 0.102ms latency
    Iteration 4/5... 9942 ops/sec, 0.100ms latency
    Iteration 5/5... 10031 ops/sec, 0.099ms latency
  Redis (non-TLS-Predis): 9643.42±435.70 ops/sec (CV: 4.5%), 0.103±0.005ms latency, Quality: good
  Final keys in database: 44165
🔐 Attempting TLS connection to Redis at 127.0.0.1:6390 (Predis)
  Using custom port scheme: Redis=6390, KeyDB=6391, Dragonfly=6392, Valkey=6393
  Note: Predis uses 'tls' scheme and 'ssl' context array
  📡 Method 1: Predis 'tls' scheme with SSL context...
  🧪 Testing TLS connection with SET/GET commands...
  ✅ TLS connection successful with Predis 'tls' scheme
  Running 5 iterations for Redis (TLS-Predis)...
  Initial keys in database: 166148
  Flushing database before test...
  Database flushed in 82.83ms. Keys remaining: 0
    Iteration 1/5... 6899 ops/sec, 0.144ms latency
    Iteration 2/5... 7296 ops/sec, 0.136ms latency
    Iteration 3/5... 7464 ops/sec, 0.133ms latency
    Iteration 4/5... 7507 ops/sec, 0.133ms latency
    Iteration 5/5... 7723 ops/sec, 0.129ms latency
  Redis (TLS-Predis): 7377.82±307.95 ops/sec (CV: 4.2%), 0.135±0.006ms latency, Quality: good
  Final keys in database: 39335

Testing KeyDB with Predis...
  Configuration: Server Threads: 3
  Running 5 iterations for KeyDB (non-TLS-Predis)...
  Initial keys in database: 190058
  Flushing database before test...
  Database flushed in 100.35ms. Keys remaining: 0
    Iteration 1/5... 10944 ops/sec, 0.091ms latency
    Iteration 2/5... 11750 ops/sec, 0.085ms latency
    Iteration 3/5... 12042 ops/sec, 0.083ms latency
    Iteration 4/5... 12199 ops/sec, 0.081ms latency
    Iteration 5/5... 12314 ops/sec, 0.081ms latency
  KeyDB (non-TLS-Predis): 11849.61±548.87 ops/sec (CV: 4.6%), 0.084±0.004ms latency, Quality: good
  Final keys in database: 48103
🔐 Attempting TLS connection to KeyDB at 127.0.0.1:6391 (Predis)
  Using custom port scheme: Redis=6390, KeyDB=6391, Dragonfly=6392, Valkey=6393
  Note: Predis uses 'tls' scheme and 'ssl' context array
  📡 Method 1: Predis 'tls' scheme with SSL context...
  🧪 Testing TLS connection with SET/GET commands...
  ✅ TLS connection successful with Predis 'tls' scheme
  Running 5 iterations for KeyDB (TLS-Predis)...
  Initial keys in database: 190170
  Flushing database before test...
  Database flushed in 85.02ms. Keys remaining: 0
    Iteration 1/5... 8276 ops/sec, 0.120ms latency
    Iteration 2/5... 8897 ops/sec, 0.112ms latency
    Iteration 3/5... 9050 ops/sec, 0.110ms latency
    Iteration 4/5... 9130 ops/sec, 0.109ms latency
    Iteration 5/5... 9242 ops/sec, 0.108ms latency
  KeyDB (TLS-Predis): 8918.95±380.98 ops/sec (CV: 4.3%), 0.112±0.005ms latency, Quality: good
  Final keys in database: 42716

Testing Dragonfly with Predis...
  Configuration: Proactor Threads: 3
  Running 5 iterations for Dragonfly (non-TLS-Predis)...
  Initial keys in database: 190164
  Flushing database before test...
  Database flushed in 13.51ms. Keys remaining: 0
    Iteration 1/5... 9421 ops/sec, 0.106ms latency
    Iteration 2/5... 9901 ops/sec, 0.100ms latency
    Iteration 3/5... 10160 ops/sec, 0.098ms latency
    Iteration 4/5... 10340 ops/sec, 0.096ms latency
    Iteration 5/5... 10420 ops/sec, 0.095ms latency
  Dragonfly (non-TLS-Predis): 10048.47±403.19 ops/sec (CV: 4.0%), 0.099±0.004ms latency, Quality: good
  Final keys in database: 45256
🔐 Attempting TLS connection to Dragonfly at 127.0.0.1:6392 (Predis)
  Using custom port scheme: Redis=6390, KeyDB=6391, Dragonfly=6392, Valkey=6393
  Note: Predis uses 'tls' scheme and 'ssl' context array
  📡 Method 1: Predis 'tls' scheme with SSL context...
  🔐 Adding Dragonfly authentication to connection parameters...
  🧪 Testing TLS connection with SET/GET commands...
  ✅ TLS connection successful with Predis 'tls' scheme
  Running 5 iterations for Dragonfly (TLS-Predis)...
  Initial keys in database: 178304
  Flushing database before test...
  Database flushed in 13.44ms. Keys remaining: 0
    Iteration 1/5... 7431 ops/sec, 0.134ms latency
    Iteration 2/5... 7629 ops/sec, 0.130ms latency
    Iteration 3/5... 7882 ops/sec, 0.126ms latency
    Iteration 4/5... 8048 ops/sec, 0.124ms latency
    Iteration 5/5... 7893 ops/sec, 0.126ms latency
  Dragonfly (TLS-Predis): 7776.71±244.76 ops/sec (CV: 3.1%), 0.128±0.004ms latency, Quality: good
  Final keys in database: 40425

Testing Valkey with Predis...
  Configuration: IO Threads: 3
  Running 5 iterations for Valkey (non-TLS-Predis)...
  Initial keys in database: 189798
  Flushing database before test...
  Database flushed in 0.11ms. Keys remaining: 0
    Iteration 1/5... 12915 ops/sec, 0.077ms latency
    Iteration 2/5... 13986 ops/sec, 0.071ms latency
    Iteration 3/5... 14300 ops/sec, 0.069ms latency
    Iteration 4/5... 14401 ops/sec, 0.069ms latency
    Iteration 5/5... 14326 ops/sec, 0.069ms latency
  Valkey (non-TLS-Predis): 13985.56±618.97 ops/sec (CV: 4.4%), 0.071±0.003ms latency, Quality: good
  Final keys in database: 50935
🔐 Attempting TLS connection to Valkey at 127.0.0.1:6393 (Predis)
  Using custom port scheme: Redis=6390, KeyDB=6391, Dragonfly=6392, Valkey=6393
  Note: Predis uses 'tls' scheme and 'ssl' context array
  📡 Method 1: Predis 'tls' scheme with SSL context...
  🧪 Testing TLS connection with SET/GET commands...
  ✅ TLS connection successful with Predis 'tls' scheme
  Running 5 iterations for Valkey (TLS-Predis)...
  Initial keys in database: 189615
  Flushing database before test...
  Database flushed in 0.12ms. Keys remaining: 0
    Iteration 1/5... 9137 ops/sec, 0.109ms latency
    Iteration 2/5... 9937 ops/sec, 0.100ms latency
    Iteration 3/5... 10210 ops/sec, 0.097ms latency
    Iteration 4/5... 10280 ops/sec, 0.097ms latency
    Iteration 5/5... 10507 ops/sec, 0.095ms latency
  Valkey (TLS-Predis): 10014.19±531.00 ops/sec (CV: 5.3%), 0.100±0.006ms latency, Quality: fair
  Final keys in database: 45094

Enhanced Predis results saved:
  CSV: ./benchmarklogs-3t/wordpress_object_cache_test_predis_predis.csv
  JSON: ./benchmarklogs-3t/wordpress_object_cache_test_predis_predis.json
  Markdown: ./benchmarklogs-3t/wordpress_object_cache_test_predis_predis.md
  Raw Data: ./benchmarklogs-3t/wordpress_object_cache_test_predis_predis_raw.json
============================================================
Enhanced Predis test suite completed!
Total execution time: 417.17 seconds
Total tests run: 8
Statistical iterations per test: 5
Results saved to ./benchmarklogs-3t/
Redis implementation: Predis (pure PHP)

====================================================================================================
ENHANCED STATISTICAL PERFORMANCE SUMMARY (Predis)
Thread Variant: 3 | Iterations per test: 5
====================================================================================================
Rank Database                       Ops/sec   ±StdDev      CV%  Latency  Quality     95% CI     Reliable
----------------------------------------------------------------------------------------------------
#1  Valkey (Predis)              13986      619    4.4%  0.071ms 🟡good    13,217-14,754      ✅
#2  KeyDB (Predis)               11850      549    4.6%  0.084ms 🟡good    11,168-12,531      ✅
#3  Dragonfly (Predis)           10048      403    4.0%  0.099ms 🟡good    9,548-10,549      ✅
#4  Valkey (TLS-Predis)          10014      531    5.3%  0.100ms 🟠fair    9,355-10,673      ✅
#5  Redis (Predis)                9643      436    4.5%  0.103ms 🟡good    9,103-10,184      ✅
#6  KeyDB (TLS-Predis)            8919      381    4.3%  0.112ms 🟡good     8,446-9,392      ✅
#7  Dragonfly (TLS-Predis)        7777      245    3.1%  0.128ms 🟡good     7,473-8,081      ✅
#8  Redis (TLS-Predis)            7378      308    4.2%  0.135ms 🟡good     6,996-7,760      ✅
====================================================================================================
Implementation: Predis (Pure PHP Redis Client)
📈 Compare with phpredis results to see implementation trade-offs

============================================================
TLS vs NON-TLS PERFORMANCE COMPARISON (Predis)
Thread Variant: 3
============================================================
Redis      | Non-TLS:     9643±436  | TLS:     7378±308  | Impact: +23.5% *
KeyDB      | Non-TLS:    11850±549  | TLS:     8919±381  | Impact: +24.7% *
Dragonfly  | Non-TLS:    10048±403  | TLS:     7777±245  | Impact: +22.6% *
Valkey     | Non-TLS:    13986±619  | TLS:    10014±531  | Impact: +28.4% *
------------------------------------------------------------
* = Statistically significant difference (95% confidence)
Implementation: Predis (Pure PHP)
============================================================

================================================================================
STATISTICAL INSIGHTS (Predis)
Thread Variant: 3 | Iterations: 5
================================================================================
Measurement Quality Distribution:
  🟡 Good      :  7 tests (87.5%)
  🟠 Fair      :  1 tests (12.5%)

Coefficient of Variation Analysis:
  Average CV: 4.3% (lower is better)
  Range: 3.1% - 5.3%
  📊 Good measurement consistency with Predis

Predis Implementation Notes:
  📡 Connection management: Automatic (no manual close required)
  🔒 TLS handling: Enhanced SSL context support
  🔄 Error recovery: Built-in retry logic with exponential backoff
  📊 Performance characteristics: Pure PHP (higher latency, more consistent)
================================================================================

================================================================================
PREDIS-SPECIFIC INSIGHTS
Thread Variant: 3 | Implementation: Predis (Pure PHP)
================================================================================
TLS Connection Reliability:
  ✅ Predis TLS connections: 4/4 databases
  📊 All TLS connections established successfully
  🔒 SSL context handling: Reliable (Predis manages SSL internally)

Predis Configuration Analysis:
  🔗 Connection timeout: 5s
  📡 Read/write timeout: 5s
  🔄 Connection retry attempts: 3
  ⚡ TCP keepalive: Enabled
  🔗 Persistent connections: Disabled

Performance Characteristics:
  📈 Average non-TLS performance: 11,382 ops/sec
  🔒 Average TLS performance: 8,522 ops/sec
  📊 TLS overhead: 25.1%
  ℹ️  Note: 25-40% TLS overhead is normal for Redis over SSL

Predis Advantages:
  ✅ Better TLS reliability compared to phpredis extension
  ✅ Enhanced SSL context handling
  ✅ No extension compilation dependencies
  ✅ Consistent behavior across PHP versions
  ⚠️  Trade-off: Lower raw performance due to pure PHP implementation
================================================================================

======================================================================
✅ Predis WordPress Object Cache test completed successfully!
📁 Results saved to: ./benchmarklogs-3t
📊 Implementation: Predis (Pure PHP Redis Client)
🔒 TLS Support: Enhanced reliability compared to phpredis

📄 Generated files:
  php_wordpress_test_phpredis.log (25.4KB)
  php_wordpress_test_predis.log (13.4KB)
  wordpress_object_cache_test_predis_predis.csv (1.8KB)
  wordpress_object_cache_test_predis_predis.json (50.5KB)
  wordpress_object_cache_test_predis_predis.md (2.7KB)
  wordpress_object_cache_test_predis_predis_raw.json (38.2KB)
