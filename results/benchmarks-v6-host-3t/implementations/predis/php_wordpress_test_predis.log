WordPress Object Cache Test with Predis - Configured Runner
============================================================
Implementation: Predis (Pure PHP Redis Client)
Enhanced TLS Support: Yes
Statistical Analysis: 13 iterations with confidence intervals

üìã Loading configuration from: tests/php/test_config_predis.php
‚úÖ Configuration loaded successfully

üìä Test Configuration:
  Implementation: Predis (Pure PHP)
  Duration per iteration: 30s
  Test iterations: 13
  Output directory: ./benchmarklogs-3t
  TLS testing: Enabled
  Flush before test: Yes
  Thread variant: 3
  Connection timeout: 5s
  Read/write timeout: 5s
  Connection retries: 3
  Persistent connections: No
  Thread configuration:
    redis_io_threads: 3 threads
    keydb_server_threads: 3 threads
    dragonfly_proactor_threads: 3 threads
    valkey_io_threads: 3 threads
  Database configurations:
    Redis: 127.0.0.1:6379 (TLS: 6390) (IO threads: 3)
    KeyDB: 127.0.0.1:6380 (TLS: 6391) (Server threads: 3)
    Dragonfly: 127.0.0.1:6381 (TLS: 6392) (Proactor threads: 3)
    Valkey: 127.0.0.1:6382 (TLS: 6393) (IO threads: 3)

======================================================================

üîç Checking Predis availability...
‚úÖ Predis library available

üöÄ Starting Predis WordPress Object Cache Test...

Starting WordPress Object Cache Test (Predis)...
Timestamp: 2025-06-09 18:09:01 UTC
Predis Version: unknown
PHP Version: 8.4.8
Enhanced Testing Configuration (Predis):
- Iterations per test: 13
- Iteration pause: 500ms
- Statistical analysis: Enabled
- Raw data logging: Enabled
- Connection timeout: 5s
- Read/write timeout: 5s
- Connection retry attempts: 3
- Persistent connections: Disabled
- TCP keepalive: Enabled
Thread Variant: 3
Thread Configuration:
  redis_io_threads: 3 threads
  keydb_server_threads: 3 threads
  dragonfly_proactor_threads: 3 threads
  valkey_io_threads: 3 threads
TLS Certificates: Found and validated (Predis-compatible)

Checking TLS readiness (Predis)...
  Redis: TLS port accessible ‚úì
  KeyDB: TLS port accessible ‚úì
  Dragonfly: TLS port accessible ‚úì
  Valkey: TLS port accessible ‚úì

Predis TLS testing will be attempted for: Redis, KeyDB, Dragonfly, Valkey
============================================================
Testing Redis with Predis...
  Configuration: IO Threads: 3
  Running 13 iterations for Redis (non-TLS-Predis)...
  Initial keys in database: 395140
  Flushing database before test...
  Database flushed in 251.20ms. Keys remaining: 0
    Iteration 1/13... 9198 ops/sec, 0.108ms latency
    Iteration 2/13... 9837 ops/sec, 0.101ms latency
    Iteration 3/13... 10069 ops/sec, 0.099ms latency
    Iteration 4/13... 9358 ops/sec, 0.106ms latency
    Iteration 5/13... 9252 ops/sec, 0.108ms latency
    Iteration 6/13... 9121 ops/sec, 0.109ms latency
    Iteration 7/13... 9513 ops/sec, 0.105ms latency
    Iteration 8/13... 9249 ops/sec, 0.108ms latency
    Iteration 9/13... 9089 ops/sec, 0.109ms latency
    Iteration 10/13... 9759 ops/sec, 0.102ms latency
    Iteration 11/13... 9401 ops/sec, 0.106ms latency
    Iteration 12/13... 9122 ops/sec, 0.109ms latency
    Iteration 13/13... 8951 ops/sec, 0.111ms latency
  Redis (non-TLS-Predis): 9378.31¬±331.05 ops/sec (CV: 3.5%), 0.106¬±0.004ms latency, Quality: good
  Final keys in database: 61450
üîê Attempting TLS connection to Unknown at 127.0.0.1:6390 (Predis)
  Using custom port scheme: Redis=6390, KeyDB=6391, Dragonfly=6392, Valkey=6393
  Note: Predis uses 'tls' scheme and 'ssl' context array
  üì° Method 1: Predis 'tls' scheme with SSL context...
  üß™ Testing TLS connection with SET/GET commands...
  ‚úÖ TLS connection successful with Predis 'tls' scheme
  Running 13 iterations for Redis (TLS-Predis)...
  Initial keys in database: 395239
  Flushing database before test...
  Database flushed in 266.87ms. Keys remaining: 0
    Iteration 1/13... 6082 ops/sec, 0.164ms latency
    Iteration 2/13... 6697 ops/sec, 0.149ms latency
    Iteration 3/13... 6867 ops/sec, 0.145ms latency
    Iteration 4/13... 6983 ops/sec, 0.143ms latency
    Iteration 5/13... 6569 ops/sec, 0.152ms latency
    Iteration 6/13... 6835 ops/sec, 0.146ms latency
    Iteration 7/13... 7125 ops/sec, 0.140ms latency
    Iteration 8/13... 7700 ops/sec, 0.129ms latency
    Iteration 9/13... 7543 ops/sec, 0.132ms latency
    Iteration 10/13... 7728 ops/sec, 0.129ms latency
    Iteration 11/13... 7891 ops/sec, 0.126ms latency
    Iteration 12/13... 7825 ops/sec, 0.127ms latency
    Iteration 13/13... 7856 ops/sec, 0.127ms latency
  Redis (TLS-Predis): 7207.78¬±587.58 ops/sec (CV: 8.2%), 0.139¬±0.012ms latency, Quality: fair
  Final keys in database: 61352

Testing KeyDB with Predis...
  Configuration: Server Threads: 3
  Running 13 iterations for KeyDB (non-TLS-Predis)...
  Initial keys in database: 394338
  Flushing database before test...
  Database flushed in 279.73ms. Keys remaining: 0
    Iteration 1/13... 11434 ops/sec, 0.087ms latency
    Iteration 2/13... 12146 ops/sec, 0.082ms latency
    Iteration 3/13... 12403 ops/sec, 0.080ms latency
    Iteration 4/13... 12442 ops/sec, 0.080ms latency
    Iteration 5/13... 12507 ops/sec, 0.079ms latency
    Iteration 6/13... 12552 ops/sec, 0.079ms latency
    Iteration 7/13... 12526 ops/sec, 0.079ms latency
    Iteration 8/13... 12631 ops/sec, 0.079ms latency
    Iteration 9/13... 12561 ops/sec, 0.079ms latency
    Iteration 10/13... 12588 ops/sec, 0.079ms latency
    Iteration 11/13... 12625 ops/sec, 0.079ms latency
    Iteration 12/13... 12551 ops/sec, 0.079ms latency
    Iteration 13/13... 12511 ops/sec, 0.079ms latency
  KeyDB (non-TLS-Predis): 12421.29¬±321.92 ops/sec (CV: 2.6%), 0.080¬±0.002ms latency, Quality: good
  Final keys in database: 61498
üîê Attempting TLS connection to Unknown at 127.0.0.1:6391 (Predis)
  Using custom port scheme: Redis=6390, KeyDB=6391, Dragonfly=6392, Valkey=6393
  Note: Predis uses 'tls' scheme and 'ssl' context array
  üì° Method 1: Predis 'tls' scheme with SSL context...
  üß™ Testing TLS connection with SET/GET commands...
  ‚úÖ TLS connection successful with Predis 'tls' scheme
  Running 13 iterations for KeyDB (TLS-Predis)...
  Initial keys in database: 393128
  Flushing database before test...
  Database flushed in 261.75ms. Keys remaining: 0
    Iteration 1/13... 8601 ops/sec, 0.116ms latency
    Iteration 2/13... 9156 ops/sec, 0.109ms latency
    Iteration 3/13... 9048 ops/sec, 0.110ms latency
    Iteration 4/13... 8761 ops/sec, 0.114ms latency
    Iteration 5/13... 8682 ops/sec, 0.115ms latency
    Iteration 6/13... 8969 ops/sec, 0.111ms latency
    Iteration 7/13... 8963 ops/sec, 0.111ms latency
    Iteration 8/13... 8941 ops/sec, 0.111ms latency
    Iteration 9/13... 8679 ops/sec, 0.115ms latency
    Iteration 10/13... 8799 ops/sec, 0.113ms latency
    Iteration 11/13... 9490 ops/sec, 0.105ms latency
    Iteration 12/13... 9414 ops/sec, 0.106ms latency
    Iteration 13/13... 9530 ops/sec, 0.104ms latency
  KeyDB (TLS-Predis): 9002.47¬±314.38 ops/sec (CV: 3.5%), 0.111¬±0.004ms latency, Quality: good
  Final keys in database: 61436

Testing Dragonfly with Predis...
  Configuration: Proactor Threads: 3
  Running 13 iterations for Dragonfly (non-TLS-Predis)...
  Initial keys in database: 390511
  Flushing database before test...
  Database flushed in 21.36ms. Keys remaining: 0
    Iteration 1/13... 9576 ops/sec, 0.104ms latency
    Iteration 2/13... 10131 ops/sec, 0.098ms latency
    Iteration 3/13... 10411 ops/sec, 0.095ms latency
    Iteration 4/13... 10607 ops/sec, 0.094ms latency
    Iteration 5/13... 10661 ops/sec, 0.093ms latency
    Iteration 6/13... 10692 ops/sec, 0.093ms latency
    Iteration 7/13... 10727 ops/sec, 0.093ms latency
    Iteration 8/13... 10662 ops/sec, 0.093ms latency
    Iteration 9/13... 10742 ops/sec, 0.093ms latency
    Iteration 10/13... 10693 ops/sec, 0.093ms latency
    Iteration 11/13... 10694 ops/sec, 0.093ms latency
    Iteration 12/13... 10722 ops/sec, 0.093ms latency
    Iteration 13/13... 10502 ops/sec, 0.095ms latency
  Dragonfly (non-TLS-Predis): 10524.73¬±332.27 ops/sec (CV: 3.2%), 0.095¬±0.003ms latency, Quality: good
  Final keys in database: 61308
üîê Attempting TLS connection to Unknown at 127.0.0.1:6392 (Predis)
  Using custom port scheme: Redis=6390, KeyDB=6391, Dragonfly=6392, Valkey=6393
  Note: Predis uses 'tls' scheme and 'ssl' context array
  üì° Method 1: Predis 'tls' scheme with SSL context...
  üß™ Testing TLS connection with SET/GET commands...
  ‚ùå Predis 'tls' scheme failed: NOAUTH Authentication required.
  üì° Method 2: Predis 'rediss' URI scheme...
  ‚ùå Predis 'rediss' URI failed: NOAUTH Authentication required.
  üì° Method 3: Predis TLS with localhost hostname...
  ‚ùå Predis localhost TLS failed: NOAUTH Authentication required.
  ‚ùå All Predis TLS connection methods failed for Unknown at port 6392
  üìã Note: TLS connection failed likely due to server certificate configuration
  üîÑ With recent Docker config changes, TLS should now work properly
  üö´ Bypassing TLS test for Unknown to allow testing to continue
  ‚úÖ Non-TLS results remain valid and reliable for performance comparison
  ‚Üí TLS test skipped for Dragonfly due to Predis connection failure

Testing Valkey with Predis...
  Configuration: IO Threads: 3
  Running 13 iterations for Valkey (non-TLS-Predis)...
  Initial keys in database: 391930
  Flushing database before test...
  Database flushed in 0.09ms. Keys remaining: 0
    Iteration 1/13... 13357 ops/sec, 0.074ms latency
    Iteration 2/13... 14590 ops/sec, 0.068ms latency
    Iteration 3/13... 15117 ops/sec, 0.066ms latency
    Iteration 4/13... 15077 ops/sec, 0.066ms latency
    Iteration 5/13... 14978 ops/sec, 0.066ms latency
    Iteration 6/13... 15101 ops/sec, 0.066ms latency
    Iteration 7/13... 15090 ops/sec, 0.066ms latency
    Iteration 8/13... 15013 ops/sec, 0.066ms latency
    Iteration 9/13... 15179 ops/sec, 0.065ms latency
    Iteration 10/13... 15048 ops/sec, 0.066ms latency
    Iteration 11/13... 15051 ops/sec, 0.066ms latency
    Iteration 12/13... 14901 ops/sec, 0.067ms latency
    Iteration 13/13... 14977 ops/sec, 0.066ms latency
  Valkey (non-TLS-Predis): 14882.91¬±480.84 ops/sec (CV: 3.2%), 0.067¬±0.002ms latency, Quality: good
  Final keys in database: 61503
üîê Attempting TLS connection to Unknown at 127.0.0.1:6393 (Predis)
  Using custom port scheme: Redis=6390, KeyDB=6391, Dragonfly=6392, Valkey=6393
  Note: Predis uses 'tls' scheme and 'ssl' context array
  üì° Method 1: Predis 'tls' scheme with SSL context...
  üß™ Testing TLS connection with SET/GET commands...
  ‚úÖ TLS connection successful with Predis 'tls' scheme
  Running 13 iterations for Valkey (TLS-Predis)...
  Initial keys in database: 390847
  Flushing database before test...
  Database flushed in 0.17ms. Keys remaining: 0
    Iteration 1/13... 9610 ops/sec, 0.103ms latency
    Iteration 2/13... 10119 ops/sec, 0.098ms latency
    Iteration 3/13... 10320 ops/sec, 0.096ms latency
    Iteration 4/13... 10561 ops/sec, 0.094ms latency
    Iteration 5/13... 10500 ops/sec, 0.095ms latency
    Iteration 6/13... 10589 ops/sec, 0.094ms latency
    Iteration 7/13... 10708 ops/sec, 0.093ms latency
    Iteration 8/13... 10704 ops/sec, 0.093ms latency
    Iteration 9/13... 10656 ops/sec, 0.093ms latency
    Iteration 10/13... 10773 ops/sec, 0.092ms latency
    Iteration 11/13... 10666 ops/sec, 0.093ms latency
    Iteration 12/13... 10800 ops/sec, 0.092ms latency
    Iteration 13/13... 10663 ops/sec, 0.093ms latency
  Valkey (TLS-Predis): 10512.79¬±330.04 ops/sec (CV: 3.1%), 0.095¬±0.003ms latency, Quality: good
  Final keys in database: 61462

Enhanced Predis results saved:
  CSV: ./benchmarklogs-3t/wordpress_object_cache_test_predis_predis.csv
  JSON: ./benchmarklogs-3t/wordpress_object_cache_test_predis_predis.json
  Markdown: ./benchmarklogs-3t/wordpress_object_cache_test_predis_predis.md
  Raw Data: ./benchmarklogs-3t/wordpress_object_cache_test_predis_predis_raw.json
============================================================
Enhanced Predis test suite completed!
Total execution time: 2,779.04 seconds
Total tests run: 7
Statistical iterations per test: 13
Results saved to ./benchmarklogs-3t/
Redis implementation: Predis (pure PHP)

====================================================================================================
ENHANCED STATISTICAL PERFORMANCE SUMMARY (Predis)
Thread Variant: 3 | Iterations per test: 13
====================================================================================================
Rank Database                       Ops/sec   ¬±StdDev      CV%  Latency  Quality     95% CI     Reliable
----------------------------------------------------------------------------------------------------
#1  Valkey (Predis)              14883      481    3.2%  0.067ms üü°good    14,616-15,150      ‚úÖ
#2  KeyDB (Predis)               12421      322    2.6%  0.080ms üü°good    12,243-12,600      ‚úÖ
#3  Dragonfly (Predis)           10525      332    3.2%  0.095ms üü°good    10,340-10,709      ‚úÖ
#4  Valkey (TLS-Predis)          10513      330    3.1%  0.095ms üü°good    10,330-10,696      ‚úÖ
#5  Redis (Predis)                9378      331    3.5%  0.106ms üü°good     9,195-9,562      ‚úÖ
#6  KeyDB (TLS-Predis)            9002      314    3.5%  0.111ms üü°good     8,828-9,177      ‚úÖ
#7  Redis (TLS-Predis)            7208      588    8.2%  0.139ms üü†fair     6,882-7,534      ‚úÖ
====================================================================================================
Implementation: Predis (Pure PHP Redis Client)
üìà Compare with phpredis results to see implementation trade-offs

============================================================
TLS vs NON-TLS PERFORMANCE COMPARISON (Predis)
Thread Variant: 3
============================================================
Redis      | Non-TLS:     9378¬±331  | TLS:     7208¬±588  | Impact: +23.1% *
KeyDB      | Non-TLS:    12421¬±322  | TLS:     9002¬±314  | Impact: +27.5% *
Dragonfly  | Non-TLS:    10525¬±332  | TLS:   FAILED | Impact: N/A
Valkey     | Non-TLS:    14883¬±481  | TLS:    10513¬±330  | Impact: +29.4% *
------------------------------------------------------------
* = Statistically significant difference (95% confidence)
Implementation: Predis (Pure PHP)
============================================================

================================================================================
STATISTICAL INSIGHTS (Predis)
Thread Variant: 3 | Iterations: 13
================================================================================
Measurement Quality Distribution:
  üü° Good      :  6 tests (85.7%)
  üü† Fair      :  1 tests (14.3%)

Coefficient of Variation Analysis:
  Average CV: 3.9% (lower is better)
  Range: 2.6% - 8.2%
  üìä Good measurement consistency with Predis

Predis Implementation Notes:
  üì° Connection management: Automatic (no manual close required)
  üîí TLS handling: Enhanced SSL context support
  üîÑ Error recovery: Built-in retry logic with exponential backoff
  üìä Performance characteristics: Pure PHP (higher latency, more consistent)
================================================================================

================================================================================
PREDIS-SPECIFIC INSIGHTS
Thread Variant: 3 | Implementation: Predis (Pure PHP)
================================================================================
TLS Connection Reliability:
  ‚úÖ Predis TLS connections: 3/4 databases
  üìä All TLS connections established successfully
  üîí SSL context handling: Reliable (Predis manages SSL internally)

Predis Configuration Analysis:
  üîó Connection timeout: 5s
  üì° Read/write timeout: 5s
  üîÑ Connection retry attempts: 3
  ‚ö° TCP keepalive: Enabled
  üîó Persistent connections: Disabled

Performance Characteristics:
  üìà Average non-TLS performance: 11,802 ops/sec
  üîí Average TLS performance: 8,908 ops/sec
  üìä TLS overhead: 24.5%
  ‚ÑπÔ∏è  Note: 25-40% TLS overhead is normal for Redis over SSL

Predis Advantages:
  ‚úÖ Better TLS reliability compared to phpredis extension
  ‚úÖ Enhanced SSL context handling
  ‚úÖ No extension compilation dependencies
  ‚úÖ Consistent behavior across PHP versions
  ‚ö†Ô∏è  Trade-off: Lower raw performance due to pure PHP implementation
================================================================================

======================================================================
‚úÖ Predis WordPress Object Cache test completed successfully!
üìÅ Results saved to: ./benchmarklogs-3t
üìä Implementation: Predis (Pure PHP Redis Client)
üîí TLS Support: Enhanced reliability compared to phpredis

üìÑ Generated files:
  php_wordpress_test_phpredis.log (31.1KB)
  php_wordpress_test_predis.log (16.4KB)
  wordpress_object_cache_test_predis_predis.csv (1.6KB)
  wordpress_object_cache_test_predis_predis.json (87.4KB)
  wordpress_object_cache_test_predis_predis.md (2.6KB)
  wordpress_object_cache_test_predis_predis_raw.json (76.4KB)
